(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ 4:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "CFaH":
/*!*******************************!*\
  !*** ./client/common/http.js ***!
  \*******************************/
/*! exports provided: Http */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Http", function() { return Http; });
/* harmony import */ var request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! request */ "MNzl");
/* harmony import */ var request__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(request__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config_redux_redux_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/redux/redux.store */ "p6Ez");


class Http {
  constructor() {}

  get(url, auth = true, options = null, fullyQualified = false, overrideStatusCodeFailure = false) {
    return new Promise((resolve, reject) => {
      try {
        if (!options) {
          options = {
            method: 'GET',
            url: fullyQualified ? url : `${window.location.protocol}//${window.location.host}${url}`,
            cache: false,
            headers: {
              'Content-Type': 'application/json'
            }
          };
        }

        if (auth) {
          const {
            token
          } = _config_redux_redux_store__WEBPACK_IMPORTED_MODULE_1__["store"].getState().appReducer;
          options.headers['Authorization'] = `Bearer ${token}`;
        }

        request__WEBPACK_IMPORTED_MODULE_0___default()(options, (error, response, body) => {
          if (error) {
            return reject(error);
          }

          if (!overrideStatusCodeFailure && !(response.statusCode >= 200 && response.statusCode <= 299)) {
            reject(`Status Code: ${response.statusCode}`);
          }

          resolve(JSON.parse(response.body));
        });
      } catch (e) {
        reject(e);
      }
    });
  }

  post(url, body, auth = true, fullyQualified = false, options = null, overrideStatusCodeFailure = false) {
    return new Promise((resolve, reject) => {
      try {
        if (!options) {
          options = {
            method: 'POST',
            url: fullyQualified ? url : `${window.location.protocol}//${window.location.host}${url}`,
            cache: false,
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
          };
        }

        if (auth) {
          const {
            token
          } = _config_redux_redux_store__WEBPACK_IMPORTED_MODULE_1__["store"].getState().appReducer;
          options.headers['Authorization'] = `Bearer ${token}`;
        }

        request__WEBPACK_IMPORTED_MODULE_0___default()(options, (error, response, body) => {
          if (error) {
            return reject(error);
          }

          if (!overrideStatusCodeFailure && !(response.statusCode >= 200 && response.statusCode <= 299)) {
            reject(`Status Code: ${response.statusCode}`);
          }

          resolve(JSON.parse(response.body));
        });
      } catch (e) {
        reject(e);
      }
    });
  }

  put(url, body, auth = true, fullyQualified = false, options = null, overrideStatusCodeFailure = false) {
    return new Promise((resolve, reject) => {
      try {
        if (!options) {
          options = {
            method: 'PUT',
            url: fullyQualified ? url : `${window.location.protocol}//${window.location.host}${url}`,
            cache: false,
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
          };
        }

        if (auth) {
          const {
            token
          } = _config_redux_redux_store__WEBPACK_IMPORTED_MODULE_1__["store"].getState().appReducer;
          options.headers['Authorization'] = `Bearer ${token}`;
        }

        request__WEBPACK_IMPORTED_MODULE_0___default()(options, (error, response, body) => {
          if (error) {
            return reject(error);
          }

          if (!overrideStatusCodeFailure && !(response.statusCode >= 200 && response.statusCode <= 299)) {
            reject(`Status Code: ${response.statusCode}`);
          }

          resolve(JSON.parse(response.body));
        });
      } catch (e) {
        reject(e);
      }
    });
  }

}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,