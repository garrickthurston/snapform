{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\curve\\\\base.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\utils.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\curves.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\curve\\\\short.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\eddsa\\\\key.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\curve\\\\edwards.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\precomputed\\\\secp256k1.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\curve\\\\index.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\eddsa\\\\signature.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\curve\\\\mont.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\eddsa\\\\index.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\ec\\\\signature.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\ec\\\\index.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\elliptic\\\\lib\\\\elliptic\\\\ec\\\\key.js\"],\"names\":[\"BN\",\"__webpack_require__\",\"utils\",\"getNAF\",\"getJSF\",\"assert\",\"BaseCurve\",\"type\",\"conf\",\"this\",\"p\",\"red\",\"prime\",\"mont\",\"zero\",\"toRed\",\"one\",\"two\",\"n\",\"g\",\"pointFromJSON\",\"gRed\",\"_wnafT1\",\"Array\",\"_wnafT2\",\"_wnafT3\",\"_wnafT4\",\"adjustCount\",\"div\",\"cmpn\",\"redN\",\"_maxwellTrick\",\"BasePoint\",\"curve\",\"precomputed\",\"module\",\"exports\",\"prototype\",\"point\",\"Error\",\"validate\",\"_fixedNafMul\",\"k\",\"doubles\",\"_getDoubles\",\"naf\",\"I\",\"step\",\"repr\",\"j\",\"length\",\"nafW\",\"push\",\"a\",\"jpoint\",\"b\",\"i\",\"mixedAdd\",\"points\",\"neg\",\"add\",\"toP\",\"_wnafMul\",\"w\",\"nafPoints\",\"_getNAFPoints\",\"wnd\",\"acc\",\"dblp\",\"z\",\"_wnafMulAdd\",\"defW\",\"coeffs\",\"len\",\"jacobianResult\",\"wndWidth\",\"max\",\"comb\",\"y\",\"cmp\",\"toJ\",\"redNeg\",\"index\",\"jsf\",\"Math\",\"ja\",\"jb\",\"tmp\",\"eq\",\"decodePoint\",\"bytes\",\"enc\",\"toArray\",\"byteLength\",\"slice\",\"pointFromX\",\"encodeCompressed\",\"encode\",\"_encode\",\"compact\",\"x\",\"getX\",\"getY\",\"isEven\",\"concat\",\"precompute\",\"power\",\"beta\",\"_getBeta\",\"_hasDoubles\",\"ceil\",\"bitLength\",\"dbl\",\"res\",\"r\",\"minAssert\",\"minUtils\",\"zero2\",\"toHex\",\"num\",\"ws\",\"clone\",\"isOdd\",\"mod\",\"andln\",\"isubn\",\"shift\",\"iushrn\",\"k1\",\"k2\",\"d1\",\"d2\",\"u1\",\"u2\",\"m8\",\"m14\",\"m24\",\"cachedProperty\",\"obj\",\"name\",\"computer\",\"key\",\"undefined\",\"call\",\"parseBytes\",\"intFromLE\",\"pre\",\"curves\",\"hash\",\"elliptic\",\"PresetCurve\",\"options\",\"short\",\"edwards\",\"mul\",\"isInfinity\",\"defineCurve\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"value\",\"sha256\",\"sha384\",\"sha512\",\"c\",\"d\",\"e\",\"h\",\"lambda\",\"basis\",\"inherits\",\"Base\",\"base\",\"ShortCurve\",\"tinv\",\"redInvm\",\"zeroA\",\"fromRed\",\"threeA\",\"sub\",\"endo\",\"_getEndomorphism\",\"_endoWnafT1\",\"_endoWnafT2\",\"Point\",\"isRed\",\"inf\",\"forceRed\",\"JPoint\",\"zOne\",\"modn\",\"betas\",\"_getEndoRoots\",\"lambdas\",\"redMul\",\"map\",\"vec\",\"_getEndoBasis\",\"ntinv\",\"s\",\"redSqrt\",\"redAdd\",\"redSub\",\"a0\",\"b0\",\"a1\",\"b1\",\"a2\",\"b2\",\"prevR\",\"aprxSqrt\",\"ushrn\",\"floor\",\"u\",\"v\",\"x1\",\"y1\",\"x2\",\"y2\",\"q\",\"len1\",\"sqr\",\"negative\",\"_endoSplit\",\"v1\",\"v2\",\"c1\",\"divRound\",\"c2\",\"p1\",\"p2\",\"q1\",\"q2\",\"odd\",\"redSqr\",\"redIAdd\",\"ax\",\"rhs\",\"redISub\",\"_endoWnafMulAdd\",\"npoints\",\"ncoeffs\",\"split\",\"ineg\",\"fromJSON\",\"endoMul\",\"toJSON\",\"JSON\",\"parse\",\"obj2point\",\"inspect\",\"toString\",\"nx\",\"ny\",\"ys1\",\"dyinv\",\"mulAdd\",\"jmulAdd\",\"_precompute\",\"negate\",\"zinv\",\"zinv2\",\"ay\",\"pz2\",\"z2\",\"s1\",\"s2\",\"h2\",\"h3\",\"nz\",\"pow\",\"jx\",\"jy\",\"jz\",\"jz4\",\"jyd\",\"jx2\",\"jyd2\",\"jyd4\",\"t1\",\"t2\",\"dny\",\"_zeroDbl\",\"_threeDbl\",\"_dbl\",\"xx\",\"yy\",\"yyyy\",\"m\",\"t\",\"yyyy8\",\"f\",\"c8\",\"delta\",\"gamma\",\"alpha\",\"beta4\",\"beta8\",\"ggamma8\",\"jy2\",\"jxd4\",\"jyd8\",\"trpl\",\"zz\",\"mm\",\"ee\",\"yyu4\",\"kbase\",\"z3\",\"pz3\",\"eqXToP\",\"zs\",\"rx\",\"xc\",\"iadd\",\"version\",\"rand\",\"ec\",\"eddsa\",\"KeyPair\",\"params\",\"_secret\",\"secret\",\"isPoint\",\"pub\",\"_pub\",\"_pubBytes\",\"fromPublic\",\"fromSecret\",\"encodePoint\",\"priv\",\"lastIx\",\"encodingLength\",\"decodeInt\",\"privBytes\",\"update\",\"digest\",\"sign\",\"message\",\"verify\",\"sig\",\"getSecret\",\"getPublic\",\"pubBytes\",\"EdwardsCurve\",\"twisted\",\"mOneA\",\"extended\",\"umod\",\"dd\",\"oneC\",\"_mulA\",\"_mulC\",\"lhs\",\"pointFromY\",\"normalize\",\"_extDbl\",\"nt\",\"_projDbl\",\"_extAdd\",\"_projAdd\",\"zi\",\"other\",\"Signature\",\"isArray\",\"R\",\"S\",\"_R\",\"_S\",\"_Rencoded\",\"Rencoded\",\"_Sencoded\",\"Sencoded\",\"encodeInt\",\"toBytes\",\"toUpperCase\",\"MontCurve\",\"i4\",\"a24\",\"aa\",\"bb\",\"diffAdd\",\"diff\",\"da\",\"cb\",\"bits\",\"jumlAdd\",\"EDDSA\",\"pointClass\",\"constructor\",\"keyFromSecret\",\"hashInt\",\"messagePrefix\",\"s_\",\"makeSignature\",\"keyFromPublic\",\"SG\",\"arguments\",\"normed\",\"xIsOdd\",\"val\",\"_importDER\",\"recoveryParam\",\"Position\",\"place\",\"getLength\",\"buf\",\"initial\",\"octetLen\",\"off\",\"rmPadding\",\"constructLength\",\"arr\",\"octets\",\"log\",\"LN2\",\"data\",\"rlen\",\"slen\",\"toDER\",\"backHalf\",\"HmacDRBG\",\"EC\",\"hasOwnProperty\",\"nh\",\"keyPair\",\"keyFromPrivate\",\"fromPrivate\",\"genKeyPair\",\"drbg\",\"pers\",\"persEnc\",\"entropy\",\"hmacStrength\",\"entropyEnc\",\"nonce\",\"ns2\",\"generate\",\"iaddn\",\"_truncateToN\",\"msg\",\"truncOnly\",\"bkey\",\"getPrivate\",\"ns1\",\"iter\",\"kp\",\"kpX\",\"invm\",\"canonical\",\"signature\",\"sinv\",\"recoverPubKey\",\"isYOdd\",\"isSecondKey\",\"rInv\",\"getKeyRecoveryParam\",\"Q\",\"Qprime\",\"_importPrivate\",\"privEnc\",\"_importPublic\",\"pubEnc\",\"result\",\"reason\",\"derive\"],\"mappings\":\"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CA,mEACA,kEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,sEAIAb,IAAA,CACAqB,IAAA,EACAR,OAAA,CACA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,iEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,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\",\"sourcesContent\":[\"'use strict';\\n\\nvar BN = require('bn.js');\\nvar elliptic = require('../../elliptic');\\nvar utils = elliptic.utils;\\nvar getNAF = utils.getNAF;\\nvar getJSF = utils.getJSF;\\nvar assert = utils.assert;\\n\\nfunction BaseCurve(type, conf) {\\n  this.type = type;\\n  this.p = new BN(conf.p, 16);\\n\\n  // Use Montgomery, when there is no fast reduction for the prime\\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\\n\\n  // Useful for many curves\\n  this.zero = new BN(0).toRed(this.red);\\n  this.one = new BN(1).toRed(this.red);\\n  this.two = new BN(2).toRed(this.red);\\n\\n  // Curve configuration, optional\\n  this.n = conf.n && new BN(conf.n, 16);\\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\\n\\n  // Temporary arrays\\n  this._wnafT1 = new Array(4);\\n  this._wnafT2 = new Array(4);\\n  this._wnafT3 = new Array(4);\\n  this._wnafT4 = new Array(4);\\n\\n  // Generalized Greg Maxwell's trick\\n  var adjustCount = this.n && this.p.div(this.n);\\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\\n    this.redN = null;\\n  } else {\\n    this._maxwellTrick = true;\\n    this.redN = this.n.toRed(this.red);\\n  }\\n}\\nmodule.exports = BaseCurve;\\n\\nBaseCurve.prototype.point = function point() {\\n  throw new Error('Not implemented');\\n};\\n\\nBaseCurve.prototype.validate = function validate() {\\n  throw new Error('Not implemented');\\n};\\n\\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\\n  assert(p.precomputed);\\n  var doubles = p._getDoubles();\\n\\n  var naf = getNAF(k, 1);\\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\\n  I /= 3;\\n\\n  // Translate into more windowed form\\n  var repr = [];\\n  for (var j = 0; j < naf.length; j += doubles.step) {\\n    var nafW = 0;\\n    for (var k = j + doubles.step - 1; k >= j; k--)\\n      nafW = (nafW << 1) + naf[k];\\n    repr.push(nafW);\\n  }\\n\\n  var a = this.jpoint(null, null, null);\\n  var b = this.jpoint(null, null, null);\\n  for (var i = I; i > 0; i--) {\\n    for (var j = 0; j < repr.length; j++) {\\n      var nafW = repr[j];\\n      if (nafW === i)\\n        b = b.mixedAdd(doubles.points[j]);\\n      else if (nafW === -i)\\n        b = b.mixedAdd(doubles.points[j].neg());\\n    }\\n    a = a.add(b);\\n  }\\n  return a.toP();\\n};\\n\\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\\n  var w = 4;\\n\\n  // Precompute window\\n  var nafPoints = p._getNAFPoints(w);\\n  w = nafPoints.wnd;\\n  var wnd = nafPoints.points;\\n\\n  // Get NAF form\\n  var naf = getNAF(k, w);\\n\\n  // Add `this`*(N+1) for every w-NAF index\\n  var acc = this.jpoint(null, null, null);\\n  for (var i = naf.length - 1; i >= 0; i--) {\\n    // Count zeroes\\n    for (var k = 0; i >= 0 && naf[i] === 0; i--)\\n      k++;\\n    if (i >= 0)\\n      k++;\\n    acc = acc.dblp(k);\\n\\n    if (i < 0)\\n      break;\\n    var z = naf[i];\\n    assert(z !== 0);\\n    if (p.type === 'affine') {\\n      // J +- P\\n      if (z > 0)\\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\\n      else\\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\\n    } else {\\n      // J +- J\\n      if (z > 0)\\n        acc = acc.add(wnd[(z - 1) >> 1]);\\n      else\\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\\n    }\\n  }\\n  return p.type === 'affine' ? acc.toP() : acc;\\n};\\n\\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\\n                                                       points,\\n                                                       coeffs,\\n                                                       len,\\n                                                       jacobianResult) {\\n  var wndWidth = this._wnafT1;\\n  var wnd = this._wnafT2;\\n  var naf = this._wnafT3;\\n\\n  // Fill all arrays\\n  var max = 0;\\n  for (var i = 0; i < len; i++) {\\n    var p = points[i];\\n    var nafPoints = p._getNAFPoints(defW);\\n    wndWidth[i] = nafPoints.wnd;\\n    wnd[i] = nafPoints.points;\\n  }\\n\\n  // Comb small window NAFs\\n  for (var i = len - 1; i >= 1; i -= 2) {\\n    var a = i - 1;\\n    var b = i;\\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\\n      naf[a] = getNAF(coeffs[a], wndWidth[a]);\\n      naf[b] = getNAF(coeffs[b], wndWidth[b]);\\n      max = Math.max(naf[a].length, max);\\n      max = Math.max(naf[b].length, max);\\n      continue;\\n    }\\n\\n    var comb = [\\n      points[a], /* 1 */\\n      null, /* 3 */\\n      null, /* 5 */\\n      points[b] /* 7 */\\n    ];\\n\\n    // Try to avoid Projective points, if possible\\n    if (points[a].y.cmp(points[b].y) === 0) {\\n      comb[1] = points[a].add(points[b]);\\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\\n      comb[2] = points[a].add(points[b].neg());\\n    } else {\\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\\n    }\\n\\n    var index = [\\n      -3, /* -1 -1 */\\n      -1, /* -1 0 */\\n      -5, /* -1 1 */\\n      -7, /* 0 -1 */\\n      0, /* 0 0 */\\n      7, /* 0 1 */\\n      5, /* 1 -1 */\\n      1, /* 1 0 */\\n      3  /* 1 1 */\\n    ];\\n\\n    var jsf = getJSF(coeffs[a], coeffs[b]);\\n    max = Math.max(jsf[0].length, max);\\n    naf[a] = new Array(max);\\n    naf[b] = new Array(max);\\n    for (var j = 0; j < max; j++) {\\n      var ja = jsf[0][j] | 0;\\n      var jb = jsf[1][j] | 0;\\n\\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\\n      naf[b][j] = 0;\\n      wnd[a] = comb;\\n    }\\n  }\\n\\n  var acc = this.jpoint(null, null, null);\\n  var tmp = this._wnafT4;\\n  for (var i = max; i >= 0; i--) {\\n    var k = 0;\\n\\n    while (i >= 0) {\\n      var zero = true;\\n      for (var j = 0; j < len; j++) {\\n        tmp[j] = naf[j][i] | 0;\\n        if (tmp[j] !== 0)\\n          zero = false;\\n      }\\n      if (!zero)\\n        break;\\n      k++;\\n      i--;\\n    }\\n    if (i >= 0)\\n      k++;\\n    acc = acc.dblp(k);\\n    if (i < 0)\\n      break;\\n\\n    for (var j = 0; j < len; j++) {\\n      var z = tmp[j];\\n      var p;\\n      if (z === 0)\\n        continue;\\n      else if (z > 0)\\n        p = wnd[j][(z - 1) >> 1];\\n      else if (z < 0)\\n        p = wnd[j][(-z - 1) >> 1].neg();\\n\\n      if (p.type === 'affine')\\n        acc = acc.mixedAdd(p);\\n      else\\n        acc = acc.add(p);\\n    }\\n  }\\n  // Zeroify references\\n  for (var i = 0; i < len; i++)\\n    wnd[i] = null;\\n\\n  if (jacobianResult)\\n    return acc;\\n  else\\n    return acc.toP();\\n};\\n\\nfunction BasePoint(curve, type) {\\n  this.curve = curve;\\n  this.type = type;\\n  this.precomputed = null;\\n}\\nBaseCurve.BasePoint = BasePoint;\\n\\nBasePoint.prototype.eq = function eq(/*other*/) {\\n  throw new Error('Not implemented');\\n};\\n\\nBasePoint.prototype.validate = function validate() {\\n  return this.curve.validate(this);\\n};\\n\\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\\n  bytes = utils.toArray(bytes, enc);\\n\\n  var len = this.p.byteLength();\\n\\n  // uncompressed, hybrid-odd, hybrid-even\\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\\n      bytes.length - 1 === 2 * len) {\\n    if (bytes[0] === 0x06)\\n      assert(bytes[bytes.length - 1] % 2 === 0);\\n    else if (bytes[0] === 0x07)\\n      assert(bytes[bytes.length - 1] % 2 === 1);\\n\\n    var res =  this.point(bytes.slice(1, 1 + len),\\n                          bytes.slice(1 + len, 1 + 2 * len));\\n\\n    return res;\\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\\n              bytes.length - 1 === len) {\\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\\n  }\\n  throw new Error('Unknown point format');\\n};\\n\\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\\n  return this.encode(enc, true);\\n};\\n\\nBasePoint.prototype._encode = function _encode(compact) {\\n  var len = this.curve.p.byteLength();\\n  var x = this.getX().toArray('be', len);\\n\\n  if (compact)\\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\\n\\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;\\n};\\n\\nBasePoint.prototype.encode = function encode(enc, compact) {\\n  return utils.encode(this._encode(compact), enc);\\n};\\n\\nBasePoint.prototype.precompute = function precompute(power) {\\n  if (this.precomputed)\\n    return this;\\n\\n  var precomputed = {\\n    doubles: null,\\n    naf: null,\\n    beta: null\\n  };\\n  precomputed.naf = this._getNAFPoints(8);\\n  precomputed.doubles = this._getDoubles(4, power);\\n  precomputed.beta = this._getBeta();\\n  this.precomputed = precomputed;\\n\\n  return this;\\n};\\n\\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\\n  if (!this.precomputed)\\n    return false;\\n\\n  var doubles = this.precomputed.doubles;\\n  if (!doubles)\\n    return false;\\n\\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\\n};\\n\\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\\n  if (this.precomputed && this.precomputed.doubles)\\n    return this.precomputed.doubles;\\n\\n  var doubles = [ this ];\\n  var acc = this;\\n  for (var i = 0; i < power; i += step) {\\n    for (var j = 0; j < step; j++)\\n      acc = acc.dbl();\\n    doubles.push(acc);\\n  }\\n  return {\\n    step: step,\\n    points: doubles\\n  };\\n};\\n\\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\\n  if (this.precomputed && this.precomputed.naf)\\n    return this.precomputed.naf;\\n\\n  var res = [ this ];\\n  var max = (1 << wnd) - 1;\\n  var dbl = max === 1 ? null : this.dbl();\\n  for (var i = 1; i < max; i++)\\n    res[i] = res[i - 1].add(dbl);\\n  return {\\n    wnd: wnd,\\n    points: res\\n  };\\n};\\n\\nBasePoint.prototype._getBeta = function _getBeta() {\\n  return null;\\n};\\n\\nBasePoint.prototype.dblp = function dblp(k) {\\n  var r = this;\\n  for (var i = 0; i < k; i++)\\n    r = r.dbl();\\n  return r;\\n};\\n\",\"'use strict';\\n\\nvar utils = exports;\\nvar BN = require('bn.js');\\nvar minAssert = require('minimalistic-assert');\\nvar minUtils = require('minimalistic-crypto-utils');\\n\\nutils.assert = minAssert;\\nutils.toArray = minUtils.toArray;\\nutils.zero2 = minUtils.zero2;\\nutils.toHex = minUtils.toHex;\\nutils.encode = minUtils.encode;\\n\\n// Represent num in a w-NAF form\\nfunction getNAF(num, w) {\\n  var naf = [];\\n  var ws = 1 << (w + 1);\\n  var k = num.clone();\\n  while (k.cmpn(1) >= 0) {\\n    var z;\\n    if (k.isOdd()) {\\n      var mod = k.andln(ws - 1);\\n      if (mod > (ws >> 1) - 1)\\n        z = (ws >> 1) - mod;\\n      else\\n        z = mod;\\n      k.isubn(z);\\n    } else {\\n      z = 0;\\n    }\\n    naf.push(z);\\n\\n    // Optimization, shift by word if possible\\n    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;\\n    for (var i = 1; i < shift; i++)\\n      naf.push(0);\\n    k.iushrn(shift);\\n  }\\n\\n  return naf;\\n}\\nutils.getNAF = getNAF;\\n\\n// Represent k1, k2 in a Joint Sparse Form\\nfunction getJSF(k1, k2) {\\n  var jsf = [\\n    [],\\n    []\\n  ];\\n\\n  k1 = k1.clone();\\n  k2 = k2.clone();\\n  var d1 = 0;\\n  var d2 = 0;\\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\\n\\n    // First phase\\n    var m14 = (k1.andln(3) + d1) & 3;\\n    var m24 = (k2.andln(3) + d2) & 3;\\n    if (m14 === 3)\\n      m14 = -1;\\n    if (m24 === 3)\\n      m24 = -1;\\n    var u1;\\n    if ((m14 & 1) === 0) {\\n      u1 = 0;\\n    } else {\\n      var m8 = (k1.andln(7) + d1) & 7;\\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\\n        u1 = -m14;\\n      else\\n        u1 = m14;\\n    }\\n    jsf[0].push(u1);\\n\\n    var u2;\\n    if ((m24 & 1) === 0) {\\n      u2 = 0;\\n    } else {\\n      var m8 = (k2.andln(7) + d2) & 7;\\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\\n        u2 = -m24;\\n      else\\n        u2 = m24;\\n    }\\n    jsf[1].push(u2);\\n\\n    // Second phase\\n    if (2 * d1 === u1 + 1)\\n      d1 = 1 - d1;\\n    if (2 * d2 === u2 + 1)\\n      d2 = 1 - d2;\\n    k1.iushrn(1);\\n    k2.iushrn(1);\\n  }\\n\\n  return jsf;\\n}\\nutils.getJSF = getJSF;\\n\\nfunction cachedProperty(obj, name, computer) {\\n  var key = '_' + name;\\n  obj.prototype[name] = function cachedProperty() {\\n    return this[key] !== undefined ? this[key] :\\n           this[key] = computer.call(this);\\n  };\\n}\\nutils.cachedProperty = cachedProperty;\\n\\nfunction parseBytes(bytes) {\\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\\n                                     bytes;\\n}\\nutils.parseBytes = parseBytes;\\n\\nfunction intFromLE(bytes) {\\n  return new BN(bytes, 'hex', 'le');\\n}\\nutils.intFromLE = intFromLE;\\n\\n\",\"'use strict';\\n\\nvar curves = exports;\\n\\nvar hash = require('hash.js');\\nvar elliptic = require('../elliptic');\\n\\nvar assert = elliptic.utils.assert;\\n\\nfunction PresetCurve(options) {\\n  if (options.type === 'short')\\n    this.curve = new elliptic.curve.short(options);\\n  else if (options.type === 'edwards')\\n    this.curve = new elliptic.curve.edwards(options);\\n  else\\n    this.curve = new elliptic.curve.mont(options);\\n  this.g = this.curve.g;\\n  this.n = this.curve.n;\\n  this.hash = options.hash;\\n\\n  assert(this.g.validate(), 'Invalid curve');\\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\\n}\\ncurves.PresetCurve = PresetCurve;\\n\\nfunction defineCurve(name, options) {\\n  Object.defineProperty(curves, name, {\\n    configurable: true,\\n    enumerable: true,\\n    get: function() {\\n      var curve = new PresetCurve(options);\\n      Object.defineProperty(curves, name, {\\n        configurable: true,\\n        enumerable: true,\\n        value: curve\\n      });\\n      return curve;\\n    }\\n  });\\n}\\n\\ndefineCurve('p192', {\\n  type: 'short',\\n  prime: 'p192',\\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\\n  hash: hash.sha256,\\n  gRed: false,\\n  g: [\\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'\\n  ]\\n});\\n\\ndefineCurve('p224', {\\n  type: 'short',\\n  prime: 'p224',\\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\\n  hash: hash.sha256,\\n  gRed: false,\\n  g: [\\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'\\n  ]\\n});\\n\\ndefineCurve('p256', {\\n  type: 'short',\\n  prime: null,\\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\\n  hash: hash.sha256,\\n  gRed: false,\\n  g: [\\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'\\n  ]\\n});\\n\\ndefineCurve('p384', {\\n  type: 'short',\\n  prime: null,\\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\\n  hash: hash.sha384,\\n  gRed: false,\\n  g: [\\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\\n    '5502f25d bf55296c 3a545e38 72760ab7',\\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'\\n  ]\\n});\\n\\ndefineCurve('p521', {\\n  type: 'short',\\n  prime: null,\\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\\n  hash: hash.sha512,\\n  gRed: false,\\n  g: [\\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650'\\n  ]\\n});\\n\\ndefineCurve('curve25519', {\\n  type: 'mont',\\n  prime: 'p25519',\\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\\n  a: '76d06',\\n  b: '1',\\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\\n  hash: hash.sha256,\\n  gRed: false,\\n  g: [\\n    '9'\\n  ]\\n});\\n\\ndefineCurve('ed25519', {\\n  type: 'edwards',\\n  prime: 'p25519',\\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\\n  a: '-1',\\n  c: '1',\\n  // -121665 * (121666^(-1)) (mod P)\\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\\n  hash: hash.sha256,\\n  gRed: false,\\n  g: [\\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\\n\\n    // 4/5\\n    '6666666666666666666666666666666666666666666666666666666666666658'\\n  ]\\n});\\n\\nvar pre;\\ntry {\\n  pre = require('./precomputed/secp256k1');\\n} catch (e) {\\n  pre = undefined;\\n}\\n\\ndefineCurve('secp256k1', {\\n  type: 'short',\\n  prime: 'k256',\\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\\n  a: '0',\\n  b: '7',\\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\\n  h: '1',\\n  hash: hash.sha256,\\n\\n  // Precomputed endomorphism\\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\\n  basis: [\\n    {\\n      a: '3086d221a7d46bcde86c90e49284eb15',\\n      b: '-e4437ed6010e88286f547fa90abfe4c3'\\n    },\\n    {\\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\\n      b: '3086d221a7d46bcde86c90e49284eb15'\\n    }\\n  ],\\n\\n  gRed: false,\\n  g: [\\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\\n    pre\\n  ]\\n});\\n\",\"'use strict';\\n\\nvar curve = require('../curve');\\nvar elliptic = require('../../elliptic');\\nvar BN = require('bn.js');\\nvar inherits = require('inherits');\\nvar Base = curve.base;\\n\\nvar assert = elliptic.utils.assert;\\n\\nfunction ShortCurve(conf) {\\n  Base.call(this, 'short', conf);\\n\\n  this.a = new BN(conf.a, 16).toRed(this.red);\\n  this.b = new BN(conf.b, 16).toRed(this.red);\\n  this.tinv = this.two.redInvm();\\n\\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\\n\\n  // If the curve is endomorphic, precalculate beta and lambda\\n  this.endo = this._getEndomorphism(conf);\\n  this._endoWnafT1 = new Array(4);\\n  this._endoWnafT2 = new Array(4);\\n}\\ninherits(ShortCurve, Base);\\nmodule.exports = ShortCurve;\\n\\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\\n  // No efficient endomorphism\\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\\n    return;\\n\\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\\n  var beta;\\n  var lambda;\\n  if (conf.beta) {\\n    beta = new BN(conf.beta, 16).toRed(this.red);\\n  } else {\\n    var betas = this._getEndoRoots(this.p);\\n    // Choose the smallest beta\\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\\n    beta = beta.toRed(this.red);\\n  }\\n  if (conf.lambda) {\\n    lambda = new BN(conf.lambda, 16);\\n  } else {\\n    // Choose the lambda that is matching selected beta\\n    var lambdas = this._getEndoRoots(this.n);\\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\\n      lambda = lambdas[0];\\n    } else {\\n      lambda = lambdas[1];\\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\\n    }\\n  }\\n\\n  // Get basis vectors, used for balanced length-two representation\\n  var basis;\\n  if (conf.basis) {\\n    basis = conf.basis.map(function(vec) {\\n      return {\\n        a: new BN(vec.a, 16),\\n        b: new BN(vec.b, 16)\\n      };\\n    });\\n  } else {\\n    basis = this._getEndoBasis(lambda);\\n  }\\n\\n  return {\\n    beta: beta,\\n    lambda: lambda,\\n    basis: basis\\n  };\\n};\\n\\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\\n  // Find roots of for x^2 + x + 1 in F\\n  // Root = (-1 +- Sqrt(-3)) / 2\\n  //\\n  var red = num === this.p ? this.red : BN.mont(num);\\n  var tinv = new BN(2).toRed(red).redInvm();\\n  var ntinv = tinv.redNeg();\\n\\n  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\\n\\n  var l1 = ntinv.redAdd(s).fromRed();\\n  var l2 = ntinv.redSub(s).fromRed();\\n  return [ l1, l2 ];\\n};\\n\\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\\n  // aprxSqrt >= sqrt(this.n)\\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\\n\\n  // 3.74\\n  // Run EGCD, until r(L + 1) < aprxSqrt\\n  var u = lambda;\\n  var v = this.n.clone();\\n  var x1 = new BN(1);\\n  var y1 = new BN(0);\\n  var x2 = new BN(0);\\n  var y2 = new BN(1);\\n\\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\\n  var a0;\\n  var b0;\\n  // First vector\\n  var a1;\\n  var b1;\\n  // Second vector\\n  var a2;\\n  var b2;\\n\\n  var prevR;\\n  var i = 0;\\n  var r;\\n  var x;\\n  while (u.cmpn(0) !== 0) {\\n    var q = v.div(u);\\n    r = v.sub(q.mul(u));\\n    x = x2.sub(q.mul(x1));\\n    var y = y2.sub(q.mul(y1));\\n\\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\\n      a0 = prevR.neg();\\n      b0 = x1;\\n      a1 = r.neg();\\n      b1 = x;\\n    } else if (a1 && ++i === 2) {\\n      break;\\n    }\\n    prevR = r;\\n\\n    v = u;\\n    u = r;\\n    x2 = x1;\\n    x1 = x;\\n    y2 = y1;\\n    y1 = y;\\n  }\\n  a2 = r.neg();\\n  b2 = x;\\n\\n  var len1 = a1.sqr().add(b1.sqr());\\n  var len2 = a2.sqr().add(b2.sqr());\\n  if (len2.cmp(len1) >= 0) {\\n    a2 = a0;\\n    b2 = b0;\\n  }\\n\\n  // Normalize signs\\n  if (a1.negative) {\\n    a1 = a1.neg();\\n    b1 = b1.neg();\\n  }\\n  if (a2.negative) {\\n    a2 = a2.neg();\\n    b2 = b2.neg();\\n  }\\n\\n  return [\\n    { a: a1, b: b1 },\\n    { a: a2, b: b2 }\\n  ];\\n};\\n\\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\\n  var basis = this.endo.basis;\\n  var v1 = basis[0];\\n  var v2 = basis[1];\\n\\n  var c1 = v2.b.mul(k).divRound(this.n);\\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\\n\\n  var p1 = c1.mul(v1.a);\\n  var p2 = c2.mul(v2.a);\\n  var q1 = c1.mul(v1.b);\\n  var q2 = c2.mul(v2.b);\\n\\n  // Calculate answer\\n  var k1 = k.sub(p1).sub(p2);\\n  var k2 = q1.add(q2).neg();\\n  return { k1: k1, k2: k2 };\\n};\\n\\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\\n  x = new BN(x, 16);\\n  if (!x.red)\\n    x = x.toRed(this.red);\\n\\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\\n  var y = y2.redSqrt();\\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\\n    throw new Error('invalid point');\\n\\n  // XXX Is there any way to tell if the number is odd without converting it\\n  // to non-red form?\\n  var isOdd = y.fromRed().isOdd();\\n  if (odd && !isOdd || !odd && isOdd)\\n    y = y.redNeg();\\n\\n  return this.point(x, y);\\n};\\n\\nShortCurve.prototype.validate = function validate(point) {\\n  if (point.inf)\\n    return true;\\n\\n  var x = point.x;\\n  var y = point.y;\\n\\n  var ax = this.a.redMul(x);\\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\\n};\\n\\nShortCurve.prototype._endoWnafMulAdd =\\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\\n  var npoints = this._endoWnafT1;\\n  var ncoeffs = this._endoWnafT2;\\n  for (var i = 0; i < points.length; i++) {\\n    var split = this._endoSplit(coeffs[i]);\\n    var p = points[i];\\n    var beta = p._getBeta();\\n\\n    if (split.k1.negative) {\\n      split.k1.ineg();\\n      p = p.neg(true);\\n    }\\n    if (split.k2.negative) {\\n      split.k2.ineg();\\n      beta = beta.neg(true);\\n    }\\n\\n    npoints[i * 2] = p;\\n    npoints[i * 2 + 1] = beta;\\n    ncoeffs[i * 2] = split.k1;\\n    ncoeffs[i * 2 + 1] = split.k2;\\n  }\\n  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\\n\\n  // Clean-up references to points and coefficients\\n  for (var j = 0; j < i * 2; j++) {\\n    npoints[j] = null;\\n    ncoeffs[j] = null;\\n  }\\n  return res;\\n};\\n\\nfunction Point(curve, x, y, isRed) {\\n  Base.BasePoint.call(this, curve, 'affine');\\n  if (x === null && y === null) {\\n    this.x = null;\\n    this.y = null;\\n    this.inf = true;\\n  } else {\\n    this.x = new BN(x, 16);\\n    this.y = new BN(y, 16);\\n    // Force redgomery representation when loading from JSON\\n    if (isRed) {\\n      this.x.forceRed(this.curve.red);\\n      this.y.forceRed(this.curve.red);\\n    }\\n    if (!this.x.red)\\n      this.x = this.x.toRed(this.curve.red);\\n    if (!this.y.red)\\n      this.y = this.y.toRed(this.curve.red);\\n    this.inf = false;\\n  }\\n}\\ninherits(Point, Base.BasePoint);\\n\\nShortCurve.prototype.point = function point(x, y, isRed) {\\n  return new Point(this, x, y, isRed);\\n};\\n\\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\\n  return Point.fromJSON(this, obj, red);\\n};\\n\\nPoint.prototype._getBeta = function _getBeta() {\\n  if (!this.curve.endo)\\n    return;\\n\\n  var pre = this.precomputed;\\n  if (pre && pre.beta)\\n    return pre.beta;\\n\\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\\n  if (pre) {\\n    var curve = this.curve;\\n    var endoMul = function(p) {\\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\\n    };\\n    pre.beta = beta;\\n    beta.precomputed = {\\n      beta: null,\\n      naf: pre.naf && {\\n        wnd: pre.naf.wnd,\\n        points: pre.naf.points.map(endoMul)\\n      },\\n      doubles: pre.doubles && {\\n        step: pre.doubles.step,\\n        points: pre.doubles.points.map(endoMul)\\n      }\\n    };\\n  }\\n  return beta;\\n};\\n\\nPoint.prototype.toJSON = function toJSON() {\\n  if (!this.precomputed)\\n    return [ this.x, this.y ];\\n\\n  return [ this.x, this.y, this.precomputed && {\\n    doubles: this.precomputed.doubles && {\\n      step: this.precomputed.doubles.step,\\n      points: this.precomputed.doubles.points.slice(1)\\n    },\\n    naf: this.precomputed.naf && {\\n      wnd: this.precomputed.naf.wnd,\\n      points: this.precomputed.naf.points.slice(1)\\n    }\\n  } ];\\n};\\n\\nPoint.fromJSON = function fromJSON(curve, obj, red) {\\n  if (typeof obj === 'string')\\n    obj = JSON.parse(obj);\\n  var res = curve.point(obj[0], obj[1], red);\\n  if (!obj[2])\\n    return res;\\n\\n  function obj2point(obj) {\\n    return curve.point(obj[0], obj[1], red);\\n  }\\n\\n  var pre = obj[2];\\n  res.precomputed = {\\n    beta: null,\\n    doubles: pre.doubles && {\\n      step: pre.doubles.step,\\n      points: [ res ].concat(pre.doubles.points.map(obj2point))\\n    },\\n    naf: pre.naf && {\\n      wnd: pre.naf.wnd,\\n      points: [ res ].concat(pre.naf.points.map(obj2point))\\n    }\\n  };\\n  return res;\\n};\\n\\nPoint.prototype.inspect = function inspect() {\\n  if (this.isInfinity())\\n    return '<EC Point Infinity>';\\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\\n};\\n\\nPoint.prototype.isInfinity = function isInfinity() {\\n  return this.inf;\\n};\\n\\nPoint.prototype.add = function add(p) {\\n  // O + P = P\\n  if (this.inf)\\n    return p;\\n\\n  // P + O = P\\n  if (p.inf)\\n    return this;\\n\\n  // P + P = 2P\\n  if (this.eq(p))\\n    return this.dbl();\\n\\n  // P + (-P) = O\\n  if (this.neg().eq(p))\\n    return this.curve.point(null, null);\\n\\n  // P + Q = O\\n  if (this.x.cmp(p.x) === 0)\\n    return this.curve.point(null, null);\\n\\n  var c = this.y.redSub(p.y);\\n  if (c.cmpn(0) !== 0)\\n    c = c.redMul(this.x.redSub(p.x).redInvm());\\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\\n  return this.curve.point(nx, ny);\\n};\\n\\nPoint.prototype.dbl = function dbl() {\\n  if (this.inf)\\n    return this;\\n\\n  // 2P = O\\n  var ys1 = this.y.redAdd(this.y);\\n  if (ys1.cmpn(0) === 0)\\n    return this.curve.point(null, null);\\n\\n  var a = this.curve.a;\\n\\n  var x2 = this.x.redSqr();\\n  var dyinv = ys1.redInvm();\\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\\n\\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\\n  return this.curve.point(nx, ny);\\n};\\n\\nPoint.prototype.getX = function getX() {\\n  return this.x.fromRed();\\n};\\n\\nPoint.prototype.getY = function getY() {\\n  return this.y.fromRed();\\n};\\n\\nPoint.prototype.mul = function mul(k) {\\n  k = new BN(k, 16);\\n\\n  if (this._hasDoubles(k))\\n    return this.curve._fixedNafMul(this, k);\\n  else if (this.curve.endo)\\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\\n  else\\n    return this.curve._wnafMul(this, k);\\n};\\n\\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\\n  var points = [ this, p2 ];\\n  var coeffs = [ k1, k2 ];\\n  if (this.curve.endo)\\n    return this.curve._endoWnafMulAdd(points, coeffs);\\n  else\\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\\n};\\n\\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\\n  var points = [ this, p2 ];\\n  var coeffs = [ k1, k2 ];\\n  if (this.curve.endo)\\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\\n  else\\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\\n};\\n\\nPoint.prototype.eq = function eq(p) {\\n  return this === p ||\\n         this.inf === p.inf &&\\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\\n};\\n\\nPoint.prototype.neg = function neg(_precompute) {\\n  if (this.inf)\\n    return this;\\n\\n  var res = this.curve.point(this.x, this.y.redNeg());\\n  if (_precompute && this.precomputed) {\\n    var pre = this.precomputed;\\n    var negate = function(p) {\\n      return p.neg();\\n    };\\n    res.precomputed = {\\n      naf: pre.naf && {\\n        wnd: pre.naf.wnd,\\n        points: pre.naf.points.map(negate)\\n      },\\n      doubles: pre.doubles && {\\n        step: pre.doubles.step,\\n        points: pre.doubles.points.map(negate)\\n      }\\n    };\\n  }\\n  return res;\\n};\\n\\nPoint.prototype.toJ = function toJ() {\\n  if (this.inf)\\n    return this.curve.jpoint(null, null, null);\\n\\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\\n  return res;\\n};\\n\\nfunction JPoint(curve, x, y, z) {\\n  Base.BasePoint.call(this, curve, 'jacobian');\\n  if (x === null && y === null && z === null) {\\n    this.x = this.curve.one;\\n    this.y = this.curve.one;\\n    this.z = new BN(0);\\n  } else {\\n    this.x = new BN(x, 16);\\n    this.y = new BN(y, 16);\\n    this.z = new BN(z, 16);\\n  }\\n  if (!this.x.red)\\n    this.x = this.x.toRed(this.curve.red);\\n  if (!this.y.red)\\n    this.y = this.y.toRed(this.curve.red);\\n  if (!this.z.red)\\n    this.z = this.z.toRed(this.curve.red);\\n\\n  this.zOne = this.z === this.curve.one;\\n}\\ninherits(JPoint, Base.BasePoint);\\n\\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\\n  return new JPoint(this, x, y, z);\\n};\\n\\nJPoint.prototype.toP = function toP() {\\n  if (this.isInfinity())\\n    return this.curve.point(null, null);\\n\\n  var zinv = this.z.redInvm();\\n  var zinv2 = zinv.redSqr();\\n  var ax = this.x.redMul(zinv2);\\n  var ay = this.y.redMul(zinv2).redMul(zinv);\\n\\n  return this.curve.point(ax, ay);\\n};\\n\\nJPoint.prototype.neg = function neg() {\\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\\n};\\n\\nJPoint.prototype.add = function add(p) {\\n  // O + P = P\\n  if (this.isInfinity())\\n    return p;\\n\\n  // P + O = P\\n  if (p.isInfinity())\\n    return this;\\n\\n  // 12M + 4S + 7A\\n  var pz2 = p.z.redSqr();\\n  var z2 = this.z.redSqr();\\n  var u1 = this.x.redMul(pz2);\\n  var u2 = p.x.redMul(z2);\\n  var s1 = this.y.redMul(pz2.redMul(p.z));\\n  var s2 = p.y.redMul(z2.redMul(this.z));\\n\\n  var h = u1.redSub(u2);\\n  var r = s1.redSub(s2);\\n  if (h.cmpn(0) === 0) {\\n    if (r.cmpn(0) !== 0)\\n      return this.curve.jpoint(null, null, null);\\n    else\\n      return this.dbl();\\n  }\\n\\n  var h2 = h.redSqr();\\n  var h3 = h2.redMul(h);\\n  var v = u1.redMul(h2);\\n\\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\\n  var nz = this.z.redMul(p.z).redMul(h);\\n\\n  return this.curve.jpoint(nx, ny, nz);\\n};\\n\\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\\n  // O + P = P\\n  if (this.isInfinity())\\n    return p.toJ();\\n\\n  // P + O = P\\n  if (p.isInfinity())\\n    return this;\\n\\n  // 8M + 3S + 7A\\n  var z2 = this.z.redSqr();\\n  var u1 = this.x;\\n  var u2 = p.x.redMul(z2);\\n  var s1 = this.y;\\n  var s2 = p.y.redMul(z2).redMul(this.z);\\n\\n  var h = u1.redSub(u2);\\n  var r = s1.redSub(s2);\\n  if (h.cmpn(0) === 0) {\\n    if (r.cmpn(0) !== 0)\\n      return this.curve.jpoint(null, null, null);\\n    else\\n      return this.dbl();\\n  }\\n\\n  var h2 = h.redSqr();\\n  var h3 = h2.redMul(h);\\n  var v = u1.redMul(h2);\\n\\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\\n  var nz = this.z.redMul(h);\\n\\n  return this.curve.jpoint(nx, ny, nz);\\n};\\n\\nJPoint.prototype.dblp = function dblp(pow) {\\n  if (pow === 0)\\n    return this;\\n  if (this.isInfinity())\\n    return this;\\n  if (!pow)\\n    return this.dbl();\\n\\n  if (this.curve.zeroA || this.curve.threeA) {\\n    var r = this;\\n    for (var i = 0; i < pow; i++)\\n      r = r.dbl();\\n    return r;\\n  }\\n\\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\\n  // N = 1 => 6M + 6S + 9A\\n  var a = this.curve.a;\\n  var tinv = this.curve.tinv;\\n\\n  var jx = this.x;\\n  var jy = this.y;\\n  var jz = this.z;\\n  var jz4 = jz.redSqr().redSqr();\\n\\n  // Reuse results\\n  var jyd = jy.redAdd(jy);\\n  for (var i = 0; i < pow; i++) {\\n    var jx2 = jx.redSqr();\\n    var jyd2 = jyd.redSqr();\\n    var jyd4 = jyd2.redSqr();\\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\\n\\n    var t1 = jx.redMul(jyd2);\\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\\n    var t2 = t1.redISub(nx);\\n    var dny = c.redMul(t2);\\n    dny = dny.redIAdd(dny).redISub(jyd4);\\n    var nz = jyd.redMul(jz);\\n    if (i + 1 < pow)\\n      jz4 = jz4.redMul(jyd4);\\n\\n    jx = nx;\\n    jz = nz;\\n    jyd = dny;\\n  }\\n\\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\\n};\\n\\nJPoint.prototype.dbl = function dbl() {\\n  if (this.isInfinity())\\n    return this;\\n\\n  if (this.curve.zeroA)\\n    return this._zeroDbl();\\n  else if (this.curve.threeA)\\n    return this._threeDbl();\\n  else\\n    return this._dbl();\\n};\\n\\nJPoint.prototype._zeroDbl = function _zeroDbl() {\\n  var nx;\\n  var ny;\\n  var nz;\\n  // Z = 1\\n  if (this.zOne) {\\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\\n    //     #doubling-mdbl-2007-bl\\n    // 1M + 5S + 14A\\n\\n    // XX = X1^2\\n    var xx = this.x.redSqr();\\n    // YY = Y1^2\\n    var yy = this.y.redSqr();\\n    // YYYY = YY^2\\n    var yyyy = yy.redSqr();\\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\\n    s = s.redIAdd(s);\\n    // M = 3 * XX + a; a = 0\\n    var m = xx.redAdd(xx).redIAdd(xx);\\n    // T = M ^ 2 - 2*S\\n    var t = m.redSqr().redISub(s).redISub(s);\\n\\n    // 8 * YYYY\\n    var yyyy8 = yyyy.redIAdd(yyyy);\\n    yyyy8 = yyyy8.redIAdd(yyyy8);\\n    yyyy8 = yyyy8.redIAdd(yyyy8);\\n\\n    // X3 = T\\n    nx = t;\\n    // Y3 = M * (S - T) - 8 * YYYY\\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\\n    // Z3 = 2*Y1\\n    nz = this.y.redAdd(this.y);\\n  } else {\\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\\n    //     #doubling-dbl-2009-l\\n    // 2M + 5S + 13A\\n\\n    // A = X1^2\\n    var a = this.x.redSqr();\\n    // B = Y1^2\\n    var b = this.y.redSqr();\\n    // C = B^2\\n    var c = b.redSqr();\\n    // D = 2 * ((X1 + B)^2 - A - C)\\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\\n    d = d.redIAdd(d);\\n    // E = 3 * A\\n    var e = a.redAdd(a).redIAdd(a);\\n    // F = E^2\\n    var f = e.redSqr();\\n\\n    // 8 * C\\n    var c8 = c.redIAdd(c);\\n    c8 = c8.redIAdd(c8);\\n    c8 = c8.redIAdd(c8);\\n\\n    // X3 = F - 2 * D\\n    nx = f.redISub(d).redISub(d);\\n    // Y3 = E * (D - X3) - 8 * C\\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\\n    // Z3 = 2 * Y1 * Z1\\n    nz = this.y.redMul(this.z);\\n    nz = nz.redIAdd(nz);\\n  }\\n\\n  return this.curve.jpoint(nx, ny, nz);\\n};\\n\\nJPoint.prototype._threeDbl = function _threeDbl() {\\n  var nx;\\n  var ny;\\n  var nz;\\n  // Z = 1\\n  if (this.zOne) {\\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\\n    //     #doubling-mdbl-2007-bl\\n    // 1M + 5S + 15A\\n\\n    // XX = X1^2\\n    var xx = this.x.redSqr();\\n    // YY = Y1^2\\n    var yy = this.y.redSqr();\\n    // YYYY = YY^2\\n    var yyyy = yy.redSqr();\\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\\n    s = s.redIAdd(s);\\n    // M = 3 * XX + a\\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\\n    // T = M^2 - 2 * S\\n    var t = m.redSqr().redISub(s).redISub(s);\\n    // X3 = T\\n    nx = t;\\n    // Y3 = M * (S - T) - 8 * YYYY\\n    var yyyy8 = yyyy.redIAdd(yyyy);\\n    yyyy8 = yyyy8.redIAdd(yyyy8);\\n    yyyy8 = yyyy8.redIAdd(yyyy8);\\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\\n    // Z3 = 2 * Y1\\n    nz = this.y.redAdd(this.y);\\n  } else {\\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\\n    // 3M + 5S\\n\\n    // delta = Z1^2\\n    var delta = this.z.redSqr();\\n    // gamma = Y1^2\\n    var gamma = this.y.redSqr();\\n    // beta = X1 * gamma\\n    var beta = this.x.redMul(gamma);\\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\\n    // X3 = alpha^2 - 8 * beta\\n    var beta4 = beta.redIAdd(beta);\\n    beta4 = beta4.redIAdd(beta4);\\n    var beta8 = beta4.redAdd(beta4);\\n    nx = alpha.redSqr().redISub(beta8);\\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\\n    var ggamma8 = gamma.redSqr();\\n    ggamma8 = ggamma8.redIAdd(ggamma8);\\n    ggamma8 = ggamma8.redIAdd(ggamma8);\\n    ggamma8 = ggamma8.redIAdd(ggamma8);\\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\\n  }\\n\\n  return this.curve.jpoint(nx, ny, nz);\\n};\\n\\nJPoint.prototype._dbl = function _dbl() {\\n  var a = this.curve.a;\\n\\n  // 4M + 6S + 10A\\n  var jx = this.x;\\n  var jy = this.y;\\n  var jz = this.z;\\n  var jz4 = jz.redSqr().redSqr();\\n\\n  var jx2 = jx.redSqr();\\n  var jy2 = jy.redSqr();\\n\\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\\n\\n  var jxd4 = jx.redAdd(jx);\\n  jxd4 = jxd4.redIAdd(jxd4);\\n  var t1 = jxd4.redMul(jy2);\\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\\n  var t2 = t1.redISub(nx);\\n\\n  var jyd8 = jy2.redSqr();\\n  jyd8 = jyd8.redIAdd(jyd8);\\n  jyd8 = jyd8.redIAdd(jyd8);\\n  jyd8 = jyd8.redIAdd(jyd8);\\n  var ny = c.redMul(t2).redISub(jyd8);\\n  var nz = jy.redAdd(jy).redMul(jz);\\n\\n  return this.curve.jpoint(nx, ny, nz);\\n};\\n\\nJPoint.prototype.trpl = function trpl() {\\n  if (!this.curve.zeroA)\\n    return this.dbl().add(this);\\n\\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\\n  // 5M + 10S + ...\\n\\n  // XX = X1^2\\n  var xx = this.x.redSqr();\\n  // YY = Y1^2\\n  var yy = this.y.redSqr();\\n  // ZZ = Z1^2\\n  var zz = this.z.redSqr();\\n  // YYYY = YY^2\\n  var yyyy = yy.redSqr();\\n  // M = 3 * XX + a * ZZ2; a = 0\\n  var m = xx.redAdd(xx).redIAdd(xx);\\n  // MM = M^2\\n  var mm = m.redSqr();\\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\\n  e = e.redIAdd(e);\\n  e = e.redAdd(e).redIAdd(e);\\n  e = e.redISub(mm);\\n  // EE = E^2\\n  var ee = e.redSqr();\\n  // T = 16*YYYY\\n  var t = yyyy.redIAdd(yyyy);\\n  t = t.redIAdd(t);\\n  t = t.redIAdd(t);\\n  t = t.redIAdd(t);\\n  // U = (M + E)^2 - MM - EE - T\\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\\n  var yyu4 = yy.redMul(u);\\n  yyu4 = yyu4.redIAdd(yyu4);\\n  yyu4 = yyu4.redIAdd(yyu4);\\n  var nx = this.x.redMul(ee).redISub(yyu4);\\n  nx = nx.redIAdd(nx);\\n  nx = nx.redIAdd(nx);\\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\\n  ny = ny.redIAdd(ny);\\n  ny = ny.redIAdd(ny);\\n  ny = ny.redIAdd(ny);\\n  // Z3 = (Z1 + E)^2 - ZZ - EE\\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\\n\\n  return this.curve.jpoint(nx, ny, nz);\\n};\\n\\nJPoint.prototype.mul = function mul(k, kbase) {\\n  k = new BN(k, kbase);\\n\\n  return this.curve._wnafMul(this, k);\\n};\\n\\nJPoint.prototype.eq = function eq(p) {\\n  if (p.type === 'affine')\\n    return this.eq(p.toJ());\\n\\n  if (this === p)\\n    return true;\\n\\n  // x1 * z2^2 == x2 * z1^2\\n  var z2 = this.z.redSqr();\\n  var pz2 = p.z.redSqr();\\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\\n    return false;\\n\\n  // y1 * z2^3 == y2 * z1^3\\n  var z3 = z2.redMul(this.z);\\n  var pz3 = pz2.redMul(p.z);\\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\\n};\\n\\nJPoint.prototype.eqXToP = function eqXToP(x) {\\n  var zs = this.z.redSqr();\\n  var rx = x.toRed(this.curve.red).redMul(zs);\\n  if (this.x.cmp(rx) === 0)\\n    return true;\\n\\n  var xc = x.clone();\\n  var t = this.curve.redN.redMul(zs);\\n  for (;;) {\\n    xc.iadd(this.curve.n);\\n    if (xc.cmp(this.curve.p) >= 0)\\n      return false;\\n\\n    rx.redIAdd(t);\\n    if (this.x.cmp(rx) === 0)\\n      return true;\\n  }\\n};\\n\\nJPoint.prototype.inspect = function inspect() {\\n  if (this.isInfinity())\\n    return '<EC JPoint Infinity>';\\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\\n      ' y: ' + this.y.toString(16, 2) +\\n      ' z: ' + this.z.toString(16, 2) + '>';\\n};\\n\\nJPoint.prototype.isInfinity = function isInfinity() {\\n  // XXX This code assumes that zero is always zero in red\\n  return this.z.cmpn(0) === 0;\\n};\\n\",\"'use strict';\\n\\nvar elliptic = exports;\\n\\nelliptic.version = require('../package.json').version;\\nelliptic.utils = require('./elliptic/utils');\\nelliptic.rand = require('brorand');\\nelliptic.curve = require('./elliptic/curve');\\nelliptic.curves = require('./elliptic/curves');\\n\\n// Protocols\\nelliptic.ec = require('./elliptic/ec');\\nelliptic.eddsa = require('./elliptic/eddsa');\\n\",\"'use strict';\\n\\nvar elliptic = require('../../elliptic');\\nvar utils = elliptic.utils;\\nvar assert = utils.assert;\\nvar parseBytes = utils.parseBytes;\\nvar cachedProperty = utils.cachedProperty;\\n\\n/**\\n* @param {EDDSA} eddsa - instance\\n* @param {Object} params - public/private key parameters\\n*\\n* @param {Array<Byte>} [params.secret] - secret seed bytes\\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\\n*\\n*/\\nfunction KeyPair(eddsa, params) {\\n  this.eddsa = eddsa;\\n  this._secret = parseBytes(params.secret);\\n  if (eddsa.isPoint(params.pub))\\n    this._pub = params.pub;\\n  else\\n    this._pubBytes = parseBytes(params.pub);\\n}\\n\\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\\n  if (pub instanceof KeyPair)\\n    return pub;\\n  return new KeyPair(eddsa, { pub: pub });\\n};\\n\\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\\n  if (secret instanceof KeyPair)\\n    return secret;\\n  return new KeyPair(eddsa, { secret: secret });\\n};\\n\\nKeyPair.prototype.secret = function secret() {\\n  return this._secret;\\n};\\n\\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\\n  return this.eddsa.encodePoint(this.pub());\\n});\\n\\ncachedProperty(KeyPair, 'pub', function pub() {\\n  if (this._pubBytes)\\n    return this.eddsa.decodePoint(this._pubBytes);\\n  return this.eddsa.g.mul(this.priv());\\n});\\n\\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\\n  var eddsa = this.eddsa;\\n  var hash = this.hash();\\n  var lastIx = eddsa.encodingLength - 1;\\n\\n  var a = hash.slice(0, eddsa.encodingLength);\\n  a[0] &= 248;\\n  a[lastIx] &= 127;\\n  a[lastIx] |= 64;\\n\\n  return a;\\n});\\n\\ncachedProperty(KeyPair, 'priv', function priv() {\\n  return this.eddsa.decodeInt(this.privBytes());\\n});\\n\\ncachedProperty(KeyPair, 'hash', function hash() {\\n  return this.eddsa.hash().update(this.secret()).digest();\\n});\\n\\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\\n  return this.hash().slice(this.eddsa.encodingLength);\\n});\\n\\nKeyPair.prototype.sign = function sign(message) {\\n  assert(this._secret, 'KeyPair can only verify');\\n  return this.eddsa.sign(message, this);\\n};\\n\\nKeyPair.prototype.verify = function verify(message, sig) {\\n  return this.eddsa.verify(message, sig, this);\\n};\\n\\nKeyPair.prototype.getSecret = function getSecret(enc) {\\n  assert(this._secret, 'KeyPair is public only');\\n  return utils.encode(this.secret(), enc);\\n};\\n\\nKeyPair.prototype.getPublic = function getPublic(enc) {\\n  return utils.encode(this.pubBytes(), enc);\\n};\\n\\nmodule.exports = KeyPair;\\n\",\"'use strict';\\n\\nvar curve = require('../curve');\\nvar elliptic = require('../../elliptic');\\nvar BN = require('bn.js');\\nvar inherits = require('inherits');\\nvar Base = curve.base;\\n\\nvar assert = elliptic.utils.assert;\\n\\nfunction EdwardsCurve(conf) {\\n  // NOTE: Important as we are creating point in Base.call()\\n  this.twisted = (conf.a | 0) !== 1;\\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\\n  this.extended = this.mOneA;\\n\\n  Base.call(this, 'edwards', conf);\\n\\n  this.a = new BN(conf.a, 16).umod(this.red.m);\\n  this.a = this.a.toRed(this.red);\\n  this.c = new BN(conf.c, 16).toRed(this.red);\\n  this.c2 = this.c.redSqr();\\n  this.d = new BN(conf.d, 16).toRed(this.red);\\n  this.dd = this.d.redAdd(this.d);\\n\\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\\n  this.oneC = (conf.c | 0) === 1;\\n}\\ninherits(EdwardsCurve, Base);\\nmodule.exports = EdwardsCurve;\\n\\nEdwardsCurve.prototype._mulA = function _mulA(num) {\\n  if (this.mOneA)\\n    return num.redNeg();\\n  else\\n    return this.a.redMul(num);\\n};\\n\\nEdwardsCurve.prototype._mulC = function _mulC(num) {\\n  if (this.oneC)\\n    return num;\\n  else\\n    return this.c.redMul(num);\\n};\\n\\n// Just for compatibility with Short curve\\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\\n  return this.point(x, y, z, t);\\n};\\n\\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\\n  x = new BN(x, 16);\\n  if (!x.red)\\n    x = x.toRed(this.red);\\n\\n  var x2 = x.redSqr();\\n  var rhs = this.c2.redSub(this.a.redMul(x2));\\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\\n\\n  var y2 = rhs.redMul(lhs.redInvm());\\n  var y = y2.redSqrt();\\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\\n    throw new Error('invalid point');\\n\\n  var isOdd = y.fromRed().isOdd();\\n  if (odd && !isOdd || !odd && isOdd)\\n    y = y.redNeg();\\n\\n  return this.point(x, y);\\n};\\n\\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\\n  y = new BN(y, 16);\\n  if (!y.red)\\n    y = y.toRed(this.red);\\n\\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\\n  var y2 = y.redSqr();\\n  var lhs = y2.redSub(this.c2);\\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\\n  var x2 = lhs.redMul(rhs.redInvm());\\n\\n  if (x2.cmp(this.zero) === 0) {\\n    if (odd)\\n      throw new Error('invalid point');\\n    else\\n      return this.point(this.zero, y);\\n  }\\n\\n  var x = x2.redSqrt();\\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\\n    throw new Error('invalid point');\\n\\n  if (x.fromRed().isOdd() !== odd)\\n    x = x.redNeg();\\n\\n  return this.point(x, y);\\n};\\n\\nEdwardsCurve.prototype.validate = function validate(point) {\\n  if (point.isInfinity())\\n    return true;\\n\\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\\n  point.normalize();\\n\\n  var x2 = point.x.redSqr();\\n  var y2 = point.y.redSqr();\\n  var lhs = x2.redMul(this.a).redAdd(y2);\\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\\n\\n  return lhs.cmp(rhs) === 0;\\n};\\n\\nfunction Point(curve, x, y, z, t) {\\n  Base.BasePoint.call(this, curve, 'projective');\\n  if (x === null && y === null && z === null) {\\n    this.x = this.curve.zero;\\n    this.y = this.curve.one;\\n    this.z = this.curve.one;\\n    this.t = this.curve.zero;\\n    this.zOne = true;\\n  } else {\\n    this.x = new BN(x, 16);\\n    this.y = new BN(y, 16);\\n    this.z = z ? new BN(z, 16) : this.curve.one;\\n    this.t = t && new BN(t, 16);\\n    if (!this.x.red)\\n      this.x = this.x.toRed(this.curve.red);\\n    if (!this.y.red)\\n      this.y = this.y.toRed(this.curve.red);\\n    if (!this.z.red)\\n      this.z = this.z.toRed(this.curve.red);\\n    if (this.t && !this.t.red)\\n      this.t = this.t.toRed(this.curve.red);\\n    this.zOne = this.z === this.curve.one;\\n\\n    // Use extended coordinates\\n    if (this.curve.extended && !this.t) {\\n      this.t = this.x.redMul(this.y);\\n      if (!this.zOne)\\n        this.t = this.t.redMul(this.z.redInvm());\\n    }\\n  }\\n}\\ninherits(Point, Base.BasePoint);\\n\\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\\n  return Point.fromJSON(this, obj);\\n};\\n\\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\\n  return new Point(this, x, y, z, t);\\n};\\n\\nPoint.fromJSON = function fromJSON(curve, obj) {\\n  return new Point(curve, obj[0], obj[1], obj[2]);\\n};\\n\\nPoint.prototype.inspect = function inspect() {\\n  if (this.isInfinity())\\n    return '<EC Point Infinity>';\\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\\n      ' y: ' + this.y.fromRed().toString(16, 2) +\\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\\n};\\n\\nPoint.prototype.isInfinity = function isInfinity() {\\n  // XXX This code assumes that zero is always zero in red\\n  return this.x.cmpn(0) === 0 &&\\n    (this.y.cmp(this.z) === 0 ||\\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\\n};\\n\\nPoint.prototype._extDbl = function _extDbl() {\\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\\n  //     #doubling-dbl-2008-hwcd\\n  // 4M + 4S\\n\\n  // A = X1^2\\n  var a = this.x.redSqr();\\n  // B = Y1^2\\n  var b = this.y.redSqr();\\n  // C = 2 * Z1^2\\n  var c = this.z.redSqr();\\n  c = c.redIAdd(c);\\n  // D = a * A\\n  var d = this.curve._mulA(a);\\n  // E = (X1 + Y1)^2 - A - B\\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\\n  // G = D + B\\n  var g = d.redAdd(b);\\n  // F = G - C\\n  var f = g.redSub(c);\\n  // H = D - B\\n  var h = d.redSub(b);\\n  // X3 = E * F\\n  var nx = e.redMul(f);\\n  // Y3 = G * H\\n  var ny = g.redMul(h);\\n  // T3 = E * H\\n  var nt = e.redMul(h);\\n  // Z3 = F * G\\n  var nz = f.redMul(g);\\n  return this.curve.point(nx, ny, nz, nt);\\n};\\n\\nPoint.prototype._projDbl = function _projDbl() {\\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\\n  //     #doubling-dbl-2008-bbjlp\\n  //     #doubling-dbl-2007-bl\\n  // and others\\n  // Generally 3M + 4S or 2M + 4S\\n\\n  // B = (X1 + Y1)^2\\n  var b = this.x.redAdd(this.y).redSqr();\\n  // C = X1^2\\n  var c = this.x.redSqr();\\n  // D = Y1^2\\n  var d = this.y.redSqr();\\n\\n  var nx;\\n  var ny;\\n  var nz;\\n  if (this.curve.twisted) {\\n    // E = a * C\\n    var e = this.curve._mulA(c);\\n    // F = E + D\\n    var f = e.redAdd(d);\\n    if (this.zOne) {\\n      // X3 = (B - C - D) * (F - 2)\\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\\n      // Y3 = F * (E - D)\\n      ny = f.redMul(e.redSub(d));\\n      // Z3 = F^2 - 2 * F\\n      nz = f.redSqr().redSub(f).redSub(f);\\n    } else {\\n      // H = Z1^2\\n      var h = this.z.redSqr();\\n      // J = F - 2 * H\\n      var j = f.redSub(h).redISub(h);\\n      // X3 = (B-C-D)*J\\n      nx = b.redSub(c).redISub(d).redMul(j);\\n      // Y3 = F * (E - D)\\n      ny = f.redMul(e.redSub(d));\\n      // Z3 = F * J\\n      nz = f.redMul(j);\\n    }\\n  } else {\\n    // E = C + D\\n    var e = c.redAdd(d);\\n    // H = (c * Z1)^2\\n    var h = this.curve._mulC(this.z).redSqr();\\n    // J = E - 2 * H\\n    var j = e.redSub(h).redSub(h);\\n    // X3 = c * (B - E) * J\\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\\n    // Y3 = c * E * (C - D)\\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\\n    // Z3 = E * J\\n    nz = e.redMul(j);\\n  }\\n  return this.curve.point(nx, ny, nz);\\n};\\n\\nPoint.prototype.dbl = function dbl() {\\n  if (this.isInfinity())\\n    return this;\\n\\n  // Double in extended coordinates\\n  if (this.curve.extended)\\n    return this._extDbl();\\n  else\\n    return this._projDbl();\\n};\\n\\nPoint.prototype._extAdd = function _extAdd(p) {\\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\\n  //     #addition-add-2008-hwcd-3\\n  // 8M\\n\\n  // A = (Y1 - X1) * (Y2 - X2)\\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\\n  // B = (Y1 + X1) * (Y2 + X2)\\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\\n  // C = T1 * k * T2\\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\\n  // D = Z1 * 2 * Z2\\n  var d = this.z.redMul(p.z.redAdd(p.z));\\n  // E = B - A\\n  var e = b.redSub(a);\\n  // F = D - C\\n  var f = d.redSub(c);\\n  // G = D + C\\n  var g = d.redAdd(c);\\n  // H = B + A\\n  var h = b.redAdd(a);\\n  // X3 = E * F\\n  var nx = e.redMul(f);\\n  // Y3 = G * H\\n  var ny = g.redMul(h);\\n  // T3 = E * H\\n  var nt = e.redMul(h);\\n  // Z3 = F * G\\n  var nz = f.redMul(g);\\n  return this.curve.point(nx, ny, nz, nt);\\n};\\n\\nPoint.prototype._projAdd = function _projAdd(p) {\\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\\n  //     #addition-add-2008-bbjlp\\n  //     #addition-add-2007-bl\\n  // 10M + 1S\\n\\n  // A = Z1 * Z2\\n  var a = this.z.redMul(p.z);\\n  // B = A^2\\n  var b = a.redSqr();\\n  // C = X1 * X2\\n  var c = this.x.redMul(p.x);\\n  // D = Y1 * Y2\\n  var d = this.y.redMul(p.y);\\n  // E = d * C * D\\n  var e = this.curve.d.redMul(c).redMul(d);\\n  // F = B - E\\n  var f = b.redSub(e);\\n  // G = B + E\\n  var g = b.redAdd(e);\\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\\n  var nx = a.redMul(f).redMul(tmp);\\n  var ny;\\n  var nz;\\n  if (this.curve.twisted) {\\n    // Y3 = A * G * (D - a * C)\\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\\n    // Z3 = F * G\\n    nz = f.redMul(g);\\n  } else {\\n    // Y3 = A * G * (D - C)\\n    ny = a.redMul(g).redMul(d.redSub(c));\\n    // Z3 = c * F * G\\n    nz = this.curve._mulC(f).redMul(g);\\n  }\\n  return this.curve.point(nx, ny, nz);\\n};\\n\\nPoint.prototype.add = function add(p) {\\n  if (this.isInfinity())\\n    return p;\\n  if (p.isInfinity())\\n    return this;\\n\\n  if (this.curve.extended)\\n    return this._extAdd(p);\\n  else\\n    return this._projAdd(p);\\n};\\n\\nPoint.prototype.mul = function mul(k) {\\n  if (this._hasDoubles(k))\\n    return this.curve._fixedNafMul(this, k);\\n  else\\n    return this.curve._wnafMul(this, k);\\n};\\n\\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\\n};\\n\\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\\n};\\n\\nPoint.prototype.normalize = function normalize() {\\n  if (this.zOne)\\n    return this;\\n\\n  // Normalize coordinates\\n  var zi = this.z.redInvm();\\n  this.x = this.x.redMul(zi);\\n  this.y = this.y.redMul(zi);\\n  if (this.t)\\n    this.t = this.t.redMul(zi);\\n  this.z = this.curve.one;\\n  this.zOne = true;\\n  return this;\\n};\\n\\nPoint.prototype.neg = function neg() {\\n  return this.curve.point(this.x.redNeg(),\\n                          this.y,\\n                          this.z,\\n                          this.t && this.t.redNeg());\\n};\\n\\nPoint.prototype.getX = function getX() {\\n  this.normalize();\\n  return this.x.fromRed();\\n};\\n\\nPoint.prototype.getY = function getY() {\\n  this.normalize();\\n  return this.y.fromRed();\\n};\\n\\nPoint.prototype.eq = function eq(other) {\\n  return this === other ||\\n         this.getX().cmp(other.getX()) === 0 &&\\n         this.getY().cmp(other.getY()) === 0;\\n};\\n\\nPoint.prototype.eqXToP = function eqXToP(x) {\\n  var rx = x.toRed(this.curve.red).redMul(this.z);\\n  if (this.x.cmp(rx) === 0)\\n    return true;\\n\\n  var xc = x.clone();\\n  var t = this.curve.redN.redMul(this.z);\\n  for (;;) {\\n    xc.iadd(this.curve.n);\\n    if (xc.cmp(this.curve.p) >= 0)\\n      return false;\\n\\n    rx.redIAdd(t);\\n    if (this.x.cmp(rx) === 0)\\n      return true;\\n  }\\n};\\n\\n// Compatibility with BaseCurve\\nPoint.prototype.toP = Point.prototype.normalize;\\nPoint.prototype.mixedAdd = Point.prototype.add;\\n\",\"module.exports = {\\n  doubles: {\\n    step: 4,\\n    points: [\\n      [\\n        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\\n        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'\\n      ],\\n      [\\n        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\\n        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'\\n      ],\\n      [\\n        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\\n        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'\\n      ],\\n      [\\n        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\\n        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'\\n      ],\\n      [\\n        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\\n        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'\\n      ],\\n      [\\n        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\\n        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'\\n      ],\\n      [\\n        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\\n        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'\\n      ],\\n      [\\n        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\\n        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'\\n      ],\\n      [\\n        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\\n        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'\\n      ],\\n      [\\n        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\\n        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'\\n      ],\\n      [\\n        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\\n        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'\\n      ],\\n      [\\n        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\\n        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'\\n      ],\\n      [\\n        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\\n        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'\\n      ],\\n      [\\n        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\\n        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'\\n      ],\\n      [\\n        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\\n        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'\\n      ],\\n      [\\n        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\\n        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'\\n      ],\\n      [\\n        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\\n        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'\\n      ],\\n      [\\n        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\\n        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'\\n      ],\\n      [\\n        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\\n        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'\\n      ],\\n      [\\n        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\\n        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'\\n      ],\\n      [\\n        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\\n        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'\\n      ],\\n      [\\n        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\\n        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'\\n      ],\\n      [\\n        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\\n        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'\\n      ],\\n      [\\n        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\\n        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'\\n      ],\\n      [\\n        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\\n        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'\\n      ],\\n      [\\n        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\\n        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'\\n      ],\\n      [\\n        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\\n        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'\\n      ],\\n      [\\n        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\\n        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'\\n      ],\\n      [\\n        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\\n        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'\\n      ],\\n      [\\n        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\\n        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'\\n      ],\\n      [\\n        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\\n        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'\\n      ],\\n      [\\n        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\\n        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'\\n      ],\\n      [\\n        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\\n        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'\\n      ],\\n      [\\n        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\\n        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'\\n      ],\\n      [\\n        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\\n        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'\\n      ],\\n      [\\n        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\\n        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'\\n      ],\\n      [\\n        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\\n        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'\\n      ],\\n      [\\n        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\\n        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'\\n      ],\\n      [\\n        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\\n        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'\\n      ],\\n      [\\n        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\\n        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'\\n      ],\\n      [\\n        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\\n        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'\\n      ],\\n      [\\n        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\\n        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'\\n      ],\\n      [\\n        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\\n        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'\\n      ],\\n      [\\n        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\\n        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'\\n      ],\\n      [\\n        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\\n        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'\\n      ],\\n      [\\n        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\\n        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'\\n      ],\\n      [\\n        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\\n        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'\\n      ],\\n      [\\n        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\\n        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'\\n      ],\\n      [\\n        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\\n        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'\\n      ],\\n      [\\n        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\\n        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'\\n      ],\\n      [\\n        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\\n        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'\\n      ],\\n      [\\n        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\\n        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'\\n      ],\\n      [\\n        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\\n        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'\\n      ],\\n      [\\n        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\\n        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'\\n      ],\\n      [\\n        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\\n        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'\\n      ],\\n      [\\n        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\\n        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'\\n      ],\\n      [\\n        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\\n        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'\\n      ],\\n      [\\n        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\\n        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'\\n      ],\\n      [\\n        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\\n        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'\\n      ],\\n      [\\n        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\\n        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'\\n      ],\\n      [\\n        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\\n        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'\\n      ],\\n      [\\n        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\\n        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'\\n      ],\\n      [\\n        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\\n        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'\\n      ],\\n      [\\n        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\\n        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'\\n      ],\\n      [\\n        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\\n        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'\\n      ]\\n    ]\\n  },\\n  naf: {\\n    wnd: 7,\\n    points: [\\n      [\\n        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\\n        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'\\n      ],\\n      [\\n        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\\n        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'\\n      ],\\n      [\\n        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\\n        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'\\n      ],\\n      [\\n        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\\n        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'\\n      ],\\n      [\\n        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\\n        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'\\n      ],\\n      [\\n        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\\n        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'\\n      ],\\n      [\\n        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\\n        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'\\n      ],\\n      [\\n        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\\n        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'\\n      ],\\n      [\\n        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\\n        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'\\n      ],\\n      [\\n        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\\n        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'\\n      ],\\n      [\\n        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\\n        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'\\n      ],\\n      [\\n        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\\n        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'\\n      ],\\n      [\\n        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\\n        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'\\n      ],\\n      [\\n        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\\n        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'\\n      ],\\n      [\\n        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\\n        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'\\n      ],\\n      [\\n        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\\n        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'\\n      ],\\n      [\\n        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\\n        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'\\n      ],\\n      [\\n        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\\n        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'\\n      ],\\n      [\\n        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\\n        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'\\n      ],\\n      [\\n        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\\n        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'\\n      ],\\n      [\\n        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\\n        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'\\n      ],\\n      [\\n        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\\n        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'\\n      ],\\n      [\\n        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\\n        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'\\n      ],\\n      [\\n        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\\n        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'\\n      ],\\n      [\\n        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\\n        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'\\n      ],\\n      [\\n        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\\n        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'\\n      ],\\n      [\\n        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\\n        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'\\n      ],\\n      [\\n        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\\n        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'\\n      ],\\n      [\\n        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\\n        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'\\n      ],\\n      [\\n        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\\n        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'\\n      ],\\n      [\\n        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\\n        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'\\n      ],\\n      [\\n        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\\n        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'\\n      ],\\n      [\\n        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\\n        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'\\n      ],\\n      [\\n        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\\n        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'\\n      ],\\n      [\\n        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\\n        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'\\n      ],\\n      [\\n        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\\n        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'\\n      ],\\n      [\\n        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\\n        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'\\n      ],\\n      [\\n        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\\n        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'\\n      ],\\n      [\\n        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\\n        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'\\n      ],\\n      [\\n        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\\n        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'\\n      ],\\n      [\\n        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\\n        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'\\n      ],\\n      [\\n        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\\n        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'\\n      ],\\n      [\\n        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\\n        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'\\n      ],\\n      [\\n        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\\n        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'\\n      ],\\n      [\\n        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\\n        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'\\n      ],\\n      [\\n        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\\n        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'\\n      ],\\n      [\\n        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\\n        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'\\n      ],\\n      [\\n        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\\n        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'\\n      ],\\n      [\\n        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\\n        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'\\n      ],\\n      [\\n        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\\n        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'\\n      ],\\n      [\\n        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\\n        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'\\n      ],\\n      [\\n        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\\n        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'\\n      ],\\n      [\\n        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\\n        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'\\n      ],\\n      [\\n        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\\n        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'\\n      ],\\n      [\\n        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\\n        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'\\n      ],\\n      [\\n        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\\n        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'\\n      ],\\n      [\\n        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\\n        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'\\n      ],\\n      [\\n        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\\n        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'\\n      ],\\n      [\\n        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\\n        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'\\n      ],\\n      [\\n        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\\n        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'\\n      ],\\n      [\\n        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\\n        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'\\n      ],\\n      [\\n        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\\n        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'\\n      ],\\n      [\\n        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\\n        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'\\n      ],\\n      [\\n        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\\n        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'\\n      ],\\n      [\\n        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\\n        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'\\n      ],\\n      [\\n        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\\n        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'\\n      ],\\n      [\\n        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\\n        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'\\n      ],\\n      [\\n        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\\n        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'\\n      ],\\n      [\\n        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\\n        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'\\n      ],\\n      [\\n        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\\n        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'\\n      ],\\n      [\\n        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\\n        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'\\n      ],\\n      [\\n        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\\n        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'\\n      ],\\n      [\\n        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\\n        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'\\n      ],\\n      [\\n        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\\n        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'\\n      ],\\n      [\\n        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\\n        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'\\n      ],\\n      [\\n        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\\n        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'\\n      ],\\n      [\\n        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\\n        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'\\n      ],\\n      [\\n        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\\n        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'\\n      ],\\n      [\\n        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\\n        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'\\n      ],\\n      [\\n        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\\n        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'\\n      ],\\n      [\\n        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\\n        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'\\n      ],\\n      [\\n        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\\n        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'\\n      ],\\n      [\\n        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\\n        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'\\n      ],\\n      [\\n        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\\n        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'\\n      ],\\n      [\\n        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\\n        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'\\n      ],\\n      [\\n        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\\n        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'\\n      ],\\n      [\\n        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\\n        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'\\n      ],\\n      [\\n        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\\n        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'\\n      ],\\n      [\\n        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\\n        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'\\n      ],\\n      [\\n        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\\n        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'\\n      ],\\n      [\\n        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\\n        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'\\n      ],\\n      [\\n        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\\n        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'\\n      ],\\n      [\\n        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\\n        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'\\n      ],\\n      [\\n        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\\n        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'\\n      ],\\n      [\\n        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\\n        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'\\n      ],\\n      [\\n        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\\n        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'\\n      ],\\n      [\\n        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\\n        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'\\n      ],\\n      [\\n        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\\n        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'\\n      ],\\n      [\\n        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\\n        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'\\n      ],\\n      [\\n        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\\n        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'\\n      ],\\n      [\\n        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\\n        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'\\n      ],\\n      [\\n        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\\n        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'\\n      ],\\n      [\\n        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\\n        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'\\n      ],\\n      [\\n        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\\n        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'\\n      ],\\n      [\\n        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\\n        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'\\n      ],\\n      [\\n        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\\n        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'\\n      ],\\n      [\\n        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\\n        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'\\n      ],\\n      [\\n        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\\n        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'\\n      ],\\n      [\\n        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\\n        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'\\n      ],\\n      [\\n        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\\n        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'\\n      ],\\n      [\\n        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\\n        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'\\n      ],\\n      [\\n        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\\n        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'\\n      ],\\n      [\\n        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\\n        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'\\n      ],\\n      [\\n        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\\n        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'\\n      ],\\n      [\\n        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\\n        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'\\n      ],\\n      [\\n        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\\n        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'\\n      ],\\n      [\\n        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\\n        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'\\n      ],\\n      [\\n        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\\n        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'\\n      ],\\n      [\\n        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\\n        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'\\n      ],\\n      [\\n        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\\n        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'\\n      ],\\n      [\\n        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\\n        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'\\n      ],\\n      [\\n        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\\n        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'\\n      ],\\n      [\\n        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\\n        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'\\n      ],\\n      [\\n        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\\n        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'\\n      ],\\n      [\\n        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\\n        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'\\n      ],\\n      [\\n        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\\n        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'\\n      ],\\n      [\\n        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\\n        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'\\n      ]\\n    ]\\n  }\\n};\\n\",\"'use strict';\\n\\nvar curve = exports;\\n\\ncurve.base = require('./base');\\ncurve.short = require('./short');\\ncurve.mont = require('./mont');\\ncurve.edwards = require('./edwards');\\n\",\"'use strict';\\n\\nvar BN = require('bn.js');\\nvar elliptic = require('../../elliptic');\\nvar utils = elliptic.utils;\\nvar assert = utils.assert;\\nvar cachedProperty = utils.cachedProperty;\\nvar parseBytes = utils.parseBytes;\\n\\n/**\\n* @param {EDDSA} eddsa - eddsa instance\\n* @param {Array<Bytes>|Object} sig -\\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\\n*/\\nfunction Signature(eddsa, sig) {\\n  this.eddsa = eddsa;\\n\\n  if (typeof sig !== 'object')\\n    sig = parseBytes(sig);\\n\\n  if (Array.isArray(sig)) {\\n    sig = {\\n      R: sig.slice(0, eddsa.encodingLength),\\n      S: sig.slice(eddsa.encodingLength)\\n    };\\n  }\\n\\n  assert(sig.R && sig.S, 'Signature without R or S');\\n\\n  if (eddsa.isPoint(sig.R))\\n    this._R = sig.R;\\n  if (sig.S instanceof BN)\\n    this._S = sig.S;\\n\\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\\n}\\n\\ncachedProperty(Signature, 'S', function S() {\\n  return this.eddsa.decodeInt(this.Sencoded());\\n});\\n\\ncachedProperty(Signature, 'R', function R() {\\n  return this.eddsa.decodePoint(this.Rencoded());\\n});\\n\\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\\n  return this.eddsa.encodePoint(this.R());\\n});\\n\\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\\n  return this.eddsa.encodeInt(this.S());\\n});\\n\\nSignature.prototype.toBytes = function toBytes() {\\n  return this.Rencoded().concat(this.Sencoded());\\n};\\n\\nSignature.prototype.toHex = function toHex() {\\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\\n};\\n\\nmodule.exports = Signature;\\n\",\"'use strict';\\n\\nvar curve = require('../curve');\\nvar BN = require('bn.js');\\nvar inherits = require('inherits');\\nvar Base = curve.base;\\n\\nvar elliptic = require('../../elliptic');\\nvar utils = elliptic.utils;\\n\\nfunction MontCurve(conf) {\\n  Base.call(this, 'mont', conf);\\n\\n  this.a = new BN(conf.a, 16).toRed(this.red);\\n  this.b = new BN(conf.b, 16).toRed(this.red);\\n  this.i4 = new BN(4).toRed(this.red).redInvm();\\n  this.two = new BN(2).toRed(this.red);\\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\\n}\\ninherits(MontCurve, Base);\\nmodule.exports = MontCurve;\\n\\nMontCurve.prototype.validate = function validate(point) {\\n  var x = point.normalize().x;\\n  var x2 = x.redSqr();\\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\\n  var y = rhs.redSqrt();\\n\\n  return y.redSqr().cmp(rhs) === 0;\\n};\\n\\nfunction Point(curve, x, z) {\\n  Base.BasePoint.call(this, curve, 'projective');\\n  if (x === null && z === null) {\\n    this.x = this.curve.one;\\n    this.z = this.curve.zero;\\n  } else {\\n    this.x = new BN(x, 16);\\n    this.z = new BN(z, 16);\\n    if (!this.x.red)\\n      this.x = this.x.toRed(this.curve.red);\\n    if (!this.z.red)\\n      this.z = this.z.toRed(this.curve.red);\\n  }\\n}\\ninherits(Point, Base.BasePoint);\\n\\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\\n  return this.point(utils.toArray(bytes, enc), 1);\\n};\\n\\nMontCurve.prototype.point = function point(x, z) {\\n  return new Point(this, x, z);\\n};\\n\\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\\n  return Point.fromJSON(this, obj);\\n};\\n\\nPoint.prototype.precompute = function precompute() {\\n  // No-op\\n};\\n\\nPoint.prototype._encode = function _encode() {\\n  return this.getX().toArray('be', this.curve.p.byteLength());\\n};\\n\\nPoint.fromJSON = function fromJSON(curve, obj) {\\n  return new Point(curve, obj[0], obj[1] || curve.one);\\n};\\n\\nPoint.prototype.inspect = function inspect() {\\n  if (this.isInfinity())\\n    return '<EC Point Infinity>';\\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\\n};\\n\\nPoint.prototype.isInfinity = function isInfinity() {\\n  // XXX This code assumes that zero is always zero in red\\n  return this.z.cmpn(0) === 0;\\n};\\n\\nPoint.prototype.dbl = function dbl() {\\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\\n  // 2M + 2S + 4A\\n\\n  // A = X1 + Z1\\n  var a = this.x.redAdd(this.z);\\n  // AA = A^2\\n  var aa = a.redSqr();\\n  // B = X1 - Z1\\n  var b = this.x.redSub(this.z);\\n  // BB = B^2\\n  var bb = b.redSqr();\\n  // C = AA - BB\\n  var c = aa.redSub(bb);\\n  // X3 = AA * BB\\n  var nx = aa.redMul(bb);\\n  // Z3 = C * (BB + A24 * C)\\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\\n  return this.curve.point(nx, nz);\\n};\\n\\nPoint.prototype.add = function add() {\\n  throw new Error('Not supported on Montgomery curve');\\n};\\n\\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\\n  // 4M + 2S + 6A\\n\\n  // A = X2 + Z2\\n  var a = this.x.redAdd(this.z);\\n  // B = X2 - Z2\\n  var b = this.x.redSub(this.z);\\n  // C = X3 + Z3\\n  var c = p.x.redAdd(p.z);\\n  // D = X3 - Z3\\n  var d = p.x.redSub(p.z);\\n  // DA = D * A\\n  var da = d.redMul(a);\\n  // CB = C * B\\n  var cb = c.redMul(b);\\n  // X5 = Z1 * (DA + CB)^2\\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\\n  // Z5 = X1 * (DA - CB)^2\\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\\n  return this.curve.point(nx, nz);\\n};\\n\\nPoint.prototype.mul = function mul(k) {\\n  var t = k.clone();\\n  var a = this; // (N / 2) * Q + Q\\n  var b = this.curve.point(null, null); // (N / 2) * Q\\n  var c = this; // Q\\n\\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\\n    bits.push(t.andln(1));\\n\\n  for (var i = bits.length - 1; i >= 0; i--) {\\n    if (bits[i] === 0) {\\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\\n      a = a.diffAdd(b, c);\\n      // N * Q = 2 * ((N / 2) * Q + Q))\\n      b = b.dbl();\\n    } else {\\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\\n      b = a.diffAdd(b, c);\\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\\n      a = a.dbl();\\n    }\\n  }\\n  return b;\\n};\\n\\nPoint.prototype.mulAdd = function mulAdd() {\\n  throw new Error('Not supported on Montgomery curve');\\n};\\n\\nPoint.prototype.jumlAdd = function jumlAdd() {\\n  throw new Error('Not supported on Montgomery curve');\\n};\\n\\nPoint.prototype.eq = function eq(other) {\\n  return this.getX().cmp(other.getX()) === 0;\\n};\\n\\nPoint.prototype.normalize = function normalize() {\\n  this.x = this.x.redMul(this.z.redInvm());\\n  this.z = this.curve.one;\\n  return this;\\n};\\n\\nPoint.prototype.getX = function getX() {\\n  // Normalize coordinates\\n  this.normalize();\\n\\n  return this.x.fromRed();\\n};\\n\",\"'use strict';\\n\\nvar hash = require('hash.js');\\nvar elliptic = require('../../elliptic');\\nvar utils = elliptic.utils;\\nvar assert = utils.assert;\\nvar parseBytes = utils.parseBytes;\\nvar KeyPair = require('./key');\\nvar Signature = require('./signature');\\n\\nfunction EDDSA(curve) {\\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\\n\\n  if (!(this instanceof EDDSA))\\n    return new EDDSA(curve);\\n\\n  var curve = elliptic.curves[curve].curve;\\n  this.curve = curve;\\n  this.g = curve.g;\\n  this.g.precompute(curve.n.bitLength() + 1);\\n\\n  this.pointClass = curve.point().constructor;\\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\\n  this.hash = hash.sha512;\\n}\\n\\nmodule.exports = EDDSA;\\n\\n/**\\n* @param {Array|String} message - message bytes\\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\\n* @returns {Signature} - signature\\n*/\\nEDDSA.prototype.sign = function sign(message, secret) {\\n  message = parseBytes(message);\\n  var key = this.keyFromSecret(secret);\\n  var r = this.hashInt(key.messagePrefix(), message);\\n  var R = this.g.mul(r);\\n  var Rencoded = this.encodePoint(R);\\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\\n               .mul(key.priv());\\n  var S = r.add(s_).umod(this.curve.n);\\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\\n};\\n\\n/**\\n* @param {Array} message - message bytes\\n* @param {Array|String|Signature} sig - sig bytes\\n* @param {Array|String|Point|KeyPair} pub - public key\\n* @returns {Boolean} - true if public key matches sig of message\\n*/\\nEDDSA.prototype.verify = function verify(message, sig, pub) {\\n  message = parseBytes(message);\\n  sig = this.makeSignature(sig);\\n  var key = this.keyFromPublic(pub);\\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\\n  var SG = this.g.mul(sig.S());\\n  var RplusAh = sig.R().add(key.pub().mul(h));\\n  return RplusAh.eq(SG);\\n};\\n\\nEDDSA.prototype.hashInt = function hashInt() {\\n  var hash = this.hash();\\n  for (var i = 0; i < arguments.length; i++)\\n    hash.update(arguments[i]);\\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\\n};\\n\\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\\n  return KeyPair.fromPublic(this, pub);\\n};\\n\\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\\n  return KeyPair.fromSecret(this, secret);\\n};\\n\\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\\n  if (sig instanceof Signature)\\n    return sig;\\n  return new Signature(this, sig);\\n};\\n\\n/**\\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\\n*\\n* EDDSA defines methods for encoding and decoding points and integers. These are\\n* helper convenience methods, that pass along to utility functions implied\\n* parameters.\\n*\\n*/\\nEDDSA.prototype.encodePoint = function encodePoint(point) {\\n  var enc = point.getY().toArray('le', this.encodingLength);\\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\\n  return enc;\\n};\\n\\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\\n  bytes = utils.parseBytes(bytes);\\n\\n  var lastIx = bytes.length - 1;\\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\\n\\n  var y = utils.intFromLE(normed);\\n  return this.curve.pointFromY(y, xIsOdd);\\n};\\n\\nEDDSA.prototype.encodeInt = function encodeInt(num) {\\n  return num.toArray('le', this.encodingLength);\\n};\\n\\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\\n  return utils.intFromLE(bytes);\\n};\\n\\nEDDSA.prototype.isPoint = function isPoint(val) {\\n  return val instanceof this.pointClass;\\n};\\n\",\"'use strict';\\n\\nvar BN = require('bn.js');\\n\\nvar elliptic = require('../../elliptic');\\nvar utils = elliptic.utils;\\nvar assert = utils.assert;\\n\\nfunction Signature(options, enc) {\\n  if (options instanceof Signature)\\n    return options;\\n\\n  if (this._importDER(options, enc))\\n    return;\\n\\n  assert(options.r && options.s, 'Signature without r or s');\\n  this.r = new BN(options.r, 16);\\n  this.s = new BN(options.s, 16);\\n  if (options.recoveryParam === undefined)\\n    this.recoveryParam = null;\\n  else\\n    this.recoveryParam = options.recoveryParam;\\n}\\nmodule.exports = Signature;\\n\\nfunction Position() {\\n  this.place = 0;\\n}\\n\\nfunction getLength(buf, p) {\\n  var initial = buf[p.place++];\\n  if (!(initial & 0x80)) {\\n    return initial;\\n  }\\n  var octetLen = initial & 0xf;\\n  var val = 0;\\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\\n    val <<= 8;\\n    val |= buf[off];\\n  }\\n  p.place = off;\\n  return val;\\n}\\n\\nfunction rmPadding(buf) {\\n  var i = 0;\\n  var len = buf.length - 1;\\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\\n    i++;\\n  }\\n  if (i === 0) {\\n    return buf;\\n  }\\n  return buf.slice(i);\\n}\\n\\nSignature.prototype._importDER = function _importDER(data, enc) {\\n  data = utils.toArray(data, enc);\\n  var p = new Position();\\n  if (data[p.place++] !== 0x30) {\\n    return false;\\n  }\\n  var len = getLength(data, p);\\n  if ((len + p.place) !== data.length) {\\n    return false;\\n  }\\n  if (data[p.place++] !== 0x02) {\\n    return false;\\n  }\\n  var rlen = getLength(data, p);\\n  var r = data.slice(p.place, rlen + p.place);\\n  p.place += rlen;\\n  if (data[p.place++] !== 0x02) {\\n    return false;\\n  }\\n  var slen = getLength(data, p);\\n  if (data.length !== slen + p.place) {\\n    return false;\\n  }\\n  var s = data.slice(p.place, slen + p.place);\\n  if (r[0] === 0 && (r[1] & 0x80)) {\\n    r = r.slice(1);\\n  }\\n  if (s[0] === 0 && (s[1] & 0x80)) {\\n    s = s.slice(1);\\n  }\\n\\n  this.r = new BN(r);\\n  this.s = new BN(s);\\n  this.recoveryParam = null;\\n\\n  return true;\\n};\\n\\nfunction constructLength(arr, len) {\\n  if (len < 0x80) {\\n    arr.push(len);\\n    return;\\n  }\\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\\n  arr.push(octets | 0x80);\\n  while (--octets) {\\n    arr.push((len >>> (octets << 3)) & 0xff);\\n  }\\n  arr.push(len);\\n}\\n\\nSignature.prototype.toDER = function toDER(enc) {\\n  var r = this.r.toArray();\\n  var s = this.s.toArray();\\n\\n  // Pad values\\n  if (r[0] & 0x80)\\n    r = [ 0 ].concat(r);\\n  // Pad values\\n  if (s[0] & 0x80)\\n    s = [ 0 ].concat(s);\\n\\n  r = rmPadding(r);\\n  s = rmPadding(s);\\n\\n  while (!s[0] && !(s[1] & 0x80)) {\\n    s = s.slice(1);\\n  }\\n  var arr = [ 0x02 ];\\n  constructLength(arr, r.length);\\n  arr = arr.concat(r);\\n  arr.push(0x02);\\n  constructLength(arr, s.length);\\n  var backHalf = arr.concat(s);\\n  var res = [ 0x30 ];\\n  constructLength(res, backHalf.length);\\n  res = res.concat(backHalf);\\n  return utils.encode(res, enc);\\n};\\n\",\"'use strict';\\n\\nvar BN = require('bn.js');\\nvar HmacDRBG = require('hmac-drbg');\\nvar elliptic = require('../../elliptic');\\nvar utils = elliptic.utils;\\nvar assert = utils.assert;\\n\\nvar KeyPair = require('./key');\\nvar Signature = require('./signature');\\n\\nfunction EC(options) {\\n  if (!(this instanceof EC))\\n    return new EC(options);\\n\\n  // Shortcut `elliptic.ec(curve-name)`\\n  if (typeof options === 'string') {\\n    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);\\n\\n    options = elliptic.curves[options];\\n  }\\n\\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\\n  if (options instanceof elliptic.curves.PresetCurve)\\n    options = { curve: options };\\n\\n  this.curve = options.curve.curve;\\n  this.n = this.curve.n;\\n  this.nh = this.n.ushrn(1);\\n  this.g = this.curve.g;\\n\\n  // Point on curve\\n  this.g = options.curve.g;\\n  this.g.precompute(options.curve.n.bitLength() + 1);\\n\\n  // Hash for function for DRBG\\n  this.hash = options.hash || options.curve.hash;\\n}\\nmodule.exports = EC;\\n\\nEC.prototype.keyPair = function keyPair(options) {\\n  return new KeyPair(this, options);\\n};\\n\\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\\n  return KeyPair.fromPrivate(this, priv, enc);\\n};\\n\\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\\n  return KeyPair.fromPublic(this, pub, enc);\\n};\\n\\nEC.prototype.genKeyPair = function genKeyPair(options) {\\n  if (!options)\\n    options = {};\\n\\n  // Instantiate Hmac_DRBG\\n  var drbg = new HmacDRBG({\\n    hash: this.hash,\\n    pers: options.pers,\\n    persEnc: options.persEnc || 'utf8',\\n    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),\\n    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\\n    nonce: this.n.toArray()\\n  });\\n\\n  var bytes = this.n.byteLength();\\n  var ns2 = this.n.sub(new BN(2));\\n  do {\\n    var priv = new BN(drbg.generate(bytes));\\n    if (priv.cmp(ns2) > 0)\\n      continue;\\n\\n    priv.iaddn(1);\\n    return this.keyFromPrivate(priv);\\n  } while (true);\\n};\\n\\nEC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\\n  if (delta > 0)\\n    msg = msg.ushrn(delta);\\n  if (!truncOnly && msg.cmp(this.n) >= 0)\\n    return msg.sub(this.n);\\n  else\\n    return msg;\\n};\\n\\nEC.prototype.sign = function sign(msg, key, enc, options) {\\n  if (typeof enc === 'object') {\\n    options = enc;\\n    enc = null;\\n  }\\n  if (!options)\\n    options = {};\\n\\n  key = this.keyFromPrivate(key, enc);\\n  msg = this._truncateToN(new BN(msg, 16));\\n\\n  // Zero-extend key to provide enough entropy\\n  var bytes = this.n.byteLength();\\n  var bkey = key.getPrivate().toArray('be', bytes);\\n\\n  // Zero-extend nonce to have the same byte size as N\\n  var nonce = msg.toArray('be', bytes);\\n\\n  // Instantiate Hmac_DRBG\\n  var drbg = new HmacDRBG({\\n    hash: this.hash,\\n    entropy: bkey,\\n    nonce: nonce,\\n    pers: options.pers,\\n    persEnc: options.persEnc || 'utf8'\\n  });\\n\\n  // Number of bytes to generate\\n  var ns1 = this.n.sub(new BN(1));\\n\\n  for (var iter = 0; true; iter++) {\\n    var k = options.k ?\\n        options.k(iter) :\\n        new BN(drbg.generate(this.n.byteLength()));\\n    k = this._truncateToN(k, true);\\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\\n      continue;\\n\\n    var kp = this.g.mul(k);\\n    if (kp.isInfinity())\\n      continue;\\n\\n    var kpX = kp.getX();\\n    var r = kpX.umod(this.n);\\n    if (r.cmpn(0) === 0)\\n      continue;\\n\\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\\n    s = s.umod(this.n);\\n    if (s.cmpn(0) === 0)\\n      continue;\\n\\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\\n\\n    // Use complement of `s`, if it is > `n / 2`\\n    if (options.canonical && s.cmp(this.nh) > 0) {\\n      s = this.n.sub(s);\\n      recoveryParam ^= 1;\\n    }\\n\\n    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });\\n  }\\n};\\n\\nEC.prototype.verify = function verify(msg, signature, key, enc) {\\n  msg = this._truncateToN(new BN(msg, 16));\\n  key = this.keyFromPublic(key, enc);\\n  signature = new Signature(signature, 'hex');\\n\\n  // Perform primitive values validation\\n  var r = signature.r;\\n  var s = signature.s;\\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\\n    return false;\\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\\n    return false;\\n\\n  // Validate signature\\n  var sinv = s.invm(this.n);\\n  var u1 = sinv.mul(msg).umod(this.n);\\n  var u2 = sinv.mul(r).umod(this.n);\\n\\n  if (!this.curve._maxwellTrick) {\\n    var p = this.g.mulAdd(u1, key.getPublic(), u2);\\n    if (p.isInfinity())\\n      return false;\\n\\n    return p.getX().umod(this.n).cmp(r) === 0;\\n  }\\n\\n  // NOTE: Greg Maxwell's trick, inspired by:\\n  // https://git.io/vad3K\\n\\n  var p = this.g.jmulAdd(u1, key.getPublic(), u2);\\n  if (p.isInfinity())\\n    return false;\\n\\n  // Compare `p.x` of Jacobian point with `r`,\\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\\n  // inverse of `p.z^2`\\n  return p.eqXToP(r);\\n};\\n\\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\\n  assert((3 & j) === j, 'The recovery param is more than two bits');\\n  signature = new Signature(signature, enc);\\n\\n  var n = this.n;\\n  var e = new BN(msg);\\n  var r = signature.r;\\n  var s = signature.s;\\n\\n  // A set LSB signifies that the y-coordinate is odd\\n  var isYOdd = j & 1;\\n  var isSecondKey = j >> 1;\\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\\n    throw new Error('Unable to find sencond key candinate');\\n\\n  // 1.1. Let x = r + jn.\\n  if (isSecondKey)\\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\\n  else\\n    r = this.curve.pointFromX(r, isYOdd);\\n\\n  var rInv = signature.r.invm(n);\\n  var s1 = n.sub(e).mul(rInv).umod(n);\\n  var s2 = s.mul(rInv).umod(n);\\n\\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\\n  //               Q = r^-1 (sR + -eG)\\n  return this.g.mulAdd(s1, r, s2);\\n};\\n\\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\\n  signature = new Signature(signature, enc);\\n  if (signature.recoveryParam !== null)\\n    return signature.recoveryParam;\\n\\n  for (var i = 0; i < 4; i++) {\\n    var Qprime;\\n    try {\\n      Qprime = this.recoverPubKey(e, signature, i);\\n    } catch (e) {\\n      continue;\\n    }\\n\\n    if (Qprime.eq(Q))\\n      return i;\\n  }\\n  throw new Error('Unable to find valid recovery factor');\\n};\\n\",\"'use strict';\\n\\nvar BN = require('bn.js');\\nvar elliptic = require('../../elliptic');\\nvar utils = elliptic.utils;\\nvar assert = utils.assert;\\n\\nfunction KeyPair(ec, options) {\\n  this.ec = ec;\\n  this.priv = null;\\n  this.pub = null;\\n\\n  // KeyPair(ec, { priv: ..., pub: ... })\\n  if (options.priv)\\n    this._importPrivate(options.priv, options.privEnc);\\n  if (options.pub)\\n    this._importPublic(options.pub, options.pubEnc);\\n}\\nmodule.exports = KeyPair;\\n\\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\\n  if (pub instanceof KeyPair)\\n    return pub;\\n\\n  return new KeyPair(ec, {\\n    pub: pub,\\n    pubEnc: enc\\n  });\\n};\\n\\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\\n  if (priv instanceof KeyPair)\\n    return priv;\\n\\n  return new KeyPair(ec, {\\n    priv: priv,\\n    privEnc: enc\\n  });\\n};\\n\\nKeyPair.prototype.validate = function validate() {\\n  var pub = this.getPublic();\\n\\n  if (pub.isInfinity())\\n    return { result: false, reason: 'Invalid public key' };\\n  if (!pub.validate())\\n    return { result: false, reason: 'Public key is not a point' };\\n  if (!pub.mul(this.ec.curve.n).isInfinity())\\n    return { result: false, reason: 'Public key * N != O' };\\n\\n  return { result: true, reason: null };\\n};\\n\\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\\n  // compact is optional argument\\n  if (typeof compact === 'string') {\\n    enc = compact;\\n    compact = null;\\n  }\\n\\n  if (!this.pub)\\n    this.pub = this.ec.g.mul(this.priv);\\n\\n  if (!enc)\\n    return this.pub;\\n\\n  return this.pub.encode(enc, compact);\\n};\\n\\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\\n  if (enc === 'hex')\\n    return this.priv.toString(16, 2);\\n  else\\n    return this.priv;\\n};\\n\\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\\n  this.priv = new BN(key, enc || 16);\\n\\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\\n  // in fixed multiplication method\\n  this.priv = this.priv.umod(this.ec.curve.n);\\n};\\n\\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\\n  if (key.x || key.y) {\\n    // Montgomery points only have an `x` coordinate.\\n    // Weierstrass/Edwards points on the other hand have both `x` and\\n    // `y` coordinates.\\n    if (this.ec.curve.type === 'mont') {\\n      assert(key.x, 'Need x coordinate');\\n    } else if (this.ec.curve.type === 'short' ||\\n               this.ec.curve.type === 'edwards') {\\n      assert(key.x && key.y, 'Need both x and y coordinate');\\n    }\\n    this.pub = this.ec.curve.point(key.x, key.y);\\n    return;\\n  }\\n  this.pub = this.ec.curve.decodePoint(key, enc);\\n};\\n\\n// ECDH\\nKeyPair.prototype.derive = function derive(pub) {\\n  return pub.mul(this.priv).getX();\\n};\\n\\n// ECDSA\\nKeyPair.prototype.sign = function sign(msg, enc, options) {\\n  return this.ec.sign(msg, this, enc, options);\\n};\\n\\nKeyPair.prototype.verify = function verify(msg, signature) {\\n  return this.ec.verify(msg, signature, this);\\n};\\n\\nKeyPair.prototype.inspect = function inspect() {\\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\\n};\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{\"6lN/\":function(e,f,d){\"use strict\";var c=d(\"OZ/i\"),t=d(\"MzeL\").utils,a=t.getNAF,r=t.getJSF,b=t.assert;function i(e,f){this.type=e,this.p=new c(f.p,16),this.red=f.prime?c.red(f.prime):c.mont(this.p),this.zero=new c(0).toRed(this.red),this.one=new c(1).toRed(this.red),this.two=new c(2).toRed(this.red),this.n=f.n&&new c(f.n,16),this.g=f.g&&this.pointFromJSON(f.g,f.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var d=this.n&&this.p.div(this.n);!d||d.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function n(e,f){this.curve=e,this.type=f,this.precomputed=null}e.exports=i,i.prototype.point=function(){throw new Error(\"Not implemented\")},i.prototype.validate=function(){throw new Error(\"Not implemented\")},i.prototype._fixedNafMul=function(e,f){b(e.precomputed);var d=e._getDoubles(),c=a(f,1),t=(1<<d.step+1)-(d.step%2==0?2:1);t/=3;for(var r=[],i=0;i<c.length;i+=d.step){var n=0;for(f=i+d.step-1;f>=i;f--)n=(n<<1)+c[f];r.push(n)}for(var s=this.jpoint(null,null,null),o=this.jpoint(null,null,null),u=t;u>0;u--){for(i=0;i<r.length;i++){(n=r[i])===u?o=o.mixedAdd(d.points[i]):n===-u&&(o=o.mixedAdd(d.points[i].neg()))}s=s.add(o)}return s.toP()},i.prototype._wnafMul=function(e,f){var d=4,c=e._getNAFPoints(d);d=c.wnd;for(var t=c.points,r=a(f,d),i=this.jpoint(null,null,null),n=r.length-1;n>=0;n--){for(f=0;n>=0&&0===r[n];n--)f++;if(n>=0&&f++,i=i.dblp(f),n<0)break;var s=r[n];b(0!==s),i=\"affine\"===e.type?s>0?i.mixedAdd(t[s-1>>1]):i.mixedAdd(t[-s-1>>1].neg()):s>0?i.add(t[s-1>>1]):i.add(t[-s-1>>1].neg())}return\"affine\"===e.type?i.toP():i},i.prototype._wnafMulAdd=function(e,f,d,c,t){for(var b=this._wnafT1,i=this._wnafT2,n=this._wnafT3,s=0,o=0;o<c;o++){var u=(x=f[o])._getNAFPoints(e);b[o]=u.wnd,i[o]=u.points}for(o=c-1;o>=1;o-=2){var h=o-1,p=o;if(1===b[h]&&1===b[p]){var l=[f[h],null,null,f[p]];0===f[h].y.cmp(f[p].y)?(l[1]=f[h].add(f[p]),l[2]=f[h].toJ().mixedAdd(f[p].neg())):0===f[h].y.cmp(f[p].y.redNeg())?(l[1]=f[h].toJ().mixedAdd(f[p]),l[2]=f[h].add(f[p].neg())):(l[1]=f[h].toJ().mixedAdd(f[p]),l[2]=f[h].toJ().mixedAdd(f[p].neg()));var v=[-3,-1,-5,-7,0,7,5,1,3],y=r(d[h],d[p]);s=Math.max(y[0].length,s),n[h]=new Array(s),n[p]=new Array(s);for(var m=0;m<s;m++){var g=0|y[0][m],S=0|y[1][m];n[h][m]=v[3*(g+1)+(S+1)],n[p][m]=0,i[h]=l}}else n[h]=a(d[h],b[h]),n[p]=a(d[p],b[p]),s=Math.max(n[h].length,s),s=Math.max(n[p].length,s)}var A=this.jpoint(null,null,null),M=this._wnafT4;for(o=s;o>=0;o--){for(var w=0;o>=0;){var I=!0;for(m=0;m<c;m++)M[m]=0|n[m][o],0!==M[m]&&(I=!1);if(!I)break;w++,o--}if(o>=0&&w++,A=A.dblp(w),o<0)break;for(m=0;m<c;m++){var x,z=M[m];0!==z&&(z>0?x=i[m][z-1>>1]:z<0&&(x=i[m][-z-1>>1].neg()),A=\"affine\"===x.type?A.mixedAdd(x):A.add(x))}}for(o=0;o<c;o++)i[o]=null;return t?A:A.toP()},i.BasePoint=n,n.prototype.eq=function(){throw new Error(\"Not implemented\")},n.prototype.validate=function(){return this.curve.validate(this)},i.prototype.decodePoint=function(e,f){e=t.toArray(e,f);var d=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*d)return 6===e[0]?b(e[e.length-1]%2==0):7===e[0]&&b(e[e.length-1]%2==1),this.point(e.slice(1,1+d),e.slice(1+d,1+2*d));if((2===e[0]||3===e[0])&&e.length-1===d)return this.pointFromX(e.slice(1,1+d),3===e[0]);throw new Error(\"Unknown point format\")},n.prototype.encodeCompressed=function(e){return this.encode(e,!0)},n.prototype._encode=function(e){var f=this.curve.p.byteLength(),d=this.getX().toArray(\"be\",f);return e?[this.getY().isEven()?2:3].concat(d):[4].concat(d,this.getY().toArray(\"be\",f))},n.prototype.encode=function(e,f){return t.encode(this._encode(f),e)},n.prototype.precompute=function(e){if(this.precomputed)return this;var f={doubles:null,naf:null,beta:null};return f.naf=this._getNAFPoints(8),f.doubles=this._getDoubles(4,e),f.beta=this._getBeta(),this.precomputed=f,this},n.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var f=this.precomputed.doubles;return!!f&&f.points.length>=Math.ceil((e.bitLength()+1)/f.step)},n.prototype._getDoubles=function(e,f){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var d=[this],c=this,t=0;t<f;t+=e){for(var a=0;a<e;a++)c=c.dbl();d.push(c)}return{step:e,points:d}},n.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var f=[this],d=(1<<e)-1,c=1===d?null:this.dbl(),t=1;t<d;t++)f[t]=f[t-1].add(c);return{wnd:e,points:f}},n.prototype._getBeta=function(){return null},n.prototype.dblp=function(e){for(var f=this,d=0;d<e;d++)f=f.dbl();return f}},\"86MQ\":function(e,f,d){\"use strict\";var c=f,t=d(\"OZ/i\"),a=d(\"2j6C\"),r=d(\"dlgc\");c.assert=a,c.toArray=r.toArray,c.zero2=r.zero2,c.toHex=r.toHex,c.encode=r.encode,c.getNAF=function(e,f){for(var d=[],c=1<<f+1,t=e.clone();t.cmpn(1)>=0;){var a;if(t.isOdd()){var r=t.andln(c-1);a=r>(c>>1)-1?(c>>1)-r:r,t.isubn(a)}else a=0;d.push(a);for(var b=0!==t.cmpn(0)&&0===t.andln(c-1)?f+1:1,i=1;i<b;i++)d.push(0);t.iushrn(b)}return d},c.getJSF=function(e,f){var d=[[],[]];e=e.clone(),f=f.clone();for(var c=0,t=0;e.cmpn(-c)>0||f.cmpn(-t)>0;){var a,r,b,i=e.andln(3)+c&3,n=f.andln(3)+t&3;3===i&&(i=-1),3===n&&(n=-1),a=0==(1&i)?0:3!=(b=e.andln(7)+c&7)&&5!==b||2!==n?i:-i,d[0].push(a),r=0==(1&n)?0:3!=(b=f.andln(7)+t&7)&&5!==b||2!==i?n:-n,d[1].push(r),2*c===a+1&&(c=1-c),2*t===r+1&&(t=1-t),e.iushrn(1),f.iushrn(1)}return d},c.cachedProperty=function(e,f,d){var c=\"_\"+f;e.prototype[f]=function(){return void 0!==this[c]?this[c]:this[c]=d.call(this)}},c.parseBytes=function(e){return\"string\"==typeof e?c.toArray(e,\"hex\"):e},c.intFromLE=function(e){return new t(e,\"hex\",\"le\")}},DLvh:function(e,f,d){\"use strict\";var c,t=f,a=d(\"fZJM\"),r=d(\"MzeL\"),b=r.utils.assert;function i(e){\"short\"===e.type?this.curve=new r.curve.short(e):\"edwards\"===e.type?this.curve=new r.curve.edwards(e):this.curve=new r.curve.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,b(this.g.validate(),\"Invalid curve\"),b(this.g.mul(this.n).isInfinity(),\"Invalid curve, G*N != O\")}function n(e,f){Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){var d=new i(f);return Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:d}),d}})}t.PresetCurve=i,n(\"p192\",{type:\"short\",prime:\"p192\",p:\"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",a:\"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",b:\"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",n:\"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",hash:a.sha256,gRed:!1,g:[\"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"]}),n(\"p224\",{type:\"short\",prime:\"p224\",p:\"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",a:\"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",b:\"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",n:\"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",hash:a.sha256,gRed:!1,g:[\"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"]}),n(\"p256\",{type:\"short\",prime:null,p:\"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",a:\"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",b:\"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",n:\"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",hash:a.sha256,gRed:!1,g:[\"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"]}),n(\"p384\",{type:\"short\",prime:null,p:\"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff\",a:\"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc\",b:\"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",n:\"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",hash:a.sha384,gRed:!1,g:[\"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7\",\"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"]}),n(\"p521\",{type:\"short\",prime:null,p:\"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff\",a:\"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc\",b:\"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",n:\"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",hash:a.sha512,gRed:!1,g:[\"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650\"]}),n(\"curve25519\",{type:\"mont\",prime:\"p25519\",p:\"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",a:\"76d06\",b:\"1\",n:\"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",hash:a.sha256,gRed:!1,g:[\"9\"]}),n(\"ed25519\",{type:\"edwards\",prime:\"p25519\",p:\"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",a:\"-1\",c:\"1\",d:\"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",n:\"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",hash:a.sha256,gRed:!1,g:[\"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\"6666666666666666666666666666666666666666666666666666666666666658\"]});try{c=d(\"QJsb\")}catch(e){c=void 0}n(\"secp256k1\",{type:\"short\",prime:\"k256\",p:\"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",a:\"0\",b:\"7\",n:\"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",h:\"1\",hash:a.sha256,beta:\"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",lambda:\"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",basis:[{a:\"3086d221a7d46bcde86c90e49284eb15\",b:\"-e4437ed6010e88286f547fa90abfe4c3\"},{a:\"114ca50f7a8e2f3f657c1108d9d44cfd8\",b:\"3086d221a7d46bcde86c90e49284eb15\"}],gRed:!1,g:[\"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",c]})},KAEN:function(e){e.exports={_from:\"elliptic@^6.0.0\",_id:\"elliptic@6.4.1\",_inBundle:!1,_integrity:\"sha512-BsXLz5sqX8OHcsh7CqBMztyXARmGQ3LWPtGjJi6DiJHq5C/qvi9P3OqgswKSDftbu8+IoI/QDTAm2fFnQ9SZSQ==\",_location:\"/elliptic\",_phantomChildren:{},_requested:{type:\"range\",registry:!0,raw:\"elliptic@^6.0.0\",name:\"elliptic\",escapedName:\"elliptic\",rawSpec:\"^6.0.0\",saveSpec:null,fetchSpec:\"^6.0.0\"},_requiredBy:[\"/browserify-sign\",\"/create-ecdh\"],_resolved:\"https://registry.npmjs.org/elliptic/-/elliptic-6.4.1.tgz\",_shasum:\"c2d0b7776911b86722c632c3c06c60f2f819939a\",_spec:\"elliptic@^6.0.0\",_where:\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\browserify-sign\",author:{name:\"Fedor Indutny\",email:\"fedor@indutny.com\"},bugs:{url:\"https://github.com/indutny/elliptic/issues\"},bundleDependencies:!1,dependencies:{\"bn.js\":\"^4.4.0\",brorand:\"^1.0.1\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.0\",inherits:\"^2.0.1\",\"minimalistic-assert\":\"^1.0.0\",\"minimalistic-crypto-utils\":\"^1.0.0\"},deprecated:!1,description:\"EC cryptography\",devDependencies:{brfs:\"^1.4.3\",coveralls:\"^2.11.3\",grunt:\"^0.4.5\",\"grunt-browserify\":\"^5.0.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-connect\":\"^1.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^1.0.1\",\"grunt-mocha-istanbul\":\"^3.0.1\",\"grunt-saucelabs\":\"^8.6.2\",istanbul:\"^0.4.2\",jscs:\"^2.9.0\",jshint:\"^2.6.0\",mocha:\"^2.1.0\"},files:[\"lib\"],homepage:\"https://github.com/indutny/elliptic\",keywords:[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],license:\"MIT\",main:\"lib/elliptic.js\",name:\"elliptic\",repository:{type:\"git\",url:\"git+ssh://git@github.com/indutny/elliptic.git\"},scripts:{jscs:\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",jshint:\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",lint:\"npm run jscs && npm run jshint\",test:\"npm run lint && npm run unit\",unit:\"istanbul test _mocha --reporter=spec test/index.js\",version:\"grunt dist && git add dist/\"},version:\"6.4.1\"}},MwBp:function(e,f,d){\"use strict\";var c=d(\"QTa/\"),t=d(\"MzeL\"),a=d(\"OZ/i\"),r=d(\"P7XM\"),b=c.base,i=t.utils.assert;function n(e){b.call(this,\"short\",e),this.a=new a(e.a,16).toRed(this.red),this.b=new a(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function s(e,f,d,c){b.BasePoint.call(this,e,\"affine\"),null===f&&null===d?(this.x=null,this.y=null,this.inf=!0):(this.x=new a(f,16),this.y=new a(d,16),c&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function o(e,f,d,c){b.BasePoint.call(this,e,\"jacobian\"),null===f&&null===d&&null===c?(this.x=this.curve.one,this.y=this.curve.one,this.z=new a(0)):(this.x=new a(f,16),this.y=new a(d,16),this.z=new a(c,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}r(n,b),e.exports=n,n.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var f,d;if(e.beta)f=new a(e.beta,16).toRed(this.red);else{var c=this._getEndoRoots(this.p);f=(f=c[0].cmp(c[1])<0?c[0]:c[1]).toRed(this.red)}if(e.lambda)d=new a(e.lambda,16);else{var t=this._getEndoRoots(this.n);0===this.g.mul(t[0]).x.cmp(this.g.x.redMul(f))?d=t[0]:(d=t[1],i(0===this.g.mul(d).x.cmp(this.g.x.redMul(f))))}return{beta:f,lambda:d,basis:e.basis?e.basis.map(function(e){return{a:new a(e.a,16),b:new a(e.b,16)}}):this._getEndoBasis(d)}}},n.prototype._getEndoRoots=function(e){var f=e===this.p?this.red:a.mont(e),d=new a(2).toRed(f).redInvm(),c=d.redNeg(),t=new a(3).toRed(f).redNeg().redSqrt().redMul(d);return[c.redAdd(t).fromRed(),c.redSub(t).fromRed()]},n.prototype._getEndoBasis=function(e){for(var f,d,c,t,r,b,i,n,s,o=this.n.ushrn(Math.floor(this.n.bitLength()/2)),u=e,h=this.n.clone(),p=new a(1),l=new a(0),v=new a(0),y=new a(1),m=0;0!==u.cmpn(0);){var g=h.div(u);n=h.sub(g.mul(u)),s=v.sub(g.mul(p));var S=y.sub(g.mul(l));if(!c&&n.cmp(o)<0)f=i.neg(),d=p,c=n.neg(),t=s;else if(c&&2==++m)break;i=n,h=u,u=n,v=p,p=s,y=l,l=S}r=n.neg(),b=s;var A=c.sqr().add(t.sqr());return r.sqr().add(b.sqr()).cmp(A)>=0&&(r=f,b=d),c.negative&&(c=c.neg(),t=t.neg()),r.negative&&(r=r.neg(),b=b.neg()),[{a:c,b:t},{a:r,b:b}]},n.prototype._endoSplit=function(e){var f=this.endo.basis,d=f[0],c=f[1],t=c.b.mul(e).divRound(this.n),a=d.b.neg().mul(e).divRound(this.n),r=t.mul(d.a),b=a.mul(c.a),i=t.mul(d.b),n=a.mul(c.b);return{k1:e.sub(r).sub(b),k2:i.add(n).neg()}},n.prototype.pointFromX=function(e,f){(e=new a(e,16)).red||(e=e.toRed(this.red));var d=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),c=d.redSqrt();if(0!==c.redSqr().redSub(d).cmp(this.zero))throw new Error(\"invalid point\");var t=c.fromRed().isOdd();return(f&&!t||!f&&t)&&(c=c.redNeg()),this.point(e,c)},n.prototype.validate=function(e){if(e.inf)return!0;var f=e.x,d=e.y,c=this.a.redMul(f),t=f.redSqr().redMul(f).redIAdd(c).redIAdd(this.b);return 0===d.redSqr().redISub(t).cmpn(0)},n.prototype._endoWnafMulAdd=function(e,f,d){for(var c=this._endoWnafT1,t=this._endoWnafT2,a=0;a<e.length;a++){var r=this._endoSplit(f[a]),b=e[a],i=b._getBeta();r.k1.negative&&(r.k1.ineg(),b=b.neg(!0)),r.k2.negative&&(r.k2.ineg(),i=i.neg(!0)),c[2*a]=b,c[2*a+1]=i,t[2*a]=r.k1,t[2*a+1]=r.k2}for(var n=this._wnafMulAdd(1,c,t,2*a,d),s=0;s<2*a;s++)c[s]=null,t[s]=null;return n},r(s,b.BasePoint),n.prototype.point=function(e,f,d){return new s(this,e,f,d)},n.prototype.pointFromJSON=function(e,f){return s.fromJSON(this,e,f)},s.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var f=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var d=this.curve,c=function(e){return d.point(e.x.redMul(d.endo.beta),e.y)};e.beta=f,f.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(c)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(c)}}}return f}},s.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},s.fromJSON=function(e,f,d){\"string\"==typeof f&&(f=JSON.parse(f));var c=e.point(f[0],f[1],d);if(!f[2])return c;function t(f){return e.point(f[0],f[1],d)}var a=f[2];return c.precomputed={beta:null,doubles:a.doubles&&{step:a.doubles.step,points:[c].concat(a.doubles.points.map(t))},naf:a.naf&&{wnd:a.naf.wnd,points:[c].concat(a.naf.points.map(t))}},c},s.prototype.inspect=function(){return this.isInfinity()?\"<EC Point Infinity>\":\"<EC Point x: \"+this.x.fromRed().toString(16,2)+\" y: \"+this.y.fromRed().toString(16,2)+\">\"},s.prototype.isInfinity=function(){return this.inf},s.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var f=this.y.redSub(e.y);0!==f.cmpn(0)&&(f=f.redMul(this.x.redSub(e.x).redInvm()));var d=f.redSqr().redISub(this.x).redISub(e.x),c=f.redMul(this.x.redSub(d)).redISub(this.y);return this.curve.point(d,c)},s.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var f=this.curve.a,d=this.x.redSqr(),c=e.redInvm(),t=d.redAdd(d).redIAdd(d).redIAdd(f).redMul(c),a=t.redSqr().redISub(this.x.redAdd(this.x)),r=t.redMul(this.x.redSub(a)).redISub(this.y);return this.curve.point(a,r)},s.prototype.getX=function(){return this.x.fromRed()},s.prototype.getY=function(){return this.y.fromRed()},s.prototype.mul=function(e){return e=new a(e,16),this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},s.prototype.mulAdd=function(e,f,d){var c=[this,f],t=[e,d];return this.curve.endo?this.curve._endoWnafMulAdd(c,t):this.curve._wnafMulAdd(1,c,t,2)},s.prototype.jmulAdd=function(e,f,d){var c=[this,f],t=[e,d];return this.curve.endo?this.curve._endoWnafMulAdd(c,t,!0):this.curve._wnafMulAdd(1,c,t,2,!0)},s.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},s.prototype.neg=function(e){if(this.inf)return this;var f=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var d=this.precomputed,c=function(e){return e.neg()};f.precomputed={naf:d.naf&&{wnd:d.naf.wnd,points:d.naf.points.map(c)},doubles:d.doubles&&{step:d.doubles.step,points:d.doubles.points.map(c)}}}return f},s.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},r(o,b.BasePoint),n.prototype.jpoint=function(e,f,d){return new o(this,e,f,d)},o.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),f=e.redSqr(),d=this.x.redMul(f),c=this.y.redMul(f).redMul(e);return this.curve.point(d,c)},o.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},o.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var f=e.z.redSqr(),d=this.z.redSqr(),c=this.x.redMul(f),t=e.x.redMul(d),a=this.y.redMul(f.redMul(e.z)),r=e.y.redMul(d.redMul(this.z)),b=c.redSub(t),i=a.redSub(r);if(0===b.cmpn(0))return 0!==i.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var n=b.redSqr(),s=n.redMul(b),o=c.redMul(n),u=i.redSqr().redIAdd(s).redISub(o).redISub(o),h=i.redMul(o.redISub(u)).redISub(a.redMul(s)),p=this.z.redMul(e.z).redMul(b);return this.curve.jpoint(u,h,p)},o.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var f=this.z.redSqr(),d=this.x,c=e.x.redMul(f),t=this.y,a=e.y.redMul(f).redMul(this.z),r=d.redSub(c),b=t.redSub(a);if(0===r.cmpn(0))return 0!==b.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var i=r.redSqr(),n=i.redMul(r),s=d.redMul(i),o=b.redSqr().redIAdd(n).redISub(s).redISub(s),u=b.redMul(s.redISub(o)).redISub(t.redMul(n)),h=this.z.redMul(r);return this.curve.jpoint(o,u,h)},o.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var f=this,d=0;d<e;d++)f=f.dbl();return f}var c=this.curve.a,t=this.curve.tinv,a=this.x,r=this.y,b=this.z,i=b.redSqr().redSqr(),n=r.redAdd(r);for(d=0;d<e;d++){var s=a.redSqr(),o=n.redSqr(),u=o.redSqr(),h=s.redAdd(s).redIAdd(s).redIAdd(c.redMul(i)),p=a.redMul(o),l=h.redSqr().redISub(p.redAdd(p)),v=p.redISub(l),y=h.redMul(v);y=y.redIAdd(y).redISub(u);var m=n.redMul(b);d+1<e&&(i=i.redMul(u)),a=l,b=m,n=y}return this.curve.jpoint(a,n.redMul(t),b)},o.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},o.prototype._zeroDbl=function(){var e,f,d;if(this.zOne){var c=this.x.redSqr(),t=this.y.redSqr(),a=t.redSqr(),r=this.x.redAdd(t).redSqr().redISub(c).redISub(a);r=r.redIAdd(r);var b=c.redAdd(c).redIAdd(c),i=b.redSqr().redISub(r).redISub(r),n=a.redIAdd(a);n=(n=n.redIAdd(n)).redIAdd(n),e=i,f=b.redMul(r.redISub(i)).redISub(n),d=this.y.redAdd(this.y)}else{var s=this.x.redSqr(),o=this.y.redSqr(),u=o.redSqr(),h=this.x.redAdd(o).redSqr().redISub(s).redISub(u);h=h.redIAdd(h);var p=s.redAdd(s).redIAdd(s),l=p.redSqr(),v=u.redIAdd(u);v=(v=v.redIAdd(v)).redIAdd(v),e=l.redISub(h).redISub(h),f=p.redMul(h.redISub(e)).redISub(v),d=(d=this.y.redMul(this.z)).redIAdd(d)}return this.curve.jpoint(e,f,d)},o.prototype._threeDbl=function(){var e,f,d;if(this.zOne){var c=this.x.redSqr(),t=this.y.redSqr(),a=t.redSqr(),r=this.x.redAdd(t).redSqr().redISub(c).redISub(a);r=r.redIAdd(r);var b=c.redAdd(c).redIAdd(c).redIAdd(this.curve.a),i=b.redSqr().redISub(r).redISub(r);e=i;var n=a.redIAdd(a);n=(n=n.redIAdd(n)).redIAdd(n),f=b.redMul(r.redISub(i)).redISub(n),d=this.y.redAdd(this.y)}else{var s=this.z.redSqr(),o=this.y.redSqr(),u=this.x.redMul(o),h=this.x.redSub(s).redMul(this.x.redAdd(s));h=h.redAdd(h).redIAdd(h);var p=u.redIAdd(u),l=(p=p.redIAdd(p)).redAdd(p);e=h.redSqr().redISub(l),d=this.y.redAdd(this.z).redSqr().redISub(o).redISub(s);var v=o.redSqr();v=(v=(v=v.redIAdd(v)).redIAdd(v)).redIAdd(v),f=h.redMul(p.redISub(e)).redISub(v)}return this.curve.jpoint(e,f,d)},o.prototype._dbl=function(){var e=this.curve.a,f=this.x,d=this.y,c=this.z,t=c.redSqr().redSqr(),a=f.redSqr(),r=d.redSqr(),b=a.redAdd(a).redIAdd(a).redIAdd(e.redMul(t)),i=f.redAdd(f),n=(i=i.redIAdd(i)).redMul(r),s=b.redSqr().redISub(n.redAdd(n)),o=n.redISub(s),u=r.redSqr();u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var h=b.redMul(o).redISub(u),p=d.redAdd(d).redMul(c);return this.curve.jpoint(s,h,p)},o.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),f=this.y.redSqr(),d=this.z.redSqr(),c=f.redSqr(),t=e.redAdd(e).redIAdd(e),a=t.redSqr(),r=this.x.redAdd(f).redSqr().redISub(e).redISub(c),b=(r=(r=(r=r.redIAdd(r)).redAdd(r).redIAdd(r)).redISub(a)).redSqr(),i=c.redIAdd(c);i=(i=(i=i.redIAdd(i)).redIAdd(i)).redIAdd(i);var n=t.redIAdd(r).redSqr().redISub(a).redISub(b).redISub(i),s=f.redMul(n);s=(s=s.redIAdd(s)).redIAdd(s);var o=this.x.redMul(b).redISub(s);o=(o=o.redIAdd(o)).redIAdd(o);var u=this.y.redMul(n.redMul(i.redISub(n)).redISub(r.redMul(b)));u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var h=this.z.redAdd(r).redSqr().redISub(d).redISub(b);return this.curve.jpoint(o,u,h)},o.prototype.mul=function(e,f){return e=new a(e,f),this.curve._wnafMul(this,e)},o.prototype.eq=function(e){if(\"affine\"===e.type)return this.eq(e.toJ());if(this===e)return!0;var f=this.z.redSqr(),d=e.z.redSqr();if(0!==this.x.redMul(d).redISub(e.x.redMul(f)).cmpn(0))return!1;var c=f.redMul(this.z),t=d.redMul(e.z);return 0===this.y.redMul(t).redISub(e.y.redMul(c)).cmpn(0)},o.prototype.eqXToP=function(e){var f=this.z.redSqr(),d=e.toRed(this.curve.red).redMul(f);if(0===this.x.cmp(d))return!0;for(var c=e.clone(),t=this.curve.redN.redMul(f);;){if(c.iadd(this.curve.n),c.cmp(this.curve.p)>=0)return!1;if(d.redIAdd(t),0===this.x.cmp(d))return!0}},o.prototype.inspect=function(){return this.isInfinity()?\"<EC JPoint Infinity>\":\"<EC JPoint x: \"+this.x.toString(16,2)+\" y: \"+this.y.toString(16,2)+\" z: \"+this.z.toString(16,2)+\">\"},o.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},MzeL:function(e,f,d){\"use strict\";var c=f;c.version=d(\"KAEN\").version,c.utils=d(\"86MQ\"),c.rand=d(\"/ayr\"),c.curve=d(\"QTa/\"),c.curves=d(\"DLvh\"),c.ec=d(\"uagp\"),c.eddsa=d(\"lF1L\")},\"OA+I\":function(e,f,d){\"use strict\";var c=d(\"MzeL\").utils,t=c.assert,a=c.parseBytes,r=c.cachedProperty;function b(e,f){this.eddsa=e,this._secret=a(f.secret),e.isPoint(f.pub)?this._pub=f.pub:this._pubBytes=a(f.pub)}b.fromPublic=function(e,f){return f instanceof b?f:new b(e,{pub:f})},b.fromSecret=function(e,f){return f instanceof b?f:new b(e,{secret:f})},b.prototype.secret=function(){return this._secret},r(b,\"pubBytes\",function(){return this.eddsa.encodePoint(this.pub())}),r(b,\"pub\",function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())}),r(b,\"privBytes\",function(){var e=this.eddsa,f=this.hash(),d=e.encodingLength-1,c=f.slice(0,e.encodingLength);return c[0]&=248,c[d]&=127,c[d]|=64,c}),r(b,\"priv\",function(){return this.eddsa.decodeInt(this.privBytes())}),r(b,\"hash\",function(){return this.eddsa.hash().update(this.secret()).digest()}),r(b,\"messagePrefix\",function(){return this.hash().slice(this.eddsa.encodingLength)}),b.prototype.sign=function(e){return t(this._secret,\"KeyPair can only verify\"),this.eddsa.sign(e,this)},b.prototype.verify=function(e,f){return this.eddsa.verify(e,f,this)},b.prototype.getSecret=function(e){return t(this._secret,\"KeyPair is public only\"),c.encode(this.secret(),e)},b.prototype.getPublic=function(e){return c.encode(this.pubBytes(),e)},e.exports=b},\"Pa+m\":function(e,f,d){\"use strict\";var c=d(\"QTa/\"),t=d(\"MzeL\"),a=d(\"OZ/i\"),r=d(\"P7XM\"),b=c.base,i=t.utils.assert;function n(e){this.twisted=1!=(0|e.a),this.mOneA=this.twisted&&-1==(0|e.a),this.extended=this.mOneA,b.call(this,\"edwards\",e),this.a=new a(e.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new a(e.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new a(e.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),i(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|e.c)}function s(e,f,d,c,t){b.BasePoint.call(this,e,\"projective\"),null===f&&null===d&&null===c?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new a(f,16),this.y=new a(d,16),this.z=c?new a(c,16):this.curve.one,this.t=t&&new a(t,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}r(n,b),e.exports=n,n.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)},n.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)},n.prototype.jpoint=function(e,f,d,c){return this.point(e,f,d,c)},n.prototype.pointFromX=function(e,f){(e=new a(e,16)).red||(e=e.toRed(this.red));var d=e.redSqr(),c=this.c2.redSub(this.a.redMul(d)),t=this.one.redSub(this.c2.redMul(this.d).redMul(d)),r=c.redMul(t.redInvm()),b=r.redSqrt();if(0!==b.redSqr().redSub(r).cmp(this.zero))throw new Error(\"invalid point\");var i=b.fromRed().isOdd();return(f&&!i||!f&&i)&&(b=b.redNeg()),this.point(e,b)},n.prototype.pointFromY=function(e,f){(e=new a(e,16)).red||(e=e.toRed(this.red));var d=e.redSqr(),c=d.redSub(this.c2),t=d.redMul(this.d).redMul(this.c2).redSub(this.a),r=c.redMul(t.redInvm());if(0===r.cmp(this.zero)){if(f)throw new Error(\"invalid point\");return this.point(this.zero,e)}var b=r.redSqrt();if(0!==b.redSqr().redSub(r).cmp(this.zero))throw new Error(\"invalid point\");return b.fromRed().isOdd()!==f&&(b=b.redNeg()),this.point(b,e)},n.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var f=e.x.redSqr(),d=e.y.redSqr(),c=f.redMul(this.a).redAdd(d),t=this.c2.redMul(this.one.redAdd(this.d.redMul(f).redMul(d)));return 0===c.cmp(t)},r(s,b.BasePoint),n.prototype.pointFromJSON=function(e){return s.fromJSON(this,e)},n.prototype.point=function(e,f,d,c){return new s(this,e,f,d,c)},s.fromJSON=function(e,f){return new s(e,f[0],f[1],f[2])},s.prototype.inspect=function(){return this.isInfinity()?\"<EC Point Infinity>\":\"<EC Point x: \"+this.x.fromRed().toString(16,2)+\" y: \"+this.y.fromRed().toString(16,2)+\" z: \"+this.z.fromRed().toString(16,2)+\">\"},s.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},s.prototype._extDbl=function(){var e=this.x.redSqr(),f=this.y.redSqr(),d=this.z.redSqr();d=d.redIAdd(d);var c=this.curve._mulA(e),t=this.x.redAdd(this.y).redSqr().redISub(e).redISub(f),a=c.redAdd(f),r=a.redSub(d),b=c.redSub(f),i=t.redMul(r),n=a.redMul(b),s=t.redMul(b),o=r.redMul(a);return this.curve.point(i,n,o,s)},s.prototype._projDbl=function(){var e,f,d,c=this.x.redAdd(this.y).redSqr(),t=this.x.redSqr(),a=this.y.redSqr();if(this.curve.twisted){var r=(n=this.curve._mulA(t)).redAdd(a);if(this.zOne)e=c.redSub(t).redSub(a).redMul(r.redSub(this.curve.two)),f=r.redMul(n.redSub(a)),d=r.redSqr().redSub(r).redSub(r);else{var b=this.z.redSqr(),i=r.redSub(b).redISub(b);e=c.redSub(t).redISub(a).redMul(i),f=r.redMul(n.redSub(a)),d=r.redMul(i)}}else{var n=t.redAdd(a);b=this.curve._mulC(this.z).redSqr(),i=n.redSub(b).redSub(b);e=this.curve._mulC(c.redISub(n)).redMul(i),f=this.curve._mulC(n).redMul(t.redISub(a)),d=n.redMul(i)}return this.curve.point(e,f,d)},s.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},s.prototype._extAdd=function(e){var f=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),d=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),c=this.t.redMul(this.curve.dd).redMul(e.t),t=this.z.redMul(e.z.redAdd(e.z)),a=d.redSub(f),r=t.redSub(c),b=t.redAdd(c),i=d.redAdd(f),n=a.redMul(r),s=b.redMul(i),o=a.redMul(i),u=r.redMul(b);return this.curve.point(n,s,u,o)},s.prototype._projAdd=function(e){var f,d,c=this.z.redMul(e.z),t=c.redSqr(),a=this.x.redMul(e.x),r=this.y.redMul(e.y),b=this.curve.d.redMul(a).redMul(r),i=t.redSub(b),n=t.redAdd(b),s=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(a).redISub(r),o=c.redMul(i).redMul(s);return this.curve.twisted?(f=c.redMul(n).redMul(r.redSub(this.curve._mulA(a))),d=i.redMul(n)):(f=c.redMul(n).redMul(r.redSub(a)),d=this.curve._mulC(i).redMul(n)),this.curve.point(o,f,d)},s.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)},s.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)},s.prototype.mulAdd=function(e,f,d){return this.curve._wnafMulAdd(1,[this,f],[e,d],2,!1)},s.prototype.jmulAdd=function(e,f,d){return this.curve._wnafMulAdd(1,[this,f],[e,d],2,!0)},s.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this},s.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},s.prototype.getX=function(){return this.normalize(),this.x.fromRed()},s.prototype.getY=function(){return this.normalize(),this.y.fromRed()},s.prototype.eq=function(e){return this===e||0===this.getX().cmp(e.getX())&&0===this.getY().cmp(e.getY())},s.prototype.eqXToP=function(e){var f=e.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(f))return!0;for(var d=e.clone(),c=this.curve.redN.redMul(this.z);;){if(d.iadd(this.curve.n),d.cmp(this.curve.p)>=0)return!1;if(f.redIAdd(c),0===this.x.cmp(f))return!0}},s.prototype.toP=s.prototype.normalize,s.prototype.mixedAdd=s.prototype.add},QJsb:function(e,f){e.exports={doubles:{step:4,points:[[\"e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a\",\"f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821\"],[\"8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\",\"11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"],[\"175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739\",\"d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695\"],[\"363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\"4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9\"],[\"8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c\",\"4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36\"],[\"723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda\",\"96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f\"],[\"eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa\",\"5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999\"],[\"100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0\",\"cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09\"],[\"e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d\",\"9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d\"],[\"feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d\",\"e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088\"],[\"da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1\",\"9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d\"],[\"53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0\",\"5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8\"],[\"8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047\",\"10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a\"],[\"385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862\",\"283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453\"],[\"6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7\",\"7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160\"],[\"3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd\",\"56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0\"],[\"85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83\",\"7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6\"],[\"948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a\",\"53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589\"],[\"6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8\",\"bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17\"],[\"e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d\",\"4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda\"],[\"e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725\",\"7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd\"],[\"213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754\",\"4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2\"],[\"4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c\",\"17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6\"],[\"fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6\",\"6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f\"],[\"76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39\",\"c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01\"],[\"c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891\",\"893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3\"],[\"d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b\",\"febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f\"],[\"b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03\",\"2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7\"],[\"e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d\",\"eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78\"],[\"a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070\",\"7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1\"],[\"90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4\",\"e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150\"],[\"8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da\",\"662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82\"],[\"e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11\",\"1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc\"],[\"8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e\",\"efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b\"],[\"e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41\",\"2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51\"],[\"b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef\",\"67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45\"],[\"d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8\",\"db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120\"],[\"324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d\",\"648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84\"],[\"4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96\",\"35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d\"],[\"9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd\",\"ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d\"],[\"6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5\",\"9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8\"],[\"a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266\",\"40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8\"],[\"7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71\",\"34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac\"],[\"928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac\",\"c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f\"],[\"85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751\",\"1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962\"],[\"ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e\",\"493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907\"],[\"827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241\",\"c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec\"],[\"eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3\",\"be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d\"],[\"e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f\",\"4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414\"],[\"1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19\",\"aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd\"],[\"146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be\",\"b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0\"],[\"fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9\",\"6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811\"],[\"da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2\",\"8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1\"],[\"a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13\",\"7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c\"],[\"174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c\",\"ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73\"],[\"959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba\",\"2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd\"],[\"d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151\",\"e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405\"],[\"64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073\",\"d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589\"],[\"8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458\",\"38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e\"],[\"13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b\",\"69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27\"],[\"bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366\",\"d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1\"],[\"8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa\",\"40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482\"],[\"8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0\",\"620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945\"],[\"dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787\",\"7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573\"],[\"f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e\",\"ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82\"]]},naf:{wnd:7,points:[[\"f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9\",\"388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672\"],[\"2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4\",\"d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6\"],[\"5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc\",\"6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da\"],[\"acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe\",\"cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37\"],[\"774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb\",\"d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b\"],[\"f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8\",\"ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81\"],[\"d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e\",\"581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58\"],[\"defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34\",\"4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77\"],[\"2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c\",\"85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a\"],[\"352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5\",\"321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c\"],[\"2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f\",\"2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67\"],[\"9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714\",\"73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402\"],[\"daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729\",\"a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55\"],[\"c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db\",\"2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482\"],[\"6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4\",\"e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82\"],[\"1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5\",\"b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396\"],[\"605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479\",\"2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49\"],[\"62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d\",\"80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf\"],[\"80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f\",\"1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a\"],[\"7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb\",\"d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7\"],[\"d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9\",\"eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933\"],[\"49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963\",\"758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a\"],[\"77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74\",\"958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6\"],[\"f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530\",\"e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37\"],[\"463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b\",\"5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e\"],[\"f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247\",\"cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6\"],[\"caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1\",\"cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476\"],[\"2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120\",\"4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40\"],[\"7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435\",\"91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61\"],[\"754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18\",\"673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683\"],[\"e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8\",\"59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5\"],[\"186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb\",\"3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b\"],[\"df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f\",\"55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417\"],[\"5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143\",\"efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868\"],[\"290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba\",\"e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a\"],[\"af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45\",\"f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6\"],[\"766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a\",\"744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996\"],[\"59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e\",\"c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e\"],[\"f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8\",\"e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d\"],[\"7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c\",\"30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2\"],[\"948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519\",\"e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e\"],[\"7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab\",\"100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437\"],[\"3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca\",\"ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311\"],[\"d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf\",\"8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4\"],[\"1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610\",\"68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575\"],[\"733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4\",\"f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d\"],[\"15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c\",\"d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d\"],[\"a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940\",\"edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629\"],[\"e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980\",\"a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06\"],[\"311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3\",\"66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374\"],[\"34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf\",\"9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee\"],[\"f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63\",\"4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1\"],[\"d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448\",\"fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b\"],[\"32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf\",\"5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661\"],[\"7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5\",\"8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6\"],[\"ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6\",\"8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e\"],[\"16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5\",\"5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d\"],[\"eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99\",\"f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc\"],[\"78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51\",\"f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4\"],[\"494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5\",\"42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c\"],[\"a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5\",\"204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b\"],[\"c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997\",\"4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913\"],[\"841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881\",\"73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154\"],[\"5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5\",\"39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865\"],[\"36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66\",\"d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc\"],[\"336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726\",\"ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224\"],[\"8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede\",\"6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e\"],[\"1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94\",\"60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6\"],[\"85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31\",\"3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511\"],[\"29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51\",\"b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b\"],[\"a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252\",\"ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2\"],[\"4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5\",\"cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c\"],[\"d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b\",\"6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3\"],[\"ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4\",\"322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d\"],[\"af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f\",\"6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700\"],[\"e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889\",\"2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4\"],[\"591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246\",\"b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196\"],[\"11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984\",\"998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4\"],[\"3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a\",\"b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257\"],[\"cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030\",\"bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13\"],[\"c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197\",\"6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096\"],[\"c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593\",\"c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38\"],[\"a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef\",\"21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f\"],[\"347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38\",\"60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448\"],[\"da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a\",\"49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a\"],[\"c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111\",\"5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4\"],[\"4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502\",\"7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437\"],[\"3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea\",\"be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7\"],[\"cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26\",\"8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d\"],[\"b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986\",\"39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a\"],[\"d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e\",\"62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54\"],[\"48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4\",\"25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77\"],[\"dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda\",\"ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517\"],[\"6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859\",\"cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10\"],[\"e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f\",\"f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125\"],[\"eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c\",\"6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e\"],[\"13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942\",\"fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1\"],[\"ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a\",\"1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2\"],[\"b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80\",\"5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423\"],[\"ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d\",\"438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8\"],[\"8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1\",\"cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758\"],[\"52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63\",\"c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375\"],[\"e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352\",\"6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d\"],[\"7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193\",\"ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec\"],[\"5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00\",\"9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0\"],[\"32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58\",\"ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c\"],[\"e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7\",\"d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4\"],[\"8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8\",\"c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f\"],[\"4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e\",\"67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649\"],[\"3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d\",\"cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826\"],[\"674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b\",\"299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5\"],[\"d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f\",\"f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87\"],[\"30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6\",\"462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b\"],[\"be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297\",\"62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc\"],[\"93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a\",\"7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c\"],[\"b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c\",\"ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f\"],[\"d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52\",\"4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a\"],[\"d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb\",\"bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46\"],[\"463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065\",\"bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f\"],[\"7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917\",\"603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03\"],[\"74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9\",\"cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08\"],[\"30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3\",\"553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8\"],[\"9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57\",\"712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373\"],[\"176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66\",\"ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3\"],[\"75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8\",\"9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8\"],[\"809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721\",\"9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1\"],[\"1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180\",\"4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9\"]]}}},\"QTa/\":function(e,f,d){\"use strict\";var c=f;c.base=d(\"6lN/\"),c.short=d(\"MwBp\"),c.mont=d(\"Z2+3\"),c.edwards=d(\"Pa+m\")},RKMU:function(e,f,d){\"use strict\";var c=d(\"OZ/i\"),t=d(\"MzeL\").utils,a=t.assert,r=t.cachedProperty,b=t.parseBytes;function i(e,f){this.eddsa=e,\"object\"!=typeof f&&(f=b(f)),Array.isArray(f)&&(f={R:f.slice(0,e.encodingLength),S:f.slice(e.encodingLength)}),a(f.R&&f.S,\"Signature without R or S\"),e.isPoint(f.R)&&(this._R=f.R),f.S instanceof c&&(this._S=f.S),this._Rencoded=Array.isArray(f.R)?f.R:f.Rencoded,this._Sencoded=Array.isArray(f.S)?f.S:f.Sencoded}r(i,\"S\",function(){return this.eddsa.decodeInt(this.Sencoded())}),r(i,\"R\",function(){return this.eddsa.decodePoint(this.Rencoded())}),r(i,\"Rencoded\",function(){return this.eddsa.encodePoint(this.R())}),r(i,\"Sencoded\",function(){return this.eddsa.encodeInt(this.S())}),i.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},i.prototype.toHex=function(){return t.encode(this.toBytes(),\"hex\").toUpperCase()},e.exports=i},\"Z2+3\":function(e,f,d){\"use strict\";var c=d(\"QTa/\"),t=d(\"OZ/i\"),a=d(\"P7XM\"),r=c.base,b=d(\"MzeL\").utils;function i(e){r.call(this,\"mont\",e),this.a=new t(e.a,16).toRed(this.red),this.b=new t(e.b,16).toRed(this.red),this.i4=new t(4).toRed(this.red).redInvm(),this.two=new t(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function n(e,f,d){r.BasePoint.call(this,e,\"projective\"),null===f&&null===d?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new t(f,16),this.z=new t(d,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}a(i,r),e.exports=i,i.prototype.validate=function(e){var f=e.normalize().x,d=f.redSqr(),c=d.redMul(f).redAdd(d.redMul(this.a)).redAdd(f);return 0===c.redSqrt().redSqr().cmp(c)},a(n,r.BasePoint),i.prototype.decodePoint=function(e,f){return this.point(b.toArray(e,f),1)},i.prototype.point=function(e,f){return new n(this,e,f)},i.prototype.pointFromJSON=function(e){return n.fromJSON(this,e)},n.prototype.precompute=function(){},n.prototype._encode=function(){return this.getX().toArray(\"be\",this.curve.p.byteLength())},n.fromJSON=function(e,f){return new n(e,f[0],f[1]||e.one)},n.prototype.inspect=function(){return this.isInfinity()?\"<EC Point Infinity>\":\"<EC Point x: \"+this.x.fromRed().toString(16,2)+\" z: \"+this.z.fromRed().toString(16,2)+\">\"},n.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},n.prototype.dbl=function(){var e=this.x.redAdd(this.z).redSqr(),f=this.x.redSub(this.z).redSqr(),d=e.redSub(f),c=e.redMul(f),t=d.redMul(f.redAdd(this.curve.a24.redMul(d)));return this.curve.point(c,t)},n.prototype.add=function(){throw new Error(\"Not supported on Montgomery curve\")},n.prototype.diffAdd=function(e,f){var d=this.x.redAdd(this.z),c=this.x.redSub(this.z),t=e.x.redAdd(e.z),a=e.x.redSub(e.z).redMul(d),r=t.redMul(c),b=f.z.redMul(a.redAdd(r).redSqr()),i=f.x.redMul(a.redISub(r).redSqr());return this.curve.point(b,i)},n.prototype.mul=function(e){for(var f=e.clone(),d=this,c=this.curve.point(null,null),t=[];0!==f.cmpn(0);f.iushrn(1))t.push(f.andln(1));for(var a=t.length-1;a>=0;a--)0===t[a]?(d=d.diffAdd(c,this),c=c.dbl()):(c=d.diffAdd(c,this),d=d.dbl());return c},n.prototype.mulAdd=function(){throw new Error(\"Not supported on Montgomery curve\")},n.prototype.jumlAdd=function(){throw new Error(\"Not supported on Montgomery curve\")},n.prototype.eq=function(e){return 0===this.getX().cmp(e.getX())},n.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},n.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},lF1L:function(e,f,d){\"use strict\";var c=d(\"fZJM\"),t=d(\"MzeL\"),a=t.utils,r=a.assert,b=a.parseBytes,i=d(\"OA+I\"),n=d(\"RKMU\");function s(e){if(r(\"ed25519\"===e,\"only tested with ed25519 so far\"),!(this instanceof s))return new s(e);e=t.curves[e].curve;this.curve=e,this.g=e.g,this.g.precompute(e.n.bitLength()+1),this.pointClass=e.point().constructor,this.encodingLength=Math.ceil(e.n.bitLength()/8),this.hash=c.sha512}e.exports=s,s.prototype.sign=function(e,f){e=b(e);var d=this.keyFromSecret(f),c=this.hashInt(d.messagePrefix(),e),t=this.g.mul(c),a=this.encodePoint(t),r=this.hashInt(a,d.pubBytes(),e).mul(d.priv()),i=c.add(r).umod(this.curve.n);return this.makeSignature({R:t,S:i,Rencoded:a})},s.prototype.verify=function(e,f,d){e=b(e),f=this.makeSignature(f);var c=this.keyFromPublic(d),t=this.hashInt(f.Rencoded(),c.pubBytes(),e),a=this.g.mul(f.S());return f.R().add(c.pub().mul(t)).eq(a)},s.prototype.hashInt=function(){for(var e=this.hash(),f=0;f<arguments.length;f++)e.update(arguments[f]);return a.intFromLE(e.digest()).umod(this.curve.n)},s.prototype.keyFromPublic=function(e){return i.fromPublic(this,e)},s.prototype.keyFromSecret=function(e){return i.fromSecret(this,e)},s.prototype.makeSignature=function(e){return e instanceof n?e:new n(this,e)},s.prototype.encodePoint=function(e){var f=e.getY().toArray(\"le\",this.encodingLength);return f[this.encodingLength-1]|=e.getX().isOdd()?128:0,f},s.prototype.decodePoint=function(e){var f=(e=a.parseBytes(e)).length-1,d=e.slice(0,f).concat(-129&e[f]),c=0!=(128&e[f]),t=a.intFromLE(d);return this.curve.pointFromY(t,c)},s.prototype.encodeInt=function(e){return e.toArray(\"le\",this.encodingLength)},s.prototype.decodeInt=function(e){return a.intFromLE(e)},s.prototype.isPoint=function(e){return e instanceof this.pointClass}},\"tz+M\":function(e,f,d){\"use strict\";var c=d(\"OZ/i\"),t=d(\"MzeL\").utils,a=t.assert;function r(e,f){if(e instanceof r)return e;this._importDER(e,f)||(a(e.r&&e.s,\"Signature without r or s\"),this.r=new c(e.r,16),this.s=new c(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}function b(){this.place=0}function i(e,f){var d=e[f.place++];if(!(128&d))return d;for(var c=15&d,t=0,a=0,r=f.place;a<c;a++,r++)t<<=8,t|=e[r];return f.place=r,t}function n(e){for(var f=0,d=e.length-1;!e[f]&&!(128&e[f+1])&&f<d;)f++;return 0===f?e:e.slice(f)}function s(e,f){if(f<128)e.push(f);else{var d=1+(Math.log(f)/Math.LN2>>>3);for(e.push(128|d);--d;)e.push(f>>>(d<<3)&255);e.push(f)}}e.exports=r,r.prototype._importDER=function(e,f){e=t.toArray(e,f);var d=new b;if(48!==e[d.place++])return!1;if(i(e,d)+d.place!==e.length)return!1;if(2!==e[d.place++])return!1;var a=i(e,d),r=e.slice(d.place,a+d.place);if(d.place+=a,2!==e[d.place++])return!1;var n=i(e,d);if(e.length!==n+d.place)return!1;var s=e.slice(d.place,n+d.place);return 0===r[0]&&128&r[1]&&(r=r.slice(1)),0===s[0]&&128&s[1]&&(s=s.slice(1)),this.r=new c(r),this.s=new c(s),this.recoveryParam=null,!0},r.prototype.toDER=function(e){var f=this.r.toArray(),d=this.s.toArray();for(128&f[0]&&(f=[0].concat(f)),128&d[0]&&(d=[0].concat(d)),f=n(f),d=n(d);!(d[0]||128&d[1]);)d=d.slice(1);var c=[2];s(c,f.length),(c=c.concat(f)).push(2),s(c,d.length);var a=c.concat(d),r=[48];return s(r,a.length),r=r.concat(a),t.encode(r,e)}},uagp:function(e,f,d){\"use strict\";var c=d(\"OZ/i\"),t=d(\"aqI/\"),a=d(\"MzeL\"),r=a.utils.assert,b=d(\"uzSA\"),i=d(\"tz+M\");function n(e){if(!(this instanceof n))return new n(e);\"string\"==typeof e&&(r(a.curves.hasOwnProperty(e),\"Unknown curve \"+e),e=a.curves[e]),e instanceof a.curves.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}e.exports=n,n.prototype.keyPair=function(e){return new b(this,e)},n.prototype.keyFromPrivate=function(e,f){return b.fromPrivate(this,e,f)},n.prototype.keyFromPublic=function(e,f){return b.fromPublic(this,e,f)},n.prototype.genKeyPair=function(e){e||(e={});for(var f=new t({hash:this.hash,pers:e.pers,persEnc:e.persEnc||\"utf8\",entropy:e.entropy||a.rand(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||\"utf8\",nonce:this.n.toArray()}),d=this.n.byteLength(),r=this.n.sub(new c(2));;){var b=new c(f.generate(d));if(!(b.cmp(r)>0))return b.iaddn(1),this.keyFromPrivate(b)}},n.prototype._truncateToN=function(e,f){var d=8*e.byteLength()-this.n.bitLength();return d>0&&(e=e.ushrn(d)),!f&&e.cmp(this.n)>=0?e.sub(this.n):e},n.prototype.sign=function(e,f,d,a){\"object\"==typeof d&&(a=d,d=null),a||(a={}),f=this.keyFromPrivate(f,d),e=this._truncateToN(new c(e,16));for(var r=this.n.byteLength(),b=f.getPrivate().toArray(\"be\",r),n=e.toArray(\"be\",r),s=new t({hash:this.hash,entropy:b,nonce:n,pers:a.pers,persEnc:a.persEnc||\"utf8\"}),o=this.n.sub(new c(1)),u=0;;u++){var h=a.k?a.k(u):new c(s.generate(this.n.byteLength()));if(!((h=this._truncateToN(h,!0)).cmpn(1)<=0||h.cmp(o)>=0)){var p=this.g.mul(h);if(!p.isInfinity()){var l=p.getX(),v=l.umod(this.n);if(0!==v.cmpn(0)){var y=h.invm(this.n).mul(v.mul(f.getPrivate()).iadd(e));if(0!==(y=y.umod(this.n)).cmpn(0)){var m=(p.getY().isOdd()?1:0)|(0!==l.cmp(v)?2:0);return a.canonical&&y.cmp(this.nh)>0&&(y=this.n.sub(y),m^=1),new i({r:v,s:y,recoveryParam:m})}}}}}},n.prototype.verify=function(e,f,d,t){e=this._truncateToN(new c(e,16)),d=this.keyFromPublic(d,t);var a=(f=new i(f,\"hex\")).r,r=f.s;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;if(r.cmpn(1)<0||r.cmp(this.n)>=0)return!1;var b,n=r.invm(this.n),s=n.mul(e).umod(this.n),o=n.mul(a).umod(this.n);return this.curve._maxwellTrick?!(b=this.g.jmulAdd(s,d.getPublic(),o)).isInfinity()&&b.eqXToP(a):!(b=this.g.mulAdd(s,d.getPublic(),o)).isInfinity()&&0===b.getX().umod(this.n).cmp(a)},n.prototype.recoverPubKey=function(e,f,d,t){r((3&d)===d,\"The recovery param is more than two bits\"),f=new i(f,t);var a=this.n,b=new c(e),n=f.r,s=f.s,o=1&d,u=d>>1;if(n.cmp(this.curve.p.umod(this.curve.n))>=0&&u)throw new Error(\"Unable to find sencond key candinate\");n=u?this.curve.pointFromX(n.add(this.curve.n),o):this.curve.pointFromX(n,o);var h=f.r.invm(a),p=a.sub(b).mul(h).umod(a),l=s.mul(h).umod(a);return this.g.mulAdd(p,n,l)},n.prototype.getKeyRecoveryParam=function(e,f,d,c){if(null!==(f=new i(f,c)).recoveryParam)return f.recoveryParam;for(var t=0;t<4;t++){var a;try{a=this.recoverPubKey(e,f,t)}catch(e){continue}if(a.eq(d))return t}throw new Error(\"Unable to find valid recovery factor\")}},uzSA:function(e,f,d){\"use strict\";var c=d(\"OZ/i\"),t=d(\"MzeL\").utils.assert;function a(e,f){this.ec=e,this.priv=null,this.pub=null,f.priv&&this._importPrivate(f.priv,f.privEnc),f.pub&&this._importPublic(f.pub,f.pubEnc)}e.exports=a,a.fromPublic=function(e,f,d){return f instanceof a?f:new a(e,{pub:f,pubEnc:d})},a.fromPrivate=function(e,f,d){return f instanceof a?f:new a(e,{priv:f,privEnc:d})},a.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:\"Invalid public key\"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:\"Public key * N != O\"}:{result:!1,reason:\"Public key is not a point\"}},a.prototype.getPublic=function(e,f){return\"string\"==typeof e&&(f=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),f?this.pub.encode(f,e):this.pub},a.prototype.getPrivate=function(e){return\"hex\"===e?this.priv.toString(16,2):this.priv},a.prototype._importPrivate=function(e,f){this.priv=new c(e,f||16),this.priv=this.priv.umod(this.ec.curve.n)},a.prototype._importPublic=function(e,f){if(e.x||e.y)return\"mont\"===this.ec.curve.type?t(e.x,\"Need x coordinate\"):\"short\"!==this.ec.curve.type&&\"edwards\"!==this.ec.curve.type||t(e.x&&e.y,\"Need both x and y coordinate\"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,f)},a.prototype.derive=function(e){return e.mul(this.priv).getX()},a.prototype.sign=function(e,f,d){return this.ec.sign(e,this,f,d)},a.prototype.verify=function(e,f){return this.ec.verify(e,f,this)},a.prototype.inspect=function(){return\"<Key priv: \"+(this.priv&&this.priv.toString(16,2))+\" pub: \"+(this.pub&&this.pub.inspect())+\" >\"}}}]);","extractedComments":[]}