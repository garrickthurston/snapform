{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\public-encrypt\\\\mgf.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\public-encrypt\\\\privateDecrypt.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\public-encrypt\\\\withPublic.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\public-encrypt\\\\browser.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\public-encrypt\\\\xor.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\public-encrypt\\\\publicEncrypt.js\"],\"names\":[\"createHash\",\"__webpack_require__\",\"Buffer\",\"i2ops\",\"c\",\"out\",\"allocUnsafe\",\"writeUInt32BE\",\"module\",\"exports\",\"seed\",\"len\",\"t\",\"alloc\",\"i\",\"length\",\"concat\",\"update\",\"digest\",\"slice\",\"parseKeys\",\"mgf\",\"xor\",\"BN\",\"crt\",\"withPublic\",\"privateKey\",\"enc\",\"reverse\",\"padding\",\"msg\",\"key\",\"k\",\"modulus\",\"byteLength\",\"cmp\",\"Error\",\"zBuffer\",\"iHash\",\"hLen\",\"maskedSeed\",\"maskedDb\",\"db\",\"a\",\"b\",\"from\",\"dif\",\"Math\",\"min\",\"compare\",\"oaep\",\"p1\",\"status\",\"ps\",\"toString\",\"pkcs1\",\"paddedMsg\",\"toRed\",\"mont\",\"redPow\",\"publicExponent\",\"fromRed\",\"toArray\",\"publicEncrypt\",\"privateDecrypt\",\"privateEncrypt\",\"buf\",\"publicDecrypt\",\"randomBytes\",\"publicKey\",\"mLen\",\"hLen2\",\"dblen\",\"num\",\"cache\",\"cur\",\"nonZero\"],\"mappings\":\"iFAAA,IAAAA,EAAiBC,EAAQ,QACzBC,EAAaD,EAAQ,QAAaC,OAalC,SAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAAI,YAAA,GAEA,OADAD,EAAAE,cAAAH,EAAA,GACAC,EAdAG,EAAAC,QAAA,SAAAC,EAAAC,GAIA,IAHA,IAEAP,EAFAQ,EAAAV,EAAAW,MAAA,GACAC,EAAA,EAEAF,EAAAG,OAAAJ,GACAP,EAAAD,EAAAW,KACAF,EAAAV,EAAAc,OAAA,CAAAJ,EAAAZ,EAAA,QAAAiB,OAAAP,GAAAO,OAAAb,GAAAc,WAEA,OAAAN,EAAAO,MAAA,EAAAR,0BCXA,IAAAS,EAAgBnB,EAAQ,QACxBoB,EAAUpB,EAAQ,QAClBqB,EAAUrB,EAAQ,QAClBsB,EAAStB,EAAQ,QACjBuB,EAAUvB,EAAQ,QAClBD,EAAiBC,EAAQ,QACzBwB,EAAiBxB,EAAQ,QACzBC,EAAaD,EAAQ,QAAaC,OAElCM,EAAAC,QAAA,SAAAiB,EAAAC,EAAAC,GACA,IAAAC,EAEAA,EADAH,EAAAG,QACAH,EAAAG,QACGD,EACH,EAEA,EAGA,IAKAE,EALAC,EAAAX,EAAAM,GACAM,EAAAD,EAAAE,QAAAC,aACA,GAAAP,EAAAZ,OAAAiB,GAAA,IAAAT,EAAAI,GAAAQ,IAAAJ,EAAAE,UAAA,EACA,MAAA,IAAAG,MAAA,oBAIAN,EADAF,EACAH,EAAA,IAAAF,EAAAI,GAAAI,GAEAP,EAAAG,EAAAI,GAEA,IAAAM,EAAAnC,EAAAW,MAAAmB,EAAAF,EAAAf,QAEA,GADAe,EAAA5B,EAAAc,OAAA,CAAAqB,EAAAP,GAAAE,GACA,IAAAH,EACA,OAUA,SAAAE,EAAAD,GACA,IAAAE,EAAAD,EAAAE,QAAAC,aACAI,EAAAtC,EAAA,QAAAiB,OAAAf,EAAAW,MAAA,IAAAK,SACAqB,EAAAD,EAAAvB,OACA,GAAA,IAAAe,EAAA,GACA,MAAA,IAAAM,MAAA,oBAEA,IAAAI,EAAAV,EAAAX,MAAA,EAAAoB,EAAA,GACAE,EAAAX,EAAAX,MAAAoB,EAAA,GACA7B,EAAAY,EAAAkB,EAAAnB,EAAAoB,EAAAF,IACAG,EAAApB,EAAAmB,EAAApB,EAAAX,EAAAsB,EAAAO,EAAA,IACA,GAoCA,SAAAI,EAAAC,GACAD,EAAAzC,EAAA2C,KAAAF,GACAC,EAAA1C,EAAA2C,KAAAD,GACA,IAAAE,EAAA,EACAnC,EAAAgC,EAAA5B,OACA4B,EAAA5B,SAAA6B,EAAA7B,SACA+B,IACAnC,EAAAoC,KAAAC,IAAAL,EAAA5B,OAAA6B,EAAA7B,SAEA,IAAAD,GAAA,EACA,OAAAA,EAAAH,GACAmC,GAAAH,EAAA7B,GAAA8B,EAAA9B,GAEA,OAAAgC,EAjDAG,CAAAX,EAAAI,EAAAvB,MAAA,EAAAoB,IACA,MAAA,IAAAH,MAAA,oBAEA,IAAAtB,EAAAyB,EACA,KAAA,IAAAG,EAAA5B,IACAA,IAEA,GAAA,IAAA4B,EAAA5B,KACA,MAAA,IAAAsB,MAAA,oBAEA,OAAAM,EAAAvB,MAAAL,GA/BAoC,CAAAnB,EAAAD,GACG,GAAA,IAAAD,EACH,OAgCA,SAAAE,EAAAD,EAAAF,GACA,IAAAuB,EAAArB,EAAAX,MAAA,EAAA,GACAL,EAAA,EACAsC,EAAA,EACA,KAAA,IAAAtB,EAAAhB,MACA,GAAAA,GAAAgB,EAAAf,OAAA,CACAqC,IACA,MAGA,IAAAC,EAAAvB,EAAAX,MAAA,EAAAL,EAAA,IAEA,SAAAqC,EAAAG,SAAA,SAAA1B,GAAA,SAAAuB,EAAAG,SAAA,QAAA1B,IACAwB,IAEAC,EAAAtC,OAAA,GACAqC,IAEA,GAAAA,EACA,MAAA,IAAAhB,MAAA,oBAEA,OAAAN,EAAAX,MAAAL,GArDAyC,CAAAxB,EAAAD,EAAAF,GACG,GAAA,IAAAC,EACH,OAAAC,EAEA,MAAA,IAAAM,MAAA,4CCvCA,IAAAb,EAAStB,EAAQ,QACjBC,EAAaD,EAAQ,QAAaC,OAUlCM,EAAAC,QARA,SAAA+C,EAAAzB,GACA,OAAA7B,EAAA2C,KAAAW,EACAC,MAAAlC,EAAAmC,KAAA3B,EAAAE,UACA0B,OAAA,IAAApC,EAAAQ,EAAA6B,iBACAC,UACAC,kCCRArD,EAAAsD,cAAwB9D,EAAQ,QAChCQ,EAAAuD,eAAyB/D,EAAQ,QAEjCQ,EAAAwD,eAAA,SAAAlC,EAAAmC,GACA,OAAAzD,EAAAsD,cAAAhC,EAAAmC,GAAA,IAGAzD,EAAA0D,cAAA,SAAApC,EAAAmC,GACA,OAAAzD,EAAAuD,eAAAjC,EAAAmC,GAAA,wBCRA1D,EAAAC,QAAA,SAAAkC,EAAAC,GAGA,IAFA,IAAAjC,EAAAgC,EAAA5B,OACAD,GAAA,IACAA,EAAAH,GACAgC,EAAA7B,IAAA8B,EAAA9B,GAEA,OAAA6B,yBCNA,IAAAvB,EAAgBnB,EAAQ,QACxBmE,EAAkBnE,EAAQ,QAC1BD,EAAiBC,EAAQ,QACzBoB,EAAUpB,EAAQ,QAClBqB,EAAUrB,EAAQ,QAClBsB,EAAStB,EAAQ,QACjBwB,EAAiBxB,EAAQ,QACzBuB,EAAUvB,EAAQ,QAClBC,EAAaD,EAAQ,QAAaC,OAElCM,EAAAC,QAAA,SAAA4D,EAAAvC,EAAAF,GACA,IAAAC,EAEAA,EADAwC,EAAAxC,QACAwC,EAAAxC,QACGD,EACH,EAEA,EAEA,IACA4B,EADAzB,EAAAX,EAAAiD,GAEA,GAAA,IAAAxC,EACA2B,EAkBA,SAAAzB,EAAAD,GACA,IAAAE,EAAAD,EAAAE,QAAAC,aACAoC,EAAAxC,EAAAf,OACAuB,EAAAtC,EAAA,QAAAiB,OAAAf,EAAAW,MAAA,IAAAK,SACAqB,EAAAD,EAAAvB,OACAwD,EAAA,EAAAhC,EACA,GAAA+B,EAAAtC,EAAAuC,EAAA,EACA,MAAA,IAAAnC,MAAA,oBAEA,IAAAiB,EAAAnD,EAAAW,MAAAmB,EAAAsC,EAAAC,EAAA,GACAC,EAAAxC,EAAAO,EAAA,EACA7B,EAAA0D,EAAA7B,GACAE,EAAAnB,EAAApB,EAAAc,OAAA,CAAAsB,EAAAe,EAAAnD,EAAAW,MAAA,EAAA,GAAAiB,GAAA0C,GAAAnD,EAAAX,EAAA8D,IACAhC,EAAAlB,EAAAZ,EAAAW,EAAAoB,EAAAF,IACA,OAAA,IAAAhB,EAAArB,EAAAc,OAAA,CAAAd,EAAAW,MAAA,GAAA2B,EAAAC,GAAAT,IAhCAkB,CAAAnB,EAAAD,QACG,GAAA,IAAAD,EACH2B,EAgCA,SAAAzB,EAAAD,EAAAF,GACA,IAKAyB,EALAiB,EAAAxC,EAAAf,OACAiB,EAAAD,EAAAE,QAAAC,aACA,GAAAoC,EAAAtC,EAAA,GACA,MAAA,IAAAI,MAAA,oBAIAiB,EADAzB,EACA1B,EAAAW,MAAAmB,EAAAsC,EAAA,EAAA,KAMA,SAAA3D,GACA,IAIA8D,EAJApE,EAAAH,EAAAI,YAAAK,GACAG,EAAA,EACA4D,EAAAN,EAAA,EAAAzD,GACAgE,EAAA,EAEA,KAAA7D,EAAAH,GACAgE,IAAAD,EAAA3D,SACA2D,EAAAN,EAAA,EAAAzD,GACAgE,EAAA,IAEAF,EAAAC,EAAAC,QAEAtE,EAAAS,KAAA2D,GAGA,OAAApE,EApBAuE,CAAA5C,EAAAsC,EAAA,GAEA,OAAA,IAAA/C,EAAArB,EAAAc,OAAA,CAAAd,EAAA2C,KAAA,CAAA,EAAAjB,EAAA,EAAA,IAAAyB,EAAAnD,EAAAW,MAAA,GAAAiB,GAAAE,IA5CAuB,CAAAxB,EAAAD,EAAAF,OACG,CAAA,GAAA,IAAAC,EAMH,MAAA,IAAAO,MAAA,mBAJA,IADAoB,EAAA,IAAAjC,EAAAO,IACAK,IAAAJ,EAAAE,UAAA,EACA,MAAA,IAAAG,MAAA,6BAKA,OAAAR,EACAJ,EAAAgC,EAAAzB,GAEAN,EAAA+B,EAAAzB\",\"sourcesContent\":[\"var createHash = require('create-hash')\\nvar Buffer = require('safe-buffer').Buffer\\n\\nmodule.exports = function (seed, len) {\\n  var t = Buffer.alloc(0)\\n  var i = 0\\n  var c\\n  while (t.length < len) {\\n    c = i2ops(i++)\\n    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])\\n  }\\n  return t.slice(0, len)\\n}\\n\\nfunction i2ops (c) {\\n  var out = Buffer.allocUnsafe(4)\\n  out.writeUInt32BE(c, 0)\\n  return out\\n}\\n\",\"var parseKeys = require('parse-asn1')\\nvar mgf = require('./mgf')\\nvar xor = require('./xor')\\nvar BN = require('bn.js')\\nvar crt = require('browserify-rsa')\\nvar createHash = require('create-hash')\\nvar withPublic = require('./withPublic')\\nvar Buffer = require('safe-buffer').Buffer\\n\\nmodule.exports = function privateDecrypt (privateKey, enc, reverse) {\\n  var padding\\n  if (privateKey.padding) {\\n    padding = privateKey.padding\\n  } else if (reverse) {\\n    padding = 1\\n  } else {\\n    padding = 4\\n  }\\n\\n  var key = parseKeys(privateKey)\\n  var k = key.modulus.byteLength()\\n  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {\\n    throw new Error('decryption error')\\n  }\\n  var msg\\n  if (reverse) {\\n    msg = withPublic(new BN(enc), key)\\n  } else {\\n    msg = crt(enc, key)\\n  }\\n  var zBuffer = Buffer.alloc(k - msg.length)\\n  msg = Buffer.concat([zBuffer, msg], k)\\n  if (padding === 4) {\\n    return oaep(key, msg)\\n  } else if (padding === 1) {\\n    return pkcs1(key, msg, reverse)\\n  } else if (padding === 3) {\\n    return msg\\n  } else {\\n    throw new Error('unknown padding')\\n  }\\n}\\n\\nfunction oaep (key, msg) {\\n  var k = key.modulus.byteLength()\\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\\n  var hLen = iHash.length\\n  if (msg[0] !== 0) {\\n    throw new Error('decryption error')\\n  }\\n  var maskedSeed = msg.slice(1, hLen + 1)\\n  var maskedDb = msg.slice(hLen + 1)\\n  var seed = xor(maskedSeed, mgf(maskedDb, hLen))\\n  var db = xor(maskedDb, mgf(seed, k - hLen - 1))\\n  if (compare(iHash, db.slice(0, hLen))) {\\n    throw new Error('decryption error')\\n  }\\n  var i = hLen\\n  while (db[i] === 0) {\\n    i++\\n  }\\n  if (db[i++] !== 1) {\\n    throw new Error('decryption error')\\n  }\\n  return db.slice(i)\\n}\\n\\nfunction pkcs1 (key, msg, reverse) {\\n  var p1 = msg.slice(0, 2)\\n  var i = 2\\n  var status = 0\\n  while (msg[i++] !== 0) {\\n    if (i >= msg.length) {\\n      status++\\n      break\\n    }\\n  }\\n  var ps = msg.slice(2, i - 1)\\n\\n  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {\\n    status++\\n  }\\n  if (ps.length < 8) {\\n    status++\\n  }\\n  if (status) {\\n    throw new Error('decryption error')\\n  }\\n  return msg.slice(i)\\n}\\nfunction compare (a, b) {\\n  a = Buffer.from(a)\\n  b = Buffer.from(b)\\n  var dif = 0\\n  var len = a.length\\n  if (a.length !== b.length) {\\n    dif++\\n    len = Math.min(a.length, b.length)\\n  }\\n  var i = -1\\n  while (++i < len) {\\n    dif += (a[i] ^ b[i])\\n  }\\n  return dif\\n}\\n\",\"var BN = require('bn.js')\\nvar Buffer = require('safe-buffer').Buffer\\n\\nfunction withPublic (paddedMsg, key) {\\n  return Buffer.from(paddedMsg\\n    .toRed(BN.mont(key.modulus))\\n    .redPow(new BN(key.publicExponent))\\n    .fromRed()\\n    .toArray())\\n}\\n\\nmodule.exports = withPublic\\n\",\"exports.publicEncrypt = require('./publicEncrypt')\\nexports.privateDecrypt = require('./privateDecrypt')\\n\\nexports.privateEncrypt = function privateEncrypt (key, buf) {\\n  return exports.publicEncrypt(key, buf, true)\\n}\\n\\nexports.publicDecrypt = function publicDecrypt (key, buf) {\\n  return exports.privateDecrypt(key, buf, true)\\n}\\n\",\"module.exports = function xor (a, b) {\\n  var len = a.length\\n  var i = -1\\n  while (++i < len) {\\n    a[i] ^= b[i]\\n  }\\n  return a\\n}\\n\",\"var parseKeys = require('parse-asn1')\\nvar randomBytes = require('randombytes')\\nvar createHash = require('create-hash')\\nvar mgf = require('./mgf')\\nvar xor = require('./xor')\\nvar BN = require('bn.js')\\nvar withPublic = require('./withPublic')\\nvar crt = require('browserify-rsa')\\nvar Buffer = require('safe-buffer').Buffer\\n\\nmodule.exports = function publicEncrypt (publicKey, msg, reverse) {\\n  var padding\\n  if (publicKey.padding) {\\n    padding = publicKey.padding\\n  } else if (reverse) {\\n    padding = 1\\n  } else {\\n    padding = 4\\n  }\\n  var key = parseKeys(publicKey)\\n  var paddedMsg\\n  if (padding === 4) {\\n    paddedMsg = oaep(key, msg)\\n  } else if (padding === 1) {\\n    paddedMsg = pkcs1(key, msg, reverse)\\n  } else if (padding === 3) {\\n    paddedMsg = new BN(msg)\\n    if (paddedMsg.cmp(key.modulus) >= 0) {\\n      throw new Error('data too long for modulus')\\n    }\\n  } else {\\n    throw new Error('unknown padding')\\n  }\\n  if (reverse) {\\n    return crt(paddedMsg, key)\\n  } else {\\n    return withPublic(paddedMsg, key)\\n  }\\n}\\n\\nfunction oaep (key, msg) {\\n  var k = key.modulus.byteLength()\\n  var mLen = msg.length\\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\\n  var hLen = iHash.length\\n  var hLen2 = 2 * hLen\\n  if (mLen > k - hLen2 - 2) {\\n    throw new Error('message too long')\\n  }\\n  var ps = Buffer.alloc(k - mLen - hLen2 - 2)\\n  var dblen = k - hLen - 1\\n  var seed = randomBytes(hLen)\\n  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))\\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen))\\n  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))\\n}\\nfunction pkcs1 (key, msg, reverse) {\\n  var mLen = msg.length\\n  var k = key.modulus.byteLength()\\n  if (mLen > k - 11) {\\n    throw new Error('message too long')\\n  }\\n  var ps\\n  if (reverse) {\\n    ps = Buffer.alloc(k - mLen - 3, 0xff)\\n  } else {\\n    ps = nonZero(k - mLen - 3)\\n  }\\n  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))\\n}\\nfunction nonZero (len) {\\n  var out = Buffer.allocUnsafe(len)\\n  var i = 0\\n  var cache = randomBytes(len * 2)\\n  var cur = 0\\n  var num\\n  while (i < len) {\\n    if (cur === cache.length) {\\n      cache = randomBytes(len * 2)\\n      cur = 0\\n    }\\n    num = cache[cur++]\\n    if (num) {\\n      out[i++] = num\\n    }\\n  }\\n  return out\\n}\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{\"9GDS\":function(r,n,e){var t=e(\"mObS\"),o=e(\"hwdV\").Buffer;function i(r){var n=o.allocUnsafe(4);return n.writeUInt32BE(r,0),n}r.exports=function(r,n){for(var e,u=o.alloc(0),c=0;u.length<n;)e=i(c++),u=o.concat([u,t(\"sha1\").update(r).update(e).digest()]);return u.slice(0,n)}},DyzK:function(r,n,e){var t=e(\"Ku4m\"),o=e(\"9GDS\"),i=e(\"g9U9\"),u=e(\"OZ/i\"),c=e(\"qVij\"),a=e(\"mObS\"),l=e(\"UpF+\"),f=e(\"hwdV\").Buffer;r.exports=function(r,n,e){var p;p=r.padding?r.padding:e?1:4;var d,h=t(r),w=h.modulus.byteLength();if(n.length>w||new u(n).cmp(h.modulus)>=0)throw new Error(\"decryption error\");d=e?l(new u(n),h):c(n,h);var g=f.alloc(w-d.length);if(d=f.concat([g,d],w),4===p)return function(r,n){var e=r.modulus.byteLength(),t=a(\"sha1\").update(f.alloc(0)).digest(),u=t.length;if(0!==n[0])throw new Error(\"decryption error\");var c=n.slice(1,u+1),l=n.slice(u+1),p=i(c,o(l,u)),d=i(l,o(p,e-u-1));if(function(r,n){r=f.from(r),n=f.from(n);var e=0,t=r.length;r.length!==n.length&&(e++,t=Math.min(r.length,n.length));var o=-1;for(;++o<t;)e+=r[o]^n[o];return e}(t,d.slice(0,u)))throw new Error(\"decryption error\");var h=u;for(;0===d[h];)h++;if(1!==d[h++])throw new Error(\"decryption error\");return d.slice(h)}(h,d);if(1===p)return function(r,n,e){var t=n.slice(0,2),o=2,i=0;for(;0!==n[o++];)if(o>=n.length){i++;break}var u=n.slice(2,o-1);(\"0002\"!==t.toString(\"hex\")&&!e||\"0001\"!==t.toString(\"hex\")&&e)&&i++;u.length<8&&i++;if(i)throw new Error(\"decryption error\");return n.slice(o)}(0,d,e);if(3===p)return d;throw new Error(\"unknown padding\")}},\"UpF+\":function(r,n,e){var t=e(\"OZ/i\"),o=e(\"hwdV\").Buffer;r.exports=function(r,n){return o.from(r.toRed(t.mont(n.modulus)).redPow(new t(n.publicExponent)).fromRed().toArray())}},ZEK9:function(r,n,e){n.publicEncrypt=e(\"rSVQ\"),n.privateDecrypt=e(\"DyzK\"),n.privateEncrypt=function(r,e){return n.publicEncrypt(r,e,!0)},n.publicDecrypt=function(r,e){return n.privateDecrypt(r,e,!0)}},g9U9:function(r,n){r.exports=function(r,n){for(var e=r.length,t=-1;++t<e;)r[t]^=n[t];return r}},rSVQ:function(r,n,e){var t=e(\"Ku4m\"),o=e(\"Edxu\"),i=e(\"mObS\"),u=e(\"9GDS\"),c=e(\"g9U9\"),a=e(\"OZ/i\"),l=e(\"UpF+\"),f=e(\"qVij\"),p=e(\"hwdV\").Buffer;r.exports=function(r,n,e){var d;d=r.padding?r.padding:e?1:4;var h,w=t(r);if(4===d)h=function(r,n){var e=r.modulus.byteLength(),t=n.length,l=i(\"sha1\").update(p.alloc(0)).digest(),f=l.length,d=2*f;if(t>e-d-2)throw new Error(\"message too long\");var h=p.alloc(e-t-d-2),w=e-f-1,g=o(f),s=c(p.concat([l,h,p.alloc(1,1),n],w),u(g,w)),v=c(g,u(s,f));return new a(p.concat([p.alloc(1),v,s],e))}(w,n);else if(1===d)h=function(r,n,e){var t,i=n.length,u=r.modulus.byteLength();if(i>u-11)throw new Error(\"message too long\");t=e?p.alloc(u-i-3,255):function(r){var n,e=p.allocUnsafe(r),t=0,i=o(2*r),u=0;for(;t<r;)u===i.length&&(i=o(2*r),u=0),(n=i[u++])&&(e[t++]=n);return e}(u-i-3);return new a(p.concat([p.from([0,e?1:2]),t,p.alloc(1),n],u))}(w,n,e);else{if(3!==d)throw new Error(\"unknown padding\");if((h=new a(n)).cmp(w.modulus)>=0)throw new Error(\"data too long for modulus\")}return e?f(h,w):l(h,w)}}}]);","extractedComments":[]}