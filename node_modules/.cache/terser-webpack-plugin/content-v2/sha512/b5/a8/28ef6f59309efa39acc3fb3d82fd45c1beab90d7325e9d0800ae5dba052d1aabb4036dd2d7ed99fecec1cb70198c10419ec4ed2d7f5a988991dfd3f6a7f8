{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\parse-asn1\\\\index.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\parse-asn1\\\\asn1.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\parse-asn1\\\\fixProc.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\parse-asn1\\\\certificate.js\"],\"names\":[\"asn1\",\"__webpack_require__\",\"aesid\",\"fixProc\",\"ciphers\",\"compat\",\"Buffer\",\"parseKeys\",\"buffer\",\"password\",\"isBuffer\",\"passphrase\",\"key\",\"from\",\"subtype\",\"ndata\",\"stripped\",\"type\",\"tag\",\"data\",\"certificate\",\"decode\",\"tbsCertificate\",\"subjectPublicKeyInfo\",\"PublicKey\",\"algorithm\",\"join\",\"RSAPublicKey\",\"subjectPublicKey\",\"subjectPrivateKey\",\"params\",\"pub_key\",\"DSAparam\",\"Error\",\"salt\",\"decrypt\",\"kde\",\"kdeparams\",\"iters\",\"parseInt\",\"toString\",\"algo\",\"cipher\",\"iv\",\"cipherText\",\"keylen\",\"split\",\"pbkdf2Sync\",\"createDecipheriv\",\"out\",\"push\",\"update\",\"final\",\"concat\",\"EncryptedPrivateKey\",\"PrivateKey\",\"RSAPrivateKey\",\"curve\",\"privateKey\",\"ECPrivateKey\",\"priv_key\",\"DSAPrivateKey\",\"parameters\",\"value\",\"module\",\"exports\",\"signature\",\"define\",\"this\",\"seq\",\"obj\",\"int\",\"use\",\"AlgorithmIdentifier\",\"bitstr\",\"objid\",\"null_\",\"optional\",\"PrivateKeyInfo\",\"octstr\",\"EncryptedPrivateKeyInfo\",\"explicit\",\"ECParameters\",\"choice\",\"namedCurve\",\"findProc\",\"startRegex\",\"fullRegex\",\"evp\",\"okey\",\"decrypted\",\"match\",\"suite\",\"replace\",\"cipherKey\",\"slice\",\"match2\",\"asn\",\"Time\",\"utcTime\",\"utctime\",\"generalTime\",\"gentime\",\"AttributeTypeValue\",\"any\",\"SubjectPublicKeyInfo\",\"RelativeDistinguishedName\",\"setof\",\"RDNSequence\",\"seqof\",\"Name\",\"rdnSequence\",\"Validity\",\"Extension\",\"bool\",\"def\",\"TBSCertificate\",\"implicit\",\"X509Certificate\"],\"mappings\":\"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\",\"sourcesContent\":[\"var asn1 = require('./asn1')\\nvar aesid = require('./aesid.json')\\nvar fixProc = require('./fixProc')\\nvar ciphers = require('browserify-aes')\\nvar compat = require('pbkdf2')\\nvar Buffer = require('safe-buffer').Buffer\\nmodule.exports = parseKeys\\n\\nfunction parseKeys (buffer) {\\n  var password\\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {\\n    password = buffer.passphrase\\n    buffer = buffer.key\\n  }\\n  if (typeof buffer === 'string') {\\n    buffer = Buffer.from(buffer)\\n  }\\n\\n  var stripped = fixProc(buffer, password)\\n\\n  var type = stripped.tag\\n  var data = stripped.data\\n  var subtype, ndata\\n  switch (type) {\\n    case 'CERTIFICATE':\\n      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo\\n      // falls through\\n    case 'PUBLIC KEY':\\n      if (!ndata) {\\n        ndata = asn1.PublicKey.decode(data, 'der')\\n      }\\n      subtype = ndata.algorithm.algorithm.join('.')\\n      switch (subtype) {\\n        case '1.2.840.113549.1.1.1':\\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')\\n        case '1.2.840.10045.2.1':\\n          ndata.subjectPrivateKey = ndata.subjectPublicKey\\n          return {\\n            type: 'ec',\\n            data: ndata\\n          }\\n        case '1.2.840.10040.4.1':\\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')\\n          return {\\n            type: 'dsa',\\n            data: ndata.algorithm.params\\n          }\\n        default: throw new Error('unknown key id ' + subtype)\\n      }\\n      throw new Error('unknown key type ' + type)\\n    case 'ENCRYPTED PRIVATE KEY':\\n      data = asn1.EncryptedPrivateKey.decode(data, 'der')\\n      data = decrypt(data, password)\\n      // falls through\\n    case 'PRIVATE KEY':\\n      ndata = asn1.PrivateKey.decode(data, 'der')\\n      subtype = ndata.algorithm.algorithm.join('.')\\n      switch (subtype) {\\n        case '1.2.840.113549.1.1.1':\\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')\\n        case '1.2.840.10045.2.1':\\n          return {\\n            curve: ndata.algorithm.curve,\\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\\n          }\\n        case '1.2.840.10040.4.1':\\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')\\n          return {\\n            type: 'dsa',\\n            params: ndata.algorithm.params\\n          }\\n        default: throw new Error('unknown key id ' + subtype)\\n      }\\n      throw new Error('unknown key type ' + type)\\n    case 'RSA PUBLIC KEY':\\n      return asn1.RSAPublicKey.decode(data, 'der')\\n    case 'RSA PRIVATE KEY':\\n      return asn1.RSAPrivateKey.decode(data, 'der')\\n    case 'DSA PRIVATE KEY':\\n      return {\\n        type: 'dsa',\\n        params: asn1.DSAPrivateKey.decode(data, 'der')\\n      }\\n    case 'EC PRIVATE KEY':\\n      data = asn1.ECPrivateKey.decode(data, 'der')\\n      return {\\n        curve: data.parameters.value,\\n        privateKey: data.privateKey\\n      }\\n    default: throw new Error('unknown key type ' + type)\\n  }\\n}\\nparseKeys.signature = asn1.signature\\nfunction decrypt (data, password) {\\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt\\n  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)\\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]\\n  var iv = data.algorithm.decrypt.cipher.iv\\n  var cipherText = data.subjectPrivateKey\\n  var keylen = parseInt(algo.split('-')[1], 10) / 8\\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')\\n  var cipher = ciphers.createDecipheriv(algo, key, iv)\\n  var out = []\\n  out.push(cipher.update(cipherText))\\n  out.push(cipher.final())\\n  return Buffer.concat(out)\\n}\\n\",\"// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js\\n// Fedor, you are amazing.\\n'use strict'\\n\\nvar asn1 = require('asn1.js')\\n\\nexports.certificate = require('./certificate')\\n\\nvar RSAPrivateKey = asn1.define('RSAPrivateKey', function () {\\n  this.seq().obj(\\n    this.key('version').int(),\\n    this.key('modulus').int(),\\n    this.key('publicExponent').int(),\\n    this.key('privateExponent').int(),\\n    this.key('prime1').int(),\\n    this.key('prime2').int(),\\n    this.key('exponent1').int(),\\n    this.key('exponent2').int(),\\n    this.key('coefficient').int()\\n  )\\n})\\nexports.RSAPrivateKey = RSAPrivateKey\\n\\nvar RSAPublicKey = asn1.define('RSAPublicKey', function () {\\n  this.seq().obj(\\n    this.key('modulus').int(),\\n    this.key('publicExponent').int()\\n  )\\n})\\nexports.RSAPublicKey = RSAPublicKey\\n\\nvar PublicKey = asn1.define('SubjectPublicKeyInfo', function () {\\n  this.seq().obj(\\n    this.key('algorithm').use(AlgorithmIdentifier),\\n    this.key('subjectPublicKey').bitstr()\\n  )\\n})\\nexports.PublicKey = PublicKey\\n\\nvar AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {\\n  this.seq().obj(\\n    this.key('algorithm').objid(),\\n    this.key('none').null_().optional(),\\n    this.key('curve').objid().optional(),\\n    this.key('params').seq().obj(\\n      this.key('p').int(),\\n      this.key('q').int(),\\n      this.key('g').int()\\n    ).optional()\\n  )\\n})\\n\\nvar PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {\\n  this.seq().obj(\\n    this.key('version').int(),\\n    this.key('algorithm').use(AlgorithmIdentifier),\\n    this.key('subjectPrivateKey').octstr()\\n  )\\n})\\nexports.PrivateKey = PrivateKeyInfo\\nvar EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {\\n  this.seq().obj(\\n    this.key('algorithm').seq().obj(\\n      this.key('id').objid(),\\n      this.key('decrypt').seq().obj(\\n        this.key('kde').seq().obj(\\n          this.key('id').objid(),\\n          this.key('kdeparams').seq().obj(\\n            this.key('salt').octstr(),\\n            this.key('iters').int()\\n          )\\n        ),\\n        this.key('cipher').seq().obj(\\n          this.key('algo').objid(),\\n          this.key('iv').octstr()\\n        )\\n      )\\n    ),\\n    this.key('subjectPrivateKey').octstr()\\n  )\\n})\\n\\nexports.EncryptedPrivateKey = EncryptedPrivateKeyInfo\\n\\nvar DSAPrivateKey = asn1.define('DSAPrivateKey', function () {\\n  this.seq().obj(\\n    this.key('version').int(),\\n    this.key('p').int(),\\n    this.key('q').int(),\\n    this.key('g').int(),\\n    this.key('pub_key').int(),\\n    this.key('priv_key').int()\\n  )\\n})\\nexports.DSAPrivateKey = DSAPrivateKey\\n\\nexports.DSAparam = asn1.define('DSAparam', function () {\\n  this.int()\\n})\\n\\nvar ECPrivateKey = asn1.define('ECPrivateKey', function () {\\n  this.seq().obj(\\n    this.key('version').int(),\\n    this.key('privateKey').octstr(),\\n    this.key('parameters').optional().explicit(0).use(ECParameters),\\n    this.key('publicKey').optional().explicit(1).bitstr()\\n  )\\n})\\nexports.ECPrivateKey = ECPrivateKey\\n\\nvar ECParameters = asn1.define('ECParameters', function () {\\n  this.choice({\\n    namedCurve: this.objid()\\n  })\\n})\\n\\nexports.signature = asn1.define('signature', function () {\\n  this.seq().obj(\\n    this.key('r').int(),\\n    this.key('s').int()\\n  )\\n})\\n\",\"// adapted from https://github.com/apatil/pemstrip\\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\\\n\\\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\\\n\\\\r]+([0-9A-z\\\\n\\\\r\\\\+\\\\/\\\\=]+)[\\\\n\\\\r]+/m\\nvar startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m\\nvar fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\\\\n\\\\r\\\\+\\\\/\\\\=]+)-----END \\\\1-----$/m\\nvar evp = require('evp_bytestokey')\\nvar ciphers = require('browserify-aes')\\nmodule.exports = function (okey, password) {\\n  var key = okey.toString()\\n  var match = key.match(findProc)\\n  var decrypted\\n  if (!match) {\\n    var match2 = key.match(fullRegex)\\n    decrypted = new Buffer(match2[2].replace(/[\\\\r\\\\n]/g, ''), 'base64')\\n  } else {\\n    var suite = 'aes' + match[1]\\n    var iv = new Buffer(match[2], 'hex')\\n    var cipherText = new Buffer(match[3].replace(/[\\\\r\\\\n]/g, ''), 'base64')\\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\\n    var out = []\\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\\n    out.push(cipher.update(cipherText))\\n    out.push(cipher.final())\\n    decrypted = Buffer.concat(out)\\n  }\\n  var tag = key.match(startRegex)[1]\\n  return {\\n    tag: tag,\\n    data: decrypted\\n  }\\n}\\n\",\"// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js\\n// thanks to @Rantanen\\n\\n'use strict'\\n\\nvar asn = require('asn1.js')\\n\\nvar Time = asn.define('Time', function () {\\n  this.choice({\\n    utcTime: this.utctime(),\\n    generalTime: this.gentime()\\n  })\\n})\\n\\nvar AttributeTypeValue = asn.define('AttributeTypeValue', function () {\\n  this.seq().obj(\\n    this.key('type').objid(),\\n    this.key('value').any()\\n  )\\n})\\n\\nvar AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {\\n  this.seq().obj(\\n    this.key('algorithm').objid(),\\n    this.key('parameters').optional(),\\n    this.key('curve').objid().optional()\\n  )\\n})\\n\\nvar SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {\\n  this.seq().obj(\\n    this.key('algorithm').use(AlgorithmIdentifier),\\n    this.key('subjectPublicKey').bitstr()\\n  )\\n})\\n\\nvar RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {\\n  this.setof(AttributeTypeValue)\\n})\\n\\nvar RDNSequence = asn.define('RDNSequence', function () {\\n  this.seqof(RelativeDistinguishedName)\\n})\\n\\nvar Name = asn.define('Name', function () {\\n  this.choice({\\n    rdnSequence: this.use(RDNSequence)\\n  })\\n})\\n\\nvar Validity = asn.define('Validity', function () {\\n  this.seq().obj(\\n    this.key('notBefore').use(Time),\\n    this.key('notAfter').use(Time)\\n  )\\n})\\n\\nvar Extension = asn.define('Extension', function () {\\n  this.seq().obj(\\n    this.key('extnID').objid(),\\n    this.key('critical').bool().def(false),\\n    this.key('extnValue').octstr()\\n  )\\n})\\n\\nvar TBSCertificate = asn.define('TBSCertificate', function () {\\n  this.seq().obj(\\n    this.key('version').explicit(0).int().optional(),\\n    this.key('serialNumber').int(),\\n    this.key('signature').use(AlgorithmIdentifier),\\n    this.key('issuer').use(Name),\\n    this.key('validity').use(Validity),\\n    this.key('subject').use(Name),\\n    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),\\n    this.key('issuerUniqueID').implicit(1).bitstr().optional(),\\n    this.key('subjectUniqueID').implicit(2).bitstr().optional(),\\n    this.key('extensions').explicit(3).seqof(Extension).optional()\\n  )\\n})\\n\\nvar X509Certificate = asn.define('X509Certificate', function () {\\n  this.seq().obj(\\n    this.key('tbsCertificate').use(TBSCertificate),\\n    this.key('signatureAlgorithm').use(AlgorithmIdentifier),\\n    this.key('signatureValue').bitstr()\\n  )\\n})\\n\\nmodule.exports = X509Certificate\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{\"1w4i\":function(e){e.exports={\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}},Ku4m:function(e,t,i){var s=i(\"QRH4\"),r=i(\"1w4i\"),n=i(\"TdD3\"),a=i(\"/ab2\"),o=i(\"oJl4\"),c=i(\"hwdV\").Buffer;function y(e){var t;\"object\"!=typeof e||c.isBuffer(e)||(t=e.passphrase,e=e.key),\"string\"==typeof e&&(e=c.from(e));var i,y,h=n(e,t),u=h.tag,d=h.data;switch(u){case\"CERTIFICATE\":y=s.certificate.decode(d,\"der\").tbsCertificate.subjectPublicKeyInfo;case\"PUBLIC KEY\":switch(y||(y=s.PublicKey.decode(d,\"der\")),i=y.algorithm.algorithm.join(\".\")){case\"1.2.840.113549.1.1.1\":return s.RSAPublicKey.decode(y.subjectPublicKey.data,\"der\");case\"1.2.840.10045.2.1\":return y.subjectPrivateKey=y.subjectPublicKey,{type:\"ec\",data:y};case\"1.2.840.10040.4.1\":return y.algorithm.params.pub_key=s.DSAparam.decode(y.subjectPublicKey.data,\"der\"),{type:\"dsa\",data:y.algorithm.params};default:throw new Error(\"unknown key id \"+i)}throw new Error(\"unknown key type \"+u);case\"ENCRYPTED PRIVATE KEY\":d=function(e,t){var i=e.algorithm.decrypt.kde.kdeparams.salt,s=parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(),10),n=r[e.algorithm.decrypt.cipher.algo.join(\".\")],y=e.algorithm.decrypt.cipher.iv,h=e.subjectPrivateKey,u=parseInt(n.split(\"-\")[1],10)/8,d=o.pbkdf2Sync(t,i,s,u,\"sha1\"),p=a.createDecipheriv(n,d,y),b=[];return b.push(p.update(h)),b.push(p.final()),c.concat(b)}(d=s.EncryptedPrivateKey.decode(d,\"der\"),t);case\"PRIVATE KEY\":switch(i=(y=s.PrivateKey.decode(d,\"der\")).algorithm.algorithm.join(\".\")){case\"1.2.840.113549.1.1.1\":return s.RSAPrivateKey.decode(y.subjectPrivateKey,\"der\");case\"1.2.840.10045.2.1\":return{curve:y.algorithm.curve,privateKey:s.ECPrivateKey.decode(y.subjectPrivateKey,\"der\").privateKey};case\"1.2.840.10040.4.1\":return y.algorithm.params.priv_key=s.DSAparam.decode(y.subjectPrivateKey,\"der\"),{type:\"dsa\",params:y.algorithm.params};default:throw new Error(\"unknown key id \"+i)}throw new Error(\"unknown key type \"+u);case\"RSA PUBLIC KEY\":return s.RSAPublicKey.decode(d,\"der\");case\"RSA PRIVATE KEY\":return s.RSAPrivateKey.decode(d,\"der\");case\"DSA PRIVATE KEY\":return{type:\"dsa\",params:s.DSAPrivateKey.decode(d,\"der\")};case\"EC PRIVATE KEY\":return{curve:(d=s.ECPrivateKey.decode(d,\"der\")).parameters.value,privateKey:d.privateKey};default:throw new Error(\"unknown key type \"+u)}}e.exports=y,y.signature=s.signature},QRH4:function(e,t,i){\"use strict\";var s=i(\"f3pb\");t.certificate=i(\"VrUr\");var r=s.define(\"RSAPrivateKey\",function(){this.seq().obj(this.key(\"version\").int(),this.key(\"modulus\").int(),this.key(\"publicExponent\").int(),this.key(\"privateExponent\").int(),this.key(\"prime1\").int(),this.key(\"prime2\").int(),this.key(\"exponent1\").int(),this.key(\"exponent2\").int(),this.key(\"coefficient\").int())});t.RSAPrivateKey=r;var n=s.define(\"RSAPublicKey\",function(){this.seq().obj(this.key(\"modulus\").int(),this.key(\"publicExponent\").int())});t.RSAPublicKey=n;var a=s.define(\"SubjectPublicKeyInfo\",function(){this.seq().obj(this.key(\"algorithm\").use(o),this.key(\"subjectPublicKey\").bitstr())});t.PublicKey=a;var o=s.define(\"AlgorithmIdentifier\",function(){this.seq().obj(this.key(\"algorithm\").objid(),this.key(\"none\").null_().optional(),this.key(\"curve\").objid().optional(),this.key(\"params\").seq().obj(this.key(\"p\").int(),this.key(\"q\").int(),this.key(\"g\").int()).optional())}),c=s.define(\"PrivateKeyInfo\",function(){this.seq().obj(this.key(\"version\").int(),this.key(\"algorithm\").use(o),this.key(\"subjectPrivateKey\").octstr())});t.PrivateKey=c;var y=s.define(\"EncryptedPrivateKeyInfo\",function(){this.seq().obj(this.key(\"algorithm\").seq().obj(this.key(\"id\").objid(),this.key(\"decrypt\").seq().obj(this.key(\"kde\").seq().obj(this.key(\"id\").objid(),this.key(\"kdeparams\").seq().obj(this.key(\"salt\").octstr(),this.key(\"iters\").int())),this.key(\"cipher\").seq().obj(this.key(\"algo\").objid(),this.key(\"iv\").octstr()))),this.key(\"subjectPrivateKey\").octstr())});t.EncryptedPrivateKey=y;var h=s.define(\"DSAPrivateKey\",function(){this.seq().obj(this.key(\"version\").int(),this.key(\"p\").int(),this.key(\"q\").int(),this.key(\"g\").int(),this.key(\"pub_key\").int(),this.key(\"priv_key\").int())});t.DSAPrivateKey=h,t.DSAparam=s.define(\"DSAparam\",function(){this.int()});var u=s.define(\"ECPrivateKey\",function(){this.seq().obj(this.key(\"version\").int(),this.key(\"privateKey\").octstr(),this.key(\"parameters\").optional().explicit(0).use(d),this.key(\"publicKey\").optional().explicit(1).bitstr())});t.ECPrivateKey=u;var d=s.define(\"ECParameters\",function(){this.choice({namedCurve:this.objid()})});t.signature=s.define(\"signature\",function(){this.seq().obj(this.key(\"r\").int(),this.key(\"s\").int())})},TdD3:function(e,t,i){(function(t){var s=/Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r\\+\\/\\=]+)[\\n\\r]+/m,r=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m,n=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\\n\\r\\+\\/\\=]+)-----END \\1-----$/m,a=i(\"roQf\"),o=i(\"/ab2\");e.exports=function(e,i){var c,y=e.toString(),h=y.match(s);if(h){var u=\"aes\"+h[1],d=new t(h[2],\"hex\"),p=new t(h[3].replace(/[\\r\\n]/g,\"\"),\"base64\"),b=a(i,d.slice(0,8),parseInt(h[1],10)).key,f=[],k=o.createDecipheriv(u,b,d);f.push(k.update(p)),f.push(k.final()),c=t.concat(f)}else{var l=y.match(n);c=new t(l[2].replace(/[\\r\\n]/g,\"\"),\"base64\")}return{tag:y.match(r)[1],data:c}}}).call(this,i(\"tjlA\").Buffer)},VrUr:function(e,t,i){\"use strict\";var s=i(\"f3pb\"),r=s.define(\"Time\",function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})}),n=s.define(\"AttributeTypeValue\",function(){this.seq().obj(this.key(\"type\").objid(),this.key(\"value\").any())}),a=s.define(\"AlgorithmIdentifier\",function(){this.seq().obj(this.key(\"algorithm\").objid(),this.key(\"parameters\").optional(),this.key(\"curve\").objid().optional())}),o=s.define(\"SubjectPublicKeyInfo\",function(){this.seq().obj(this.key(\"algorithm\").use(a),this.key(\"subjectPublicKey\").bitstr())}),c=s.define(\"RelativeDistinguishedName\",function(){this.setof(n)}),y=s.define(\"RDNSequence\",function(){this.seqof(c)}),h=s.define(\"Name\",function(){this.choice({rdnSequence:this.use(y)})}),u=s.define(\"Validity\",function(){this.seq().obj(this.key(\"notBefore\").use(r),this.key(\"notAfter\").use(r))}),d=s.define(\"Extension\",function(){this.seq().obj(this.key(\"extnID\").objid(),this.key(\"critical\").bool().def(!1),this.key(\"extnValue\").octstr())}),p=s.define(\"TBSCertificate\",function(){this.seq().obj(this.key(\"version\").explicit(0).int().optional(),this.key(\"serialNumber\").int(),this.key(\"signature\").use(a),this.key(\"issuer\").use(h),this.key(\"validity\").use(u),this.key(\"subject\").use(h),this.key(\"subjectPublicKeyInfo\").use(o),this.key(\"issuerUniqueID\").implicit(1).bitstr().optional(),this.key(\"subjectUniqueID\").implicit(2).bitstr().optional(),this.key(\"extensions\").explicit(3).seqof(d).optional())}),b=s.define(\"X509Certificate\",function(){this.seq().obj(this.key(\"tbsCertificate\").use(p),this.key(\"signatureAlgorithm\").use(a),this.key(\"signatureValue\").bitstr())});e.exports=b}}]);","extractedComments":[]}