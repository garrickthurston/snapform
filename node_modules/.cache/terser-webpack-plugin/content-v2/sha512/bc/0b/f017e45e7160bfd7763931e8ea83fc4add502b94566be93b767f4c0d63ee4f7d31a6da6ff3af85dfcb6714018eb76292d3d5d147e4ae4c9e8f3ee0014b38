{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\browserify-sign\\\\algos.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\browserify-sign\\\\browser\\\\sign.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\browserify-sign\\\\browser\\\\verify.js\",\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\browserify-sign\\\\browser\\\\index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"Buffer\",\"createHmac\",\"crt\",\"EC\",\"ec\",\"BN\",\"parseKeys\",\"curves\",\"getKey\",\"x\",\"q\",\"hash\",\"algo\",\"toArray\",\"length\",\"byteLength\",\"zeros\",\"fill\",\"concat\",\"hlen\",\"hbits\",\"bits\",\"bits2int\",\"mod\",\"out\",\"bits2octets\",\"v\",\"k\",\"update\",\"digest\",\"obits\",\"shift\",\"bitLength\",\"ishrn\",\"makeKey\",\"kv\",\"t\",\"cmp\",\"makeR\",\"g\",\"p\",\"toRed\",\"mont\",\"redPow\",\"fromRed\",\"key\",\"hashType\",\"signType\",\"tag\",\"priv\",\"curve\",\"Error\",\"curveId\",\"join\",\"keyFromPrivate\",\"privateKey\",\"sign\",\"toDER\",\"ecSign\",\"type\",\"params\",\"priv_key\",\"r\",\"H\",\"s\",\"invm\",\"imul\",\"add\",\"mul\",\"cmpn\",\"res\",\"dsaSign\",\"len\",\"modulus\",\"pad\",\"push\",\"i\",\"checkValue\",\"b\",\"sig\",\"pub\",\"data\",\"algorithm\",\"pubkey\",\"subjectPrivateKey\",\"verify\",\"ecVerify\",\"y\",\"pub_key\",\"unpacked\",\"signature\",\"decode\",\"montp\",\"w\",\"dsaVerify\",\"padNum\",\"red\",\"publicExponent\",\"Math\",\"min\",\"createHash\",\"stream\",\"inherits\",\"algorithms\",\"Sign\",\"Writable\",\"call\",\"this\",\"_hashType\",\"_hash\",\"_tag\",\"id\",\"_signType\",\"Verify\",\"createSign\",\"createVerify\",\"Object\",\"keys\",\"forEach\",\"toLowerCase\",\"prototype\",\"_write\",\"_\",\"done\",\"enc\",\"end\",\"toString\"],\"mappings\":\"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\",\"sourcesContent\":[\"module.exports = require('./browser/algorithms.json')\\n\",\"// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\\nvar createHmac = require('create-hmac')\\nvar crt = require('browserify-rsa')\\nvar EC = require('elliptic').ec\\nvar BN = require('bn.js')\\nvar parseKeys = require('parse-asn1')\\nvar curves = require('./curves.json')\\n\\nfunction sign (hash, key, hashType, signType, tag) {\\n  var priv = parseKeys(key)\\n  if (priv.curve) {\\n    // rsa keys can be interpreted as ecdsa ones in openssl\\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')\\n    return ecSign(hash, priv)\\n  } else if (priv.type === 'dsa') {\\n    if (signType !== 'dsa') throw new Error('wrong private key type')\\n    return dsaSign(hash, priv, hashType)\\n  } else {\\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')\\n  }\\n  hash = Buffer.concat([tag, hash])\\n  var len = priv.modulus.byteLength()\\n  var pad = [ 0, 1 ]\\n  while (hash.length + pad.length + 1 < len) pad.push(0xff)\\n  pad.push(0x00)\\n  var i = -1\\n  while (++i < hash.length) pad.push(hash[i])\\n\\n  var out = crt(pad, priv)\\n  return out\\n}\\n\\nfunction ecSign (hash, priv) {\\n  var curveId = curves[priv.curve.join('.')]\\n  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))\\n\\n  var curve = new EC(curveId)\\n  var key = curve.keyFromPrivate(priv.privateKey)\\n  var out = key.sign(hash)\\n\\n  return new Buffer(out.toDER())\\n}\\n\\nfunction dsaSign (hash, priv, algo) {\\n  var x = priv.params.priv_key\\n  var p = priv.params.p\\n  var q = priv.params.q\\n  var g = priv.params.g\\n  var r = new BN(0)\\n  var k\\n  var H = bits2int(hash, q).mod(q)\\n  var s = false\\n  var kv = getKey(x, q, hash, algo)\\n  while (s === false) {\\n    k = makeKey(q, kv, algo)\\n    r = makeR(g, k, p, q)\\n    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)\\n    if (s.cmpn(0) === 0) {\\n      s = false\\n      r = new BN(0)\\n    }\\n  }\\n  return toDER(r, s)\\n}\\n\\nfunction toDER (r, s) {\\n  r = r.toArray()\\n  s = s.toArray()\\n\\n  // Pad values\\n  if (r[0] & 0x80) r = [ 0 ].concat(r)\\n  if (s[0] & 0x80) s = [ 0 ].concat(s)\\n\\n  var total = r.length + s.length + 4\\n  var res = [ 0x30, total, 0x02, r.length ]\\n  res = res.concat(r, [ 0x02, s.length ], s)\\n  return new Buffer(res)\\n}\\n\\nfunction getKey (x, q, hash, algo) {\\n  x = new Buffer(x.toArray())\\n  if (x.length < q.byteLength()) {\\n    var zeros = new Buffer(q.byteLength() - x.length)\\n    zeros.fill(0)\\n    x = Buffer.concat([ zeros, x ])\\n  }\\n  var hlen = hash.length\\n  var hbits = bits2octets(hash, q)\\n  var v = new Buffer(hlen)\\n  v.fill(1)\\n  var k = new Buffer(hlen)\\n  k.fill(0)\\n  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()\\n  v = createHmac(algo, k).update(v).digest()\\n  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()\\n  v = createHmac(algo, k).update(v).digest()\\n  return { k: k, v: v }\\n}\\n\\nfunction bits2int (obits, q) {\\n  var bits = new BN(obits)\\n  var shift = (obits.length << 3) - q.bitLength()\\n  if (shift > 0) bits.ishrn(shift)\\n  return bits\\n}\\n\\nfunction bits2octets (bits, q) {\\n  bits = bits2int(bits, q)\\n  bits = bits.mod(q)\\n  var out = new Buffer(bits.toArray())\\n  if (out.length < q.byteLength()) {\\n    var zeros = new Buffer(q.byteLength() - out.length)\\n    zeros.fill(0)\\n    out = Buffer.concat([ zeros, out ])\\n  }\\n  return out\\n}\\n\\nfunction makeKey (q, kv, algo) {\\n  var t\\n  var k\\n\\n  do {\\n    t = new Buffer(0)\\n\\n    while (t.length * 8 < q.bitLength()) {\\n      kv.v = createHmac(algo, kv.k).update(kv.v).digest()\\n      t = Buffer.concat([ t, kv.v ])\\n    }\\n\\n    k = bits2int(t, q)\\n    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()\\n    kv.v = createHmac(algo, kv.k).update(kv.v).digest()\\n  } while (k.cmp(q) !== -1)\\n\\n  return k\\n}\\n\\nfunction makeR (g, k, p, q) {\\n  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)\\n}\\n\\nmodule.exports = sign\\nmodule.exports.getKey = getKey\\nmodule.exports.makeKey = makeKey\\n\",\"// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\\nvar BN = require('bn.js')\\nvar EC = require('elliptic').ec\\nvar parseKeys = require('parse-asn1')\\nvar curves = require('./curves.json')\\n\\nfunction verify (sig, hash, key, signType, tag) {\\n  var pub = parseKeys(key)\\n  if (pub.type === 'ec') {\\n    // rsa keys can be interpreted as ecdsa ones in openssl\\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\\n    return ecVerify(sig, hash, pub)\\n  } else if (pub.type === 'dsa') {\\n    if (signType !== 'dsa') throw new Error('wrong public key type')\\n    return dsaVerify(sig, hash, pub)\\n  } else {\\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\\n  }\\n  hash = Buffer.concat([tag, hash])\\n  var len = pub.modulus.byteLength()\\n  var pad = [ 1 ]\\n  var padNum = 0\\n  while (hash.length + pad.length + 2 < len) {\\n    pad.push(0xff)\\n    padNum++\\n  }\\n  pad.push(0x00)\\n  var i = -1\\n  while (++i < hash.length) {\\n    pad.push(hash[i])\\n  }\\n  pad = new Buffer(pad)\\n  var red = BN.mont(pub.modulus)\\n  sig = new BN(sig).toRed(red)\\n\\n  sig = sig.redPow(new BN(pub.publicExponent))\\n  sig = new Buffer(sig.fromRed().toArray())\\n  var out = padNum < 8 ? 1 : 0\\n  len = Math.min(sig.length, pad.length)\\n  if (sig.length !== pad.length) out = 1\\n\\n  i = -1\\n  while (++i < len) out |= sig[i] ^ pad[i]\\n  return out === 0\\n}\\n\\nfunction ecVerify (sig, hash, pub) {\\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\\n\\n  var curve = new EC(curveId)\\n  var pubkey = pub.data.subjectPrivateKey.data\\n\\n  return curve.verify(hash, sig, pubkey)\\n}\\n\\nfunction dsaVerify (sig, hash, pub) {\\n  var p = pub.data.p\\n  var q = pub.data.q\\n  var g = pub.data.g\\n  var y = pub.data.pub_key\\n  var unpacked = parseKeys.signature.decode(sig, 'der')\\n  var s = unpacked.s\\n  var r = unpacked.r\\n  checkValue(s, q)\\n  checkValue(r, q)\\n  var montp = BN.mont(p)\\n  var w = s.invm(q)\\n  var v = g.toRed(montp)\\n    .redPow(new BN(hash).mul(w).mod(q))\\n    .fromRed()\\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\\n    .mod(p)\\n    .mod(q)\\n  return v.cmp(r) === 0\\n}\\n\\nfunction checkValue (b, q) {\\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig')\\n  if (b.cmp(q) >= q) throw new Error('invalid sig')\\n}\\n\\nmodule.exports = verify\\n\",\"var createHash = require('create-hash')\\nvar stream = require('stream')\\nvar inherits = require('inherits')\\nvar sign = require('./sign')\\nvar verify = require('./verify')\\n\\nvar algorithms = require('./algorithms.json')\\nObject.keys(algorithms).forEach(function (key) {\\n  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')\\n  algorithms[key.toLowerCase()] = algorithms[key]\\n})\\n\\nfunction Sign (algorithm) {\\n  stream.Writable.call(this)\\n\\n  var data = algorithms[algorithm]\\n  if (!data) throw new Error('Unknown message digest')\\n\\n  this._hashType = data.hash\\n  this._hash = createHash(data.hash)\\n  this._tag = data.id\\n  this._signType = data.sign\\n}\\ninherits(Sign, stream.Writable)\\n\\nSign.prototype._write = function _write (data, _, done) {\\n  this._hash.update(data)\\n  done()\\n}\\n\\nSign.prototype.update = function update (data, enc) {\\n  if (typeof data === 'string') data = new Buffer(data, enc)\\n\\n  this._hash.update(data)\\n  return this\\n}\\n\\nSign.prototype.sign = function signMethod (key, enc) {\\n  this.end()\\n  var hash = this._hash.digest()\\n  var sig = sign(hash, key, this._hashType, this._signType, this._tag)\\n\\n  return enc ? sig.toString(enc) : sig\\n}\\n\\nfunction Verify (algorithm) {\\n  stream.Writable.call(this)\\n\\n  var data = algorithms[algorithm]\\n  if (!data) throw new Error('Unknown message digest')\\n\\n  this._hash = createHash(data.hash)\\n  this._tag = data.id\\n  this._signType = data.sign\\n}\\ninherits(Verify, stream.Writable)\\n\\nVerify.prototype._write = function _write (data, _, done) {\\n  this._hash.update(data)\\n  done()\\n}\\n\\nVerify.prototype.update = function update (data, enc) {\\n  if (typeof data === 'string') data = new Buffer(data, enc)\\n\\n  this._hash.update(data)\\n  return this\\n}\\n\\nVerify.prototype.verify = function verifyMethod (key, sig, enc) {\\n  if (typeof sig === 'string') sig = new Buffer(sig, enc)\\n\\n  this.end()\\n  var hash = this._hash.digest()\\n  return verify(sig, hash, key, this._signType, this._tag)\\n}\\n\\nfunction createSign (algorithm) {\\n  return new Sign(algorithm)\\n}\\n\\nfunction createVerify (algorithm) {\\n  return new Verify(algorithm)\\n}\\n\\nmodule.exports = {\\n  Sign: createSign,\\n  Verify: createVerify,\\n  createSign: createSign,\\n  createVerify: createVerify\\n}\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{EW2V:function(t,e,n){t.exports=n(\"tOiH\")},\"b+dc\":function(t,e,n){(function(e){var a=n(\"Giow\"),s=n(\"qVij\"),r=n(\"MzeL\").ec,i=n(\"OZ/i\"),h=n(\"Ku4m\"),d=n(\"zZGF\");function o(t,n,s,r){if((t=new e(t.toArray())).length<n.byteLength()){var i=new e(n.byteLength()-t.length);i.fill(0),t=e.concat([i,t])}var h=s.length,d=function(t,n){t=(t=u(t,n)).mod(n);var a=new e(t.toArray());if(a.length<n.byteLength()){var s=new e(n.byteLength()-a.length);s.fill(0),a=e.concat([s,a])}return a}(s,n),o=new e(h);o.fill(1);var c=new e(h);return c.fill(0),c=a(r,c).update(o).update(new e([0])).update(t).update(d).digest(),o=a(r,c).update(o).digest(),{k:c=a(r,c).update(o).update(new e([1])).update(t).update(d).digest(),v:o=a(r,c).update(o).digest()}}function u(t,e){var n=new i(t),a=(t.length<<3)-e.bitLength();return a>0&&n.ishrn(a),n}function c(t,n,s){var r,i;do{for(r=new e(0);8*r.length<t.bitLength();)n.v=a(s,n.k).update(n.v).digest(),r=e.concat([r,n.v]);i=u(r,t),n.k=a(s,n.k).update(n.v).update(new e([0])).digest(),n.v=a(s,n.k).update(n.v).digest()}while(-1!==i.cmp(t));return i}function g(t,e,n,a){return t.toRed(i.mont(n)).redPow(e).fromRed().mod(a)}t.exports=function(t,n,a,p,f){var w=h(n);if(w.curve){if(\"ecdsa\"!==p&&\"ecdsa/rsa\"!==p)throw new Error(\"wrong private key type\");return function(t,n){var a=d[n.curve.join(\".\")];if(!a)throw new Error(\"unknown curve \"+n.curve.join(\".\"));var s=new r(a).keyFromPrivate(n.privateKey).sign(t);return new e(s.toDER())}(t,w)}if(\"dsa\"===w.type){if(\"dsa\"!==p)throw new Error(\"wrong private key type\");return function(t,n,a){for(var s,r=n.params.priv_key,h=n.params.p,d=n.params.q,p=n.params.g,f=new i(0),w=u(t,d).mod(d),l=!1,y=o(r,d,t,a);!1===l;)s=c(d,y,a),f=g(p,s,h,d),0===(l=s.invm(d).imul(w.add(r.mul(f))).mod(d)).cmpn(0)&&(l=!1,f=new i(0));return function(t,n){t=t.toArray(),n=n.toArray(),128&t[0]&&(t=[0].concat(t)),128&n[0]&&(n=[0].concat(n));var a=[48,t.length+n.length+4,2,t.length];return a=a.concat(t,[2,n.length],n),new e(a)}(f,l)}(t,w,a)}if(\"rsa\"!==p&&\"ecdsa/rsa\"!==p)throw new Error(\"wrong private key type\");t=e.concat([f,t]);for(var l=w.modulus.byteLength(),y=[0,1];t.length+y.length+1<l;)y.push(255);y.push(0);for(var v=-1;++v<t.length;)y.push(t[v]);return s(y,w)},t.exports.getKey=o,t.exports.makeKey=c}).call(this,n(\"tjlA\").Buffer)},mAz1:function(t,e,n){(function(e){var a=n(\"OZ/i\"),s=n(\"MzeL\").ec,r=n(\"Ku4m\"),i=n(\"zZGF\");function h(t,e){if(t.cmpn(0)<=0)throw new Error(\"invalid sig\");if(t.cmp(e)>=e)throw new Error(\"invalid sig\")}t.exports=function(t,n,d,o,u){var c=r(d);if(\"ec\"===c.type){if(\"ecdsa\"!==o&&\"ecdsa/rsa\"!==o)throw new Error(\"wrong public key type\");return function(t,e,n){var a=i[n.data.algorithm.curve.join(\".\")];if(!a)throw new Error(\"unknown curve \"+n.data.algorithm.curve.join(\".\"));var r=new s(a),h=n.data.subjectPrivateKey.data;return r.verify(e,t,h)}(t,n,c)}if(\"dsa\"===c.type){if(\"dsa\"!==o)throw new Error(\"wrong public key type\");return function(t,e,n){var s=n.data.p,i=n.data.q,d=n.data.g,o=n.data.pub_key,u=r.signature.decode(t,\"der\"),c=u.s,g=u.r;h(c,i),h(g,i);var p=a.mont(s),f=c.invm(i);return 0===d.toRed(p).redPow(new a(e).mul(f).mod(i)).fromRed().mul(o.toRed(p).redPow(g.mul(f).mod(i)).fromRed()).mod(s).mod(i).cmp(g)}(t,n,c)}if(\"rsa\"!==o&&\"ecdsa/rsa\"!==o)throw new Error(\"wrong public key type\");n=e.concat([u,n]);for(var g=c.modulus.byteLength(),p=[1],f=0;n.length+p.length+2<g;)p.push(255),f++;p.push(0);for(var w=-1;++w<n.length;)p.push(n[w]);p=new e(p);var l=a.mont(c.modulus);t=(t=new a(t).toRed(l)).redPow(new a(c.publicExponent)),t=new e(t.fromRed().toArray());var y=f<8?1:0;for(g=Math.min(t.length,p.length),t.length!==p.length&&(y=1),w=-1;++w<g;)y|=t[w]^p[w];return 0===y}}).call(this,n(\"tjlA\").Buffer)},tOiH:function(t){t.exports={sha224WithRSAEncryption:{sign:\"rsa\",hash:\"sha224\",id:\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{sign:\"ecdsa/rsa\",hash:\"sha224\",id:\"302d300d06096086480165030402040500041c\"},sha256WithRSAEncryption:{sign:\"rsa\",hash:\"sha256\",id:\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{sign:\"ecdsa/rsa\",hash:\"sha256\",id:\"3031300d060960864801650304020105000420\"},sha384WithRSAEncryption:{sign:\"rsa\",hash:\"sha384\",id:\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{sign:\"ecdsa/rsa\",hash:\"sha384\",id:\"3041300d060960864801650304020205000430\"},sha512WithRSAEncryption:{sign:\"rsa\",hash:\"sha512\",id:\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{sign:\"ecdsa/rsa\",hash:\"sha512\",id:\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{sign:\"rsa\",hash:\"sha1\",id:\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{sign:\"ecdsa\",hash:\"sha1\",id:\"\"},sha256:{sign:\"ecdsa\",hash:\"sha256\",id:\"\"},sha224:{sign:\"ecdsa\",hash:\"sha224\",id:\"\"},sha384:{sign:\"ecdsa\",hash:\"sha384\",id:\"\"},sha512:{sign:\"ecdsa\",hash:\"sha512\",id:\"\"},\"DSA-SHA\":{sign:\"dsa\",hash:\"sha1\",id:\"\"},\"DSA-SHA1\":{sign:\"dsa\",hash:\"sha1\",id:\"\"},DSA:{sign:\"dsa\",hash:\"sha1\",id:\"\"},\"DSA-WITH-SHA224\":{sign:\"dsa\",hash:\"sha224\",id:\"\"},\"DSA-SHA224\":{sign:\"dsa\",hash:\"sha224\",id:\"\"},\"DSA-WITH-SHA256\":{sign:\"dsa\",hash:\"sha256\",id:\"\"},\"DSA-SHA256\":{sign:\"dsa\",hash:\"sha256\",id:\"\"},\"DSA-WITH-SHA384\":{sign:\"dsa\",hash:\"sha384\",id:\"\"},\"DSA-SHA384\":{sign:\"dsa\",hash:\"sha384\",id:\"\"},\"DSA-WITH-SHA512\":{sign:\"dsa\",hash:\"sha512\",id:\"\"},\"DSA-SHA512\":{sign:\"dsa\",hash:\"sha512\",id:\"\"},\"DSA-RIPEMD160\":{sign:\"dsa\",hash:\"rmd160\",id:\"\"},ripemd160WithRSA:{sign:\"rsa\",hash:\"rmd160\",id:\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{sign:\"rsa\",hash:\"rmd160\",id:\"3021300906052b2403020105000414\"},md5WithRSAEncryption:{sign:\"rsa\",hash:\"md5\",id:\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{sign:\"rsa\",hash:\"md5\",id:\"3020300c06082a864886f70d020505000410\"}}},tpL1:function(t,e,n){(function(e){var a=n(\"mObS\"),s=n(\"1IWx\"),r=n(\"P7XM\"),i=n(\"b+dc\"),h=n(\"mAz1\"),d=n(\"tOiH\");function o(t){s.Writable.call(this);var e=d[t];if(!e)throw new Error(\"Unknown message digest\");this._hashType=e.hash,this._hash=a(e.hash),this._tag=e.id,this._signType=e.sign}function u(t){s.Writable.call(this);var e=d[t];if(!e)throw new Error(\"Unknown message digest\");this._hash=a(e.hash),this._tag=e.id,this._signType=e.sign}function c(t){return new o(t)}function g(t){return new u(t)}Object.keys(d).forEach(function(t){d[t].id=new e(d[t].id,\"hex\"),d[t.toLowerCase()]=d[t]}),r(o,s.Writable),o.prototype._write=function(t,e,n){this._hash.update(t),n()},o.prototype.update=function(t,n){return\"string\"==typeof t&&(t=new e(t,n)),this._hash.update(t),this},o.prototype.sign=function(t,e){this.end();var n=this._hash.digest(),a=i(n,t,this._hashType,this._signType,this._tag);return e?a.toString(e):a},r(u,s.Writable),u.prototype._write=function(t,e,n){this._hash.update(t),n()},u.prototype.update=function(t,n){return\"string\"==typeof t&&(t=new e(t,n)),this._hash.update(t),this},u.prototype.verify=function(t,n,a){\"string\"==typeof n&&(n=new e(n,a)),this.end();var s=this._hash.digest();return h(n,s,t,this._signType,this._tag)},t.exports={Sign:c,Verify:g,createSign:c,createVerify:g}}).call(this,n(\"tjlA\").Buffer)},zZGF:function(t){t.exports={\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}}}]);","extractedComments":[]}