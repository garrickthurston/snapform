{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\bn.js\\\\lib\\\\bn.js\"],\"names\":[\"module\",\"exports\",\"assert\",\"val\",\"msg\",\"Error\",\"inherits\",\"ctor\",\"superCtor\",\"super_\",\"TempCtor\",\"prototype\",\"constructor\",\"BN\",\"number\",\"base\",\"endian\",\"isBN\",\"this\",\"negative\",\"words\",\"length\",\"red\",\"_init\",\"Buffer\",\"wordSize\",\"__webpack_require__\",\"e\",\"parseHex\",\"str\",\"start\",\"end\",\"r\",\"len\",\"Math\",\"min\",\"i\",\"c\",\"charCodeAt\",\"parseBase\",\"mul\",\"num\",\"Array\",\"isArray\",\"max\",\"left\",\"right\",\"cmp\",\"_initNumber\",\"_initArray\",\"toString\",\"replace\",\"_parseHex\",\"_parseBase\",\"strip\",\"toArray\",\"ceil\",\"j\",\"w\",\"off\",\"limbLen\",\"limbPow\",\"total\",\"mod\",\"word\",\"imuln\",\"_iaddn\",\"pow\",\"copy\",\"dest\",\"clone\",\"_expand\",\"size\",\"_normSign\",\"inspect\",\"zeros\",\"groupSizes\",\"groupBases\",\"smallMulTo\",\"self\",\"out\",\"a\",\"b\",\"lo\",\"carry\",\"k\",\"ncarry\",\"rword\",\"maxJ\",\"padding\",\"groupSize\",\"groupBase\",\"isZero\",\"modn\",\"idivn\",\"toNumber\",\"ret\",\"toJSON\",\"toBuffer\",\"toArrayLike\",\"ArrayType\",\"byteLength\",\"reqLength\",\"littleEndian\",\"res\",\"q\",\"andln\",\"iushrn\",\"clz32\",\"_countBits\",\"t\",\"_zeroBits\",\"bitLength\",\"hi\",\"zeroBits\",\"toTwos\",\"width\",\"abs\",\"inotn\",\"iaddn\",\"fromTwos\",\"testn\",\"notn\",\"ineg\",\"isNeg\",\"neg\",\"iuor\",\"ior\",\"or\",\"uor\",\"iuand\",\"iand\",\"and\",\"uand\",\"iuxor\",\"ixor\",\"xor\",\"uxor\",\"bytesNeeded\",\"bitsLeft\",\"setn\",\"bit\",\"wbit\",\"iadd\",\"isub\",\"add\",\"sub\",\"comb10MulTo\",\"mid\",\"o\",\"a0\",\"al0\",\"ah0\",\"a1\",\"al1\",\"ah1\",\"a2\",\"al2\",\"ah2\",\"a3\",\"al3\",\"ah3\",\"a4\",\"al4\",\"ah4\",\"a5\",\"al5\",\"ah5\",\"a6\",\"al6\",\"ah6\",\"a7\",\"al7\",\"ah7\",\"a8\",\"al8\",\"ah8\",\"a9\",\"al9\",\"ah9\",\"b0\",\"bl0\",\"bh0\",\"b1\",\"bl1\",\"bh1\",\"b2\",\"bl2\",\"bh2\",\"b3\",\"bl3\",\"bh3\",\"b4\",\"bl4\",\"bh4\",\"b5\",\"bl5\",\"bh5\",\"b6\",\"bl6\",\"bh6\",\"b7\",\"bl7\",\"bh7\",\"b8\",\"bl8\",\"bh8\",\"b9\",\"bl9\",\"bh9\",\"w0\",\"imul\",\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"w6\",\"w7\",\"w8\",\"w9\",\"w10\",\"w11\",\"w12\",\"w13\",\"w14\",\"w15\",\"w16\",\"w17\",\"w18\",\"jumboMulTo\",\"FFTM\",\"mulp\",\"x\",\"y\",\"mulTo\",\"hncarry\",\"bigMulTo\",\"makeRBT\",\"N\",\"l\",\"revBin\",\"rb\",\"permute\",\"rbt\",\"rws\",\"iws\",\"rtws\",\"itws\",\"transform\",\"s\",\"rtwdf\",\"cos\",\"PI\",\"itwdf\",\"sin\",\"p\",\"rtwdf_\",\"itwdf_\",\"re\",\"ie\",\"ro\",\"io\",\"rx\",\"guessLen13b\",\"n\",\"m\",\"odd\",\"conjugate\",\"normalize13b\",\"ws\",\"round\",\"convert13b\",\"stub\",\"ph\",\"_\",\"rwst\",\"iwst\",\"nrws\",\"nrwst\",\"niwst\",\"rmws\",\"mulf\",\"muln\",\"sqr\",\"isqr\",\"toBitArray\",\"iushln\",\"bits\",\"carryMask\",\"newCarry\",\"ishln\",\"hint\",\"extended\",\"h\",\"mask\",\"maskedWords\",\"ishrn\",\"shln\",\"ushln\",\"shrn\",\"ushrn\",\"imaskn\",\"maskn\",\"isubn\",\"addn\",\"subn\",\"iabs\",\"_ishlnsubmul\",\"shift\",\"_wordDiv\",\"mode\",\"bhi\",\"diff\",\"qj\",\"div\",\"divmod\",\"positive\",\"divn\",\"umod\",\"divRound\",\"dm\",\"half\",\"r2\",\"acc\",\"egcd\",\"A\",\"B\",\"C\",\"D\",\"g\",\"isEven\",\"yp\",\"xp\",\"im\",\"isOdd\",\"jm\",\"gcd\",\"_invmp\",\"x1\",\"x2\",\"delta\",\"cmpn\",\"invm\",\"bincn\",\"ucmp\",\"gtn\",\"gt\",\"gten\",\"gte\",\"ltn\",\"lt\",\"lten\",\"lte\",\"eqn\",\"eq\",\"Red\",\"toRed\",\"ctx\",\"convertTo\",\"_forceRed\",\"fromRed\",\"convertFrom\",\"forceRed\",\"redAdd\",\"redIAdd\",\"redSub\",\"redISub\",\"redShl\",\"shl\",\"redMul\",\"_verify2\",\"redIMul\",\"redSqr\",\"_verify1\",\"redISqr\",\"redSqrt\",\"sqrt\",\"redInvm\",\"redNeg\",\"redPow\",\"primes\",\"k256\",\"p224\",\"p192\",\"p25519\",\"MPrime\",\"name\",\"tmp\",\"_tmp\",\"K256\",\"call\",\"P224\",\"P192\",\"P25519\",\"prime\",\"_prime\",\"Mont\",\"imod\",\"rinv\",\"minv\",\"ireduce\",\"rlen\",\"split\",\"imulK\",\"input\",\"output\",\"outLen\",\"prev\",\"next\",\"mod3\",\"one\",\"nOne\",\"lpow\",\"z\",\"inv\",\"wnd\",\"current\",\"currentLen\",\"mont\",\"u\"],\"mappings\":\"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\",\"sourcesContent\":[\"(function (module, exports) {\\n  'use strict';\\n\\n  // Utils\\n  function assert (val, msg) {\\n    if (!val) throw new Error(msg || 'Assertion failed');\\n  }\\n\\n  // Could use `inherits` module, but don't want to move from single file\\n  // architecture yet.\\n  function inherits (ctor, superCtor) {\\n    ctor.super_ = superCtor;\\n    var TempCtor = function () {};\\n    TempCtor.prototype = superCtor.prototype;\\n    ctor.prototype = new TempCtor();\\n    ctor.prototype.constructor = ctor;\\n  }\\n\\n  // BN\\n\\n  function BN (number, base, endian) {\\n    if (BN.isBN(number)) {\\n      return number;\\n    }\\n\\n    this.negative = 0;\\n    this.words = null;\\n    this.length = 0;\\n\\n    // Reduction context\\n    this.red = null;\\n\\n    if (number !== null) {\\n      if (base === 'le' || base === 'be') {\\n        endian = base;\\n        base = 10;\\n      }\\n\\n      this._init(number || 0, base || 10, endian || 'be');\\n    }\\n  }\\n  if (typeof module === 'object') {\\n    module.exports = BN;\\n  } else {\\n    exports.BN = BN;\\n  }\\n\\n  BN.BN = BN;\\n  BN.wordSize = 26;\\n\\n  var Buffer;\\n  try {\\n    Buffer = require('buffer').Buffer;\\n  } catch (e) {\\n  }\\n\\n  BN.isBN = function isBN (num) {\\n    if (num instanceof BN) {\\n      return true;\\n    }\\n\\n    return num !== null && typeof num === 'object' &&\\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\\n  };\\n\\n  BN.max = function max (left, right) {\\n    if (left.cmp(right) > 0) return left;\\n    return right;\\n  };\\n\\n  BN.min = function min (left, right) {\\n    if (left.cmp(right) < 0) return left;\\n    return right;\\n  };\\n\\n  BN.prototype._init = function init (number, base, endian) {\\n    if (typeof number === 'number') {\\n      return this._initNumber(number, base, endian);\\n    }\\n\\n    if (typeof number === 'object') {\\n      return this._initArray(number, base, endian);\\n    }\\n\\n    if (base === 'hex') {\\n      base = 16;\\n    }\\n    assert(base === (base | 0) && base >= 2 && base <= 36);\\n\\n    number = number.toString().replace(/\\\\s+/g, '');\\n    var start = 0;\\n    if (number[0] === '-') {\\n      start++;\\n    }\\n\\n    if (base === 16) {\\n      this._parseHex(number, start);\\n    } else {\\n      this._parseBase(number, base, start);\\n    }\\n\\n    if (number[0] === '-') {\\n      this.negative = 1;\\n    }\\n\\n    this.strip();\\n\\n    if (endian !== 'le') return;\\n\\n    this._initArray(this.toArray(), base, endian);\\n  };\\n\\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\\n    if (number < 0) {\\n      this.negative = 1;\\n      number = -number;\\n    }\\n    if (number < 0x4000000) {\\n      this.words = [ number & 0x3ffffff ];\\n      this.length = 1;\\n    } else if (number < 0x10000000000000) {\\n      this.words = [\\n        number & 0x3ffffff,\\n        (number / 0x4000000) & 0x3ffffff\\n      ];\\n      this.length = 2;\\n    } else {\\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\\n      this.words = [\\n        number & 0x3ffffff,\\n        (number / 0x4000000) & 0x3ffffff,\\n        1\\n      ];\\n      this.length = 3;\\n    }\\n\\n    if (endian !== 'le') return;\\n\\n    // Reverse the bytes\\n    this._initArray(this.toArray(), base, endian);\\n  };\\n\\n  BN.prototype._initArray = function _initArray (number, base, endian) {\\n    // Perhaps a Uint8Array\\n    assert(typeof number.length === 'number');\\n    if (number.length <= 0) {\\n      this.words = [ 0 ];\\n      this.length = 1;\\n      return this;\\n    }\\n\\n    this.length = Math.ceil(number.length / 3);\\n    this.words = new Array(this.length);\\n    for (var i = 0; i < this.length; i++) {\\n      this.words[i] = 0;\\n    }\\n\\n    var j, w;\\n    var off = 0;\\n    if (endian === 'be') {\\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\\n        this.words[j] |= (w << off) & 0x3ffffff;\\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\\n        off += 24;\\n        if (off >= 26) {\\n          off -= 26;\\n          j++;\\n        }\\n      }\\n    } else if (endian === 'le') {\\n      for (i = 0, j = 0; i < number.length; i += 3) {\\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\\n        this.words[j] |= (w << off) & 0x3ffffff;\\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\\n        off += 24;\\n        if (off >= 26) {\\n          off -= 26;\\n          j++;\\n        }\\n      }\\n    }\\n    return this.strip();\\n  };\\n\\n  function parseHex (str, start, end) {\\n    var r = 0;\\n    var len = Math.min(str.length, end);\\n    for (var i = start; i < len; i++) {\\n      var c = str.charCodeAt(i) - 48;\\n\\n      r <<= 4;\\n\\n      // 'a' - 'f'\\n      if (c >= 49 && c <= 54) {\\n        r |= c - 49 + 0xa;\\n\\n      // 'A' - 'F'\\n      } else if (c >= 17 && c <= 22) {\\n        r |= c - 17 + 0xa;\\n\\n      // '0' - '9'\\n      } else {\\n        r |= c & 0xf;\\n      }\\n    }\\n    return r;\\n  }\\n\\n  BN.prototype._parseHex = function _parseHex (number, start) {\\n    // Create possibly bigger array to ensure that it fits the number\\n    this.length = Math.ceil((number.length - start) / 6);\\n    this.words = new Array(this.length);\\n    for (var i = 0; i < this.length; i++) {\\n      this.words[i] = 0;\\n    }\\n\\n    var j, w;\\n    // Scan 24-bit chunks and add them to the number\\n    var off = 0;\\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\\n      w = parseHex(number, i, i + 6);\\n      this.words[j] |= (w << off) & 0x3ffffff;\\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\\n      off += 24;\\n      if (off >= 26) {\\n        off -= 26;\\n        j++;\\n      }\\n    }\\n    if (i + 6 !== start) {\\n      w = parseHex(number, start, i + 6);\\n      this.words[j] |= (w << off) & 0x3ffffff;\\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\\n    }\\n    this.strip();\\n  };\\n\\n  function parseBase (str, start, end, mul) {\\n    var r = 0;\\n    var len = Math.min(str.length, end);\\n    for (var i = start; i < len; i++) {\\n      var c = str.charCodeAt(i) - 48;\\n\\n      r *= mul;\\n\\n      // 'a'\\n      if (c >= 49) {\\n        r += c - 49 + 0xa;\\n\\n      // 'A'\\n      } else if (c >= 17) {\\n        r += c - 17 + 0xa;\\n\\n      // '0' - '9'\\n      } else {\\n        r += c;\\n      }\\n    }\\n    return r;\\n  }\\n\\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\\n    // Initialize as zero\\n    this.words = [ 0 ];\\n    this.length = 1;\\n\\n    // Find length of limb in base\\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\\n      limbLen++;\\n    }\\n    limbLen--;\\n    limbPow = (limbPow / base) | 0;\\n\\n    var total = number.length - start;\\n    var mod = total % limbLen;\\n    var end = Math.min(total, total - mod) + start;\\n\\n    var word = 0;\\n    for (var i = start; i < end; i += limbLen) {\\n      word = parseBase(number, i, i + limbLen, base);\\n\\n      this.imuln(limbPow);\\n      if (this.words[0] + word < 0x4000000) {\\n        this.words[0] += word;\\n      } else {\\n        this._iaddn(word);\\n      }\\n    }\\n\\n    if (mod !== 0) {\\n      var pow = 1;\\n      word = parseBase(number, i, number.length, base);\\n\\n      for (i = 0; i < mod; i++) {\\n        pow *= base;\\n      }\\n\\n      this.imuln(pow);\\n      if (this.words[0] + word < 0x4000000) {\\n        this.words[0] += word;\\n      } else {\\n        this._iaddn(word);\\n      }\\n    }\\n  };\\n\\n  BN.prototype.copy = function copy (dest) {\\n    dest.words = new Array(this.length);\\n    for (var i = 0; i < this.length; i++) {\\n      dest.words[i] = this.words[i];\\n    }\\n    dest.length = this.length;\\n    dest.negative = this.negative;\\n    dest.red = this.red;\\n  };\\n\\n  BN.prototype.clone = function clone () {\\n    var r = new BN(null);\\n    this.copy(r);\\n    return r;\\n  };\\n\\n  BN.prototype._expand = function _expand (size) {\\n    while (this.length < size) {\\n      this.words[this.length++] = 0;\\n    }\\n    return this;\\n  };\\n\\n  // Remove leading `0` from `this`\\n  BN.prototype.strip = function strip () {\\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\\n      this.length--;\\n    }\\n    return this._normSign();\\n  };\\n\\n  BN.prototype._normSign = function _normSign () {\\n    // -0 = 0\\n    if (this.length === 1 && this.words[0] === 0) {\\n      this.negative = 0;\\n    }\\n    return this;\\n  };\\n\\n  BN.prototype.inspect = function inspect () {\\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\\n  };\\n\\n  /*\\n\\n  var zeros = [];\\n  var groupSizes = [];\\n  var groupBases = [];\\n\\n  var s = '';\\n  var i = -1;\\n  while (++i < BN.wordSize) {\\n    zeros[i] = s;\\n    s += '0';\\n  }\\n  groupSizes[0] = 0;\\n  groupSizes[1] = 0;\\n  groupBases[0] = 0;\\n  groupBases[1] = 0;\\n  var base = 2 - 1;\\n  while (++base < 36 + 1) {\\n    var groupSize = 0;\\n    var groupBase = 1;\\n    while (groupBase < (1 << BN.wordSize) / base) {\\n      groupBase *= base;\\n      groupSize += 1;\\n    }\\n    groupSizes[base] = groupSize;\\n    groupBases[base] = groupBase;\\n  }\\n\\n  */\\n\\n  var zeros = [\\n    '',\\n    '0',\\n    '00',\\n    '000',\\n    '0000',\\n    '00000',\\n    '000000',\\n    '0000000',\\n    '00000000',\\n    '000000000',\\n    '0000000000',\\n    '00000000000',\\n    '000000000000',\\n    '0000000000000',\\n    '00000000000000',\\n    '000000000000000',\\n    '0000000000000000',\\n    '00000000000000000',\\n    '000000000000000000',\\n    '0000000000000000000',\\n    '00000000000000000000',\\n    '000000000000000000000',\\n    '0000000000000000000000',\\n    '00000000000000000000000',\\n    '000000000000000000000000',\\n    '0000000000000000000000000'\\n  ];\\n\\n  var groupSizes = [\\n    0, 0,\\n    25, 16, 12, 11, 10, 9, 8,\\n    8, 7, 7, 7, 7, 6, 6,\\n    6, 6, 6, 6, 6, 5, 5,\\n    5, 5, 5, 5, 5, 5, 5,\\n    5, 5, 5, 5, 5, 5, 5\\n  ];\\n\\n  var groupBases = [\\n    0, 0,\\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\\n  ];\\n\\n  BN.prototype.toString = function toString (base, padding) {\\n    base = base || 10;\\n    padding = padding | 0 || 1;\\n\\n    var out;\\n    if (base === 16 || base === 'hex') {\\n      out = '';\\n      var off = 0;\\n      var carry = 0;\\n      for (var i = 0; i < this.length; i++) {\\n        var w = this.words[i];\\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\\n        carry = (w >>> (24 - off)) & 0xffffff;\\n        if (carry !== 0 || i !== this.length - 1) {\\n          out = zeros[6 - word.length] + word + out;\\n        } else {\\n          out = word + out;\\n        }\\n        off += 2;\\n        if (off >= 26) {\\n          off -= 26;\\n          i--;\\n        }\\n      }\\n      if (carry !== 0) {\\n        out = carry.toString(16) + out;\\n      }\\n      while (out.length % padding !== 0) {\\n        out = '0' + out;\\n      }\\n      if (this.negative !== 0) {\\n        out = '-' + out;\\n      }\\n      return out;\\n    }\\n\\n    if (base === (base | 0) && base >= 2 && base <= 36) {\\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\\n      var groupSize = groupSizes[base];\\n      // var groupBase = Math.pow(base, groupSize);\\n      var groupBase = groupBases[base];\\n      out = '';\\n      var c = this.clone();\\n      c.negative = 0;\\n      while (!c.isZero()) {\\n        var r = c.modn(groupBase).toString(base);\\n        c = c.idivn(groupBase);\\n\\n        if (!c.isZero()) {\\n          out = zeros[groupSize - r.length] + r + out;\\n        } else {\\n          out = r + out;\\n        }\\n      }\\n      if (this.isZero()) {\\n        out = '0' + out;\\n      }\\n      while (out.length % padding !== 0) {\\n        out = '0' + out;\\n      }\\n      if (this.negative !== 0) {\\n        out = '-' + out;\\n      }\\n      return out;\\n    }\\n\\n    assert(false, 'Base should be between 2 and 36');\\n  };\\n\\n  BN.prototype.toNumber = function toNumber () {\\n    var ret = this.words[0];\\n    if (this.length === 2) {\\n      ret += this.words[1] * 0x4000000;\\n    } else if (this.length === 3 && this.words[2] === 0x01) {\\n      // NOTE: at this stage it is known that the top bit is set\\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\\n    } else if (this.length > 2) {\\n      assert(false, 'Number can only safely store up to 53 bits');\\n    }\\n    return (this.negative !== 0) ? -ret : ret;\\n  };\\n\\n  BN.prototype.toJSON = function toJSON () {\\n    return this.toString(16);\\n  };\\n\\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\\n    assert(typeof Buffer !== 'undefined');\\n    return this.toArrayLike(Buffer, endian, length);\\n  };\\n\\n  BN.prototype.toArray = function toArray (endian, length) {\\n    return this.toArrayLike(Array, endian, length);\\n  };\\n\\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\\n    var byteLength = this.byteLength();\\n    var reqLength = length || Math.max(1, byteLength);\\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\\n    assert(reqLength > 0, 'Requested array length <= 0');\\n\\n    this.strip();\\n    var littleEndian = endian === 'le';\\n    var res = new ArrayType(reqLength);\\n\\n    var b, i;\\n    var q = this.clone();\\n    if (!littleEndian) {\\n      // Assume big-endian\\n      for (i = 0; i < reqLength - byteLength; i++) {\\n        res[i] = 0;\\n      }\\n\\n      for (i = 0; !q.isZero(); i++) {\\n        b = q.andln(0xff);\\n        q.iushrn(8);\\n\\n        res[reqLength - i - 1] = b;\\n      }\\n    } else {\\n      for (i = 0; !q.isZero(); i++) {\\n        b = q.andln(0xff);\\n        q.iushrn(8);\\n\\n        res[i] = b;\\n      }\\n\\n      for (; i < reqLength; i++) {\\n        res[i] = 0;\\n      }\\n    }\\n\\n    return res;\\n  };\\n\\n  if (Math.clz32) {\\n    BN.prototype._countBits = function _countBits (w) {\\n      return 32 - Math.clz32(w);\\n    };\\n  } else {\\n    BN.prototype._countBits = function _countBits (w) {\\n      var t = w;\\n      var r = 0;\\n      if (t >= 0x1000) {\\n        r += 13;\\n        t >>>= 13;\\n      }\\n      if (t >= 0x40) {\\n        r += 7;\\n        t >>>= 7;\\n      }\\n      if (t >= 0x8) {\\n        r += 4;\\n        t >>>= 4;\\n      }\\n      if (t >= 0x02) {\\n        r += 2;\\n        t >>>= 2;\\n      }\\n      return r + t;\\n    };\\n  }\\n\\n  BN.prototype._zeroBits = function _zeroBits (w) {\\n    // Short-cut\\n    if (w === 0) return 26;\\n\\n    var t = w;\\n    var r = 0;\\n    if ((t & 0x1fff) === 0) {\\n      r += 13;\\n      t >>>= 13;\\n    }\\n    if ((t & 0x7f) === 0) {\\n      r += 7;\\n      t >>>= 7;\\n    }\\n    if ((t & 0xf) === 0) {\\n      r += 4;\\n      t >>>= 4;\\n    }\\n    if ((t & 0x3) === 0) {\\n      r += 2;\\n      t >>>= 2;\\n    }\\n    if ((t & 0x1) === 0) {\\n      r++;\\n    }\\n    return r;\\n  };\\n\\n  // Return number of used bits in a BN\\n  BN.prototype.bitLength = function bitLength () {\\n    var w = this.words[this.length - 1];\\n    var hi = this._countBits(w);\\n    return (this.length - 1) * 26 + hi;\\n  };\\n\\n  function toBitArray (num) {\\n    var w = new Array(num.bitLength());\\n\\n    for (var bit = 0; bit < w.length; bit++) {\\n      var off = (bit / 26) | 0;\\n      var wbit = bit % 26;\\n\\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\\n    }\\n\\n    return w;\\n  }\\n\\n  // Number of trailing zero bits\\n  BN.prototype.zeroBits = function zeroBits () {\\n    if (this.isZero()) return 0;\\n\\n    var r = 0;\\n    for (var i = 0; i < this.length; i++) {\\n      var b = this._zeroBits(this.words[i]);\\n      r += b;\\n      if (b !== 26) break;\\n    }\\n    return r;\\n  };\\n\\n  BN.prototype.byteLength = function byteLength () {\\n    return Math.ceil(this.bitLength() / 8);\\n  };\\n\\n  BN.prototype.toTwos = function toTwos (width) {\\n    if (this.negative !== 0) {\\n      return this.abs().inotn(width).iaddn(1);\\n    }\\n    return this.clone();\\n  };\\n\\n  BN.prototype.fromTwos = function fromTwos (width) {\\n    if (this.testn(width - 1)) {\\n      return this.notn(width).iaddn(1).ineg();\\n    }\\n    return this.clone();\\n  };\\n\\n  BN.prototype.isNeg = function isNeg () {\\n    return this.negative !== 0;\\n  };\\n\\n  // Return negative clone of `this`\\n  BN.prototype.neg = function neg () {\\n    return this.clone().ineg();\\n  };\\n\\n  BN.prototype.ineg = function ineg () {\\n    if (!this.isZero()) {\\n      this.negative ^= 1;\\n    }\\n\\n    return this;\\n  };\\n\\n  // Or `num` with `this` in-place\\n  BN.prototype.iuor = function iuor (num) {\\n    while (this.length < num.length) {\\n      this.words[this.length++] = 0;\\n    }\\n\\n    for (var i = 0; i < num.length; i++) {\\n      this.words[i] = this.words[i] | num.words[i];\\n    }\\n\\n    return this.strip();\\n  };\\n\\n  BN.prototype.ior = function ior (num) {\\n    assert((this.negative | num.negative) === 0);\\n    return this.iuor(num);\\n  };\\n\\n  // Or `num` with `this`\\n  BN.prototype.or = function or (num) {\\n    if (this.length > num.length) return this.clone().ior(num);\\n    return num.clone().ior(this);\\n  };\\n\\n  BN.prototype.uor = function uor (num) {\\n    if (this.length > num.length) return this.clone().iuor(num);\\n    return num.clone().iuor(this);\\n  };\\n\\n  // And `num` with `this` in-place\\n  BN.prototype.iuand = function iuand (num) {\\n    // b = min-length(num, this)\\n    var b;\\n    if (this.length > num.length) {\\n      b = num;\\n    } else {\\n      b = this;\\n    }\\n\\n    for (var i = 0; i < b.length; i++) {\\n      this.words[i] = this.words[i] & num.words[i];\\n    }\\n\\n    this.length = b.length;\\n\\n    return this.strip();\\n  };\\n\\n  BN.prototype.iand = function iand (num) {\\n    assert((this.negative | num.negative) === 0);\\n    return this.iuand(num);\\n  };\\n\\n  // And `num` with `this`\\n  BN.prototype.and = function and (num) {\\n    if (this.length > num.length) return this.clone().iand(num);\\n    return num.clone().iand(this);\\n  };\\n\\n  BN.prototype.uand = function uand (num) {\\n    if (this.length > num.length) return this.clone().iuand(num);\\n    return num.clone().iuand(this);\\n  };\\n\\n  // Xor `num` with `this` in-place\\n  BN.prototype.iuxor = function iuxor (num) {\\n    // a.length > b.length\\n    var a;\\n    var b;\\n    if (this.length > num.length) {\\n      a = this;\\n      b = num;\\n    } else {\\n      a = num;\\n      b = this;\\n    }\\n\\n    for (var i = 0; i < b.length; i++) {\\n      this.words[i] = a.words[i] ^ b.words[i];\\n    }\\n\\n    if (this !== a) {\\n      for (; i < a.length; i++) {\\n        this.words[i] = a.words[i];\\n      }\\n    }\\n\\n    this.length = a.length;\\n\\n    return this.strip();\\n  };\\n\\n  BN.prototype.ixor = function ixor (num) {\\n    assert((this.negative | num.negative) === 0);\\n    return this.iuxor(num);\\n  };\\n\\n  // Xor `num` with `this`\\n  BN.prototype.xor = function xor (num) {\\n    if (this.length > num.length) return this.clone().ixor(num);\\n    return num.clone().ixor(this);\\n  };\\n\\n  BN.prototype.uxor = function uxor (num) {\\n    if (this.length > num.length) return this.clone().iuxor(num);\\n    return num.clone().iuxor(this);\\n  };\\n\\n  // Not ``this`` with ``width`` bitwidth\\n  BN.prototype.inotn = function inotn (width) {\\n    assert(typeof width === 'number' && width >= 0);\\n\\n    var bytesNeeded = Math.ceil(width / 26) | 0;\\n    var bitsLeft = width % 26;\\n\\n    // Extend the buffer with leading zeroes\\n    this._expand(bytesNeeded);\\n\\n    if (bitsLeft > 0) {\\n      bytesNeeded--;\\n    }\\n\\n    // Handle complete words\\n    for (var i = 0; i < bytesNeeded; i++) {\\n      this.words[i] = ~this.words[i] & 0x3ffffff;\\n    }\\n\\n    // Handle the residue\\n    if (bitsLeft > 0) {\\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\\n    }\\n\\n    // And remove leading zeroes\\n    return this.strip();\\n  };\\n\\n  BN.prototype.notn = function notn (width) {\\n    return this.clone().inotn(width);\\n  };\\n\\n  // Set `bit` of `this`\\n  BN.prototype.setn = function setn (bit, val) {\\n    assert(typeof bit === 'number' && bit >= 0);\\n\\n    var off = (bit / 26) | 0;\\n    var wbit = bit % 26;\\n\\n    this._expand(off + 1);\\n\\n    if (val) {\\n      this.words[off] = this.words[off] | (1 << wbit);\\n    } else {\\n      this.words[off] = this.words[off] & ~(1 << wbit);\\n    }\\n\\n    return this.strip();\\n  };\\n\\n  // Add `num` to `this` in-place\\n  BN.prototype.iadd = function iadd (num) {\\n    var r;\\n\\n    // negative + positive\\n    if (this.negative !== 0 && num.negative === 0) {\\n      this.negative = 0;\\n      r = this.isub(num);\\n      this.negative ^= 1;\\n      return this._normSign();\\n\\n    // positive + negative\\n    } else if (this.negative === 0 && num.negative !== 0) {\\n      num.negative = 0;\\n      r = this.isub(num);\\n      num.negative = 1;\\n      return r._normSign();\\n    }\\n\\n    // a.length > b.length\\n    var a, b;\\n    if (this.length > num.length) {\\n      a = this;\\n      b = num;\\n    } else {\\n      a = num;\\n      b = this;\\n    }\\n\\n    var carry = 0;\\n    for (var i = 0; i < b.length; i++) {\\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\\n      this.words[i] = r & 0x3ffffff;\\n      carry = r >>> 26;\\n    }\\n    for (; carry !== 0 && i < a.length; i++) {\\n      r = (a.words[i] | 0) + carry;\\n      this.words[i] = r & 0x3ffffff;\\n      carry = r >>> 26;\\n    }\\n\\n    this.length = a.length;\\n    if (carry !== 0) {\\n      this.words[this.length] = carry;\\n      this.length++;\\n    // Copy the rest of the words\\n    } else if (a !== this) {\\n      for (; i < a.length; i++) {\\n        this.words[i] = a.words[i];\\n      }\\n    }\\n\\n    return this;\\n  };\\n\\n  // Add `num` to `this`\\n  BN.prototype.add = function add (num) {\\n    var res;\\n    if (num.negative !== 0 && this.negative === 0) {\\n      num.negative = 0;\\n      res = this.sub(num);\\n      num.negative ^= 1;\\n      return res;\\n    } else if (num.negative === 0 && this.negative !== 0) {\\n      this.negative = 0;\\n      res = num.sub(this);\\n      this.negative = 1;\\n      return res;\\n    }\\n\\n    if (this.length > num.length) return this.clone().iadd(num);\\n\\n    return num.clone().iadd(this);\\n  };\\n\\n  // Subtract `num` from `this` in-place\\n  BN.prototype.isub = function isub (num) {\\n    // this - (-num) = this + num\\n    if (num.negative !== 0) {\\n      num.negative = 0;\\n      var r = this.iadd(num);\\n      num.negative = 1;\\n      return r._normSign();\\n\\n    // -this - num = -(this + num)\\n    } else if (this.negative !== 0) {\\n      this.negative = 0;\\n      this.iadd(num);\\n      this.negative = 1;\\n      return this._normSign();\\n    }\\n\\n    // At this point both numbers are positive\\n    var cmp = this.cmp(num);\\n\\n    // Optimization - zeroify\\n    if (cmp === 0) {\\n      this.negative = 0;\\n      this.length = 1;\\n      this.words[0] = 0;\\n      return this;\\n    }\\n\\n    // a > b\\n    var a, b;\\n    if (cmp > 0) {\\n      a = this;\\n      b = num;\\n    } else {\\n      a = num;\\n      b = this;\\n    }\\n\\n    var carry = 0;\\n    for (var i = 0; i < b.length; i++) {\\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\\n      carry = r >> 26;\\n      this.words[i] = r & 0x3ffffff;\\n    }\\n    for (; carry !== 0 && i < a.length; i++) {\\n      r = (a.words[i] | 0) + carry;\\n      carry = r >> 26;\\n      this.words[i] = r & 0x3ffffff;\\n    }\\n\\n    // Copy rest of the words\\n    if (carry === 0 && i < a.length && a !== this) {\\n      for (; i < a.length; i++) {\\n        this.words[i] = a.words[i];\\n      }\\n    }\\n\\n    this.length = Math.max(this.length, i);\\n\\n    if (a !== this) {\\n      this.negative = 1;\\n    }\\n\\n    return this.strip();\\n  };\\n\\n  // Subtract `num` from `this`\\n  BN.prototype.sub = function sub (num) {\\n    return this.clone().isub(num);\\n  };\\n\\n  function smallMulTo (self, num, out) {\\n    out.negative = num.negative ^ self.negative;\\n    var len = (self.length + num.length) | 0;\\n    out.length = len;\\n    len = (len - 1) | 0;\\n\\n    // Peel one iteration (compiler can't do it, because of code complexity)\\n    var a = self.words[0] | 0;\\n    var b = num.words[0] | 0;\\n    var r = a * b;\\n\\n    var lo = r & 0x3ffffff;\\n    var carry = (r / 0x4000000) | 0;\\n    out.words[0] = lo;\\n\\n    for (var k = 1; k < len; k++) {\\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\\n      // note that ncarry could be >= 0x3ffffff\\n      var ncarry = carry >>> 26;\\n      var rword = carry & 0x3ffffff;\\n      var maxJ = Math.min(k, num.length - 1);\\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\\n        var i = (k - j) | 0;\\n        a = self.words[i] | 0;\\n        b = num.words[j] | 0;\\n        r = a * b + rword;\\n        ncarry += (r / 0x4000000) | 0;\\n        rword = r & 0x3ffffff;\\n      }\\n      out.words[k] = rword | 0;\\n      carry = ncarry | 0;\\n    }\\n    if (carry !== 0) {\\n      out.words[k] = carry | 0;\\n    } else {\\n      out.length--;\\n    }\\n\\n    return out.strip();\\n  }\\n\\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\\n  // multiplication (like elliptic secp256k1).\\n  var comb10MulTo = function comb10MulTo (self, num, out) {\\n    var a = self.words;\\n    var b = num.words;\\n    var o = out.words;\\n    var c = 0;\\n    var lo;\\n    var mid;\\n    var hi;\\n    var a0 = a[0] | 0;\\n    var al0 = a0 & 0x1fff;\\n    var ah0 = a0 >>> 13;\\n    var a1 = a[1] | 0;\\n    var al1 = a1 & 0x1fff;\\n    var ah1 = a1 >>> 13;\\n    var a2 = a[2] | 0;\\n    var al2 = a2 & 0x1fff;\\n    var ah2 = a2 >>> 13;\\n    var a3 = a[3] | 0;\\n    var al3 = a3 & 0x1fff;\\n    var ah3 = a3 >>> 13;\\n    var a4 = a[4] | 0;\\n    var al4 = a4 & 0x1fff;\\n    var ah4 = a4 >>> 13;\\n    var a5 = a[5] | 0;\\n    var al5 = a5 & 0x1fff;\\n    var ah5 = a5 >>> 13;\\n    var a6 = a[6] | 0;\\n    var al6 = a6 & 0x1fff;\\n    var ah6 = a6 >>> 13;\\n    var a7 = a[7] | 0;\\n    var al7 = a7 & 0x1fff;\\n    var ah7 = a7 >>> 13;\\n    var a8 = a[8] | 0;\\n    var al8 = a8 & 0x1fff;\\n    var ah8 = a8 >>> 13;\\n    var a9 = a[9] | 0;\\n    var al9 = a9 & 0x1fff;\\n    var ah9 = a9 >>> 13;\\n    var b0 = b[0] | 0;\\n    var bl0 = b0 & 0x1fff;\\n    var bh0 = b0 >>> 13;\\n    var b1 = b[1] | 0;\\n    var bl1 = b1 & 0x1fff;\\n    var bh1 = b1 >>> 13;\\n    var b2 = b[2] | 0;\\n    var bl2 = b2 & 0x1fff;\\n    var bh2 = b2 >>> 13;\\n    var b3 = b[3] | 0;\\n    var bl3 = b3 & 0x1fff;\\n    var bh3 = b3 >>> 13;\\n    var b4 = b[4] | 0;\\n    var bl4 = b4 & 0x1fff;\\n    var bh4 = b4 >>> 13;\\n    var b5 = b[5] | 0;\\n    var bl5 = b5 & 0x1fff;\\n    var bh5 = b5 >>> 13;\\n    var b6 = b[6] | 0;\\n    var bl6 = b6 & 0x1fff;\\n    var bh6 = b6 >>> 13;\\n    var b7 = b[7] | 0;\\n    var bl7 = b7 & 0x1fff;\\n    var bh7 = b7 >>> 13;\\n    var b8 = b[8] | 0;\\n    var bl8 = b8 & 0x1fff;\\n    var bh8 = b8 >>> 13;\\n    var b9 = b[9] | 0;\\n    var bl9 = b9 & 0x1fff;\\n    var bh9 = b9 >>> 13;\\n\\n    out.negative = self.negative ^ num.negative;\\n    out.length = 19;\\n    /* k = 0 */\\n    lo = Math.imul(al0, bl0);\\n    mid = Math.imul(al0, bh0);\\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\\n    hi = Math.imul(ah0, bh0);\\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\\n    w0 &= 0x3ffffff;\\n    /* k = 1 */\\n    lo = Math.imul(al1, bl0);\\n    mid = Math.imul(al1, bh0);\\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\\n    hi = Math.imul(ah1, bh0);\\n    lo = (lo + Math.imul(al0, bl1)) | 0;\\n    mid = (mid + Math.imul(al0, bh1)) | 0;\\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\\n    w1 &= 0x3ffffff;\\n    /* k = 2 */\\n    lo = Math.imul(al2, bl0);\\n    mid = Math.imul(al2, bh0);\\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\\n    hi = Math.imul(ah2, bh0);\\n    lo = (lo + Math.imul(al1, bl1)) | 0;\\n    mid = (mid + Math.imul(al1, bh1)) | 0;\\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\\n    lo = (lo + Math.imul(al0, bl2)) | 0;\\n    mid = (mid + Math.imul(al0, bh2)) | 0;\\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\\n    w2 &= 0x3ffffff;\\n    /* k = 3 */\\n    lo = Math.imul(al3, bl0);\\n    mid = Math.imul(al3, bh0);\\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\\n    hi = Math.imul(ah3, bh0);\\n    lo = (lo + Math.imul(al2, bl1)) | 0;\\n    mid = (mid + Math.imul(al2, bh1)) | 0;\\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\\n    lo = (lo + Math.imul(al1, bl2)) | 0;\\n    mid = (mid + Math.imul(al1, bh2)) | 0;\\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\\n    lo = (lo + Math.imul(al0, bl3)) | 0;\\n    mid = (mid + Math.imul(al0, bh3)) | 0;\\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\\n    w3 &= 0x3ffffff;\\n    /* k = 4 */\\n    lo = Math.imul(al4, bl0);\\n    mid = Math.imul(al4, bh0);\\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\\n    hi = Math.imul(ah4, bh0);\\n    lo = (lo + Math.imul(al3, bl1)) | 0;\\n    mid = (mid + Math.imul(al3, bh1)) | 0;\\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\\n    lo = (lo + Math.imul(al2, bl2)) | 0;\\n    mid = (mid + Math.imul(al2, bh2)) | 0;\\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\\n    lo = (lo + Math.imul(al1, bl3)) | 0;\\n    mid = (mid + Math.imul(al1, bh3)) | 0;\\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\\n    lo = (lo + Math.imul(al0, bl4)) | 0;\\n    mid = (mid + Math.imul(al0, bh4)) | 0;\\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\\n    w4 &= 0x3ffffff;\\n    /* k = 5 */\\n    lo = Math.imul(al5, bl0);\\n    mid = Math.imul(al5, bh0);\\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\\n    hi = Math.imul(ah5, bh0);\\n    lo = (lo + Math.imul(al4, bl1)) | 0;\\n    mid = (mid + Math.imul(al4, bh1)) | 0;\\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\\n    lo = (lo + Math.imul(al3, bl2)) | 0;\\n    mid = (mid + Math.imul(al3, bh2)) | 0;\\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\\n    lo = (lo + Math.imul(al2, bl3)) | 0;\\n    mid = (mid + Math.imul(al2, bh3)) | 0;\\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\\n    lo = (lo + Math.imul(al1, bl4)) | 0;\\n    mid = (mid + Math.imul(al1, bh4)) | 0;\\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\\n    lo = (lo + Math.imul(al0, bl5)) | 0;\\n    mid = (mid + Math.imul(al0, bh5)) | 0;\\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\\n    w5 &= 0x3ffffff;\\n    /* k = 6 */\\n    lo = Math.imul(al6, bl0);\\n    mid = Math.imul(al6, bh0);\\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\\n    hi = Math.imul(ah6, bh0);\\n    lo = (lo + Math.imul(al5, bl1)) | 0;\\n    mid = (mid + Math.imul(al5, bh1)) | 0;\\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\\n    lo = (lo + Math.imul(al4, bl2)) | 0;\\n    mid = (mid + Math.imul(al4, bh2)) | 0;\\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\\n    lo = (lo + Math.imul(al3, bl3)) | 0;\\n    mid = (mid + Math.imul(al3, bh3)) | 0;\\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\\n    lo = (lo + Math.imul(al2, bl4)) | 0;\\n    mid = (mid + Math.imul(al2, bh4)) | 0;\\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\\n    lo = (lo + Math.imul(al1, bl5)) | 0;\\n    mid = (mid + Math.imul(al1, bh5)) | 0;\\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\\n    lo = (lo + Math.imul(al0, bl6)) | 0;\\n    mid = (mid + Math.imul(al0, bh6)) | 0;\\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\\n    w6 &= 0x3ffffff;\\n    /* k = 7 */\\n    lo = Math.imul(al7, bl0);\\n    mid = Math.imul(al7, bh0);\\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\\n    hi = Math.imul(ah7, bh0);\\n    lo = (lo + Math.imul(al6, bl1)) | 0;\\n    mid = (mid + Math.imul(al6, bh1)) | 0;\\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\\n    lo = (lo + Math.imul(al5, bl2)) | 0;\\n    mid = (mid + Math.imul(al5, bh2)) | 0;\\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\\n    lo = (lo + Math.imul(al4, bl3)) | 0;\\n    mid = (mid + Math.imul(al4, bh3)) | 0;\\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\\n    lo = (lo + Math.imul(al3, bl4)) | 0;\\n    mid = (mid + Math.imul(al3, bh4)) | 0;\\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\\n    lo = (lo + Math.imul(al2, bl5)) | 0;\\n    mid = (mid + Math.imul(al2, bh5)) | 0;\\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\\n    lo = (lo + Math.imul(al1, bl6)) | 0;\\n    mid = (mid + Math.imul(al1, bh6)) | 0;\\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\\n    lo = (lo + Math.imul(al0, bl7)) | 0;\\n    mid = (mid + Math.imul(al0, bh7)) | 0;\\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\\n    w7 &= 0x3ffffff;\\n    /* k = 8 */\\n    lo = Math.imul(al8, bl0);\\n    mid = Math.imul(al8, bh0);\\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\\n    hi = Math.imul(ah8, bh0);\\n    lo = (lo + Math.imul(al7, bl1)) | 0;\\n    mid = (mid + Math.imul(al7, bh1)) | 0;\\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\\n    lo = (lo + Math.imul(al6, bl2)) | 0;\\n    mid = (mid + Math.imul(al6, bh2)) | 0;\\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\\n    lo = (lo + Math.imul(al5, bl3)) | 0;\\n    mid = (mid + Math.imul(al5, bh3)) | 0;\\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\\n    lo = (lo + Math.imul(al4, bl4)) | 0;\\n    mid = (mid + Math.imul(al4, bh4)) | 0;\\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\\n    lo = (lo + Math.imul(al3, bl5)) | 0;\\n    mid = (mid + Math.imul(al3, bh5)) | 0;\\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\\n    lo = (lo + Math.imul(al2, bl6)) | 0;\\n    mid = (mid + Math.imul(al2, bh6)) | 0;\\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\\n    lo = (lo + Math.imul(al1, bl7)) | 0;\\n    mid = (mid + Math.imul(al1, bh7)) | 0;\\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\\n    lo = (lo + Math.imul(al0, bl8)) | 0;\\n    mid = (mid + Math.imul(al0, bh8)) | 0;\\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\\n    w8 &= 0x3ffffff;\\n    /* k = 9 */\\n    lo = Math.imul(al9, bl0);\\n    mid = Math.imul(al9, bh0);\\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\\n    hi = Math.imul(ah9, bh0);\\n    lo = (lo + Math.imul(al8, bl1)) | 0;\\n    mid = (mid + Math.imul(al8, bh1)) | 0;\\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\\n    lo = (lo + Math.imul(al7, bl2)) | 0;\\n    mid = (mid + Math.imul(al7, bh2)) | 0;\\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\\n    lo = (lo + Math.imul(al6, bl3)) | 0;\\n    mid = (mid + Math.imul(al6, bh3)) | 0;\\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\\n    lo = (lo + Math.imul(al5, bl4)) | 0;\\n    mid = (mid + Math.imul(al5, bh4)) | 0;\\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\\n    lo = (lo + Math.imul(al4, bl5)) | 0;\\n    mid = (mid + Math.imul(al4, bh5)) | 0;\\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\\n    lo = (lo + Math.imul(al3, bl6)) | 0;\\n    mid = (mid + Math.imul(al3, bh6)) | 0;\\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\\n    lo = (lo + Math.imul(al2, bl7)) | 0;\\n    mid = (mid + Math.imul(al2, bh7)) | 0;\\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\\n    lo = (lo + Math.imul(al1, bl8)) | 0;\\n    mid = (mid + Math.imul(al1, bh8)) | 0;\\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\\n    lo = (lo + Math.imul(al0, bl9)) | 0;\\n    mid = (mid + Math.imul(al0, bh9)) | 0;\\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\\n    w9 &= 0x3ffffff;\\n    /* k = 10 */\\n    lo = Math.imul(al9, bl1);\\n    mid = Math.imul(al9, bh1);\\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\\n    hi = Math.imul(ah9, bh1);\\n    lo = (lo + Math.imul(al8, bl2)) | 0;\\n    mid = (mid + Math.imul(al8, bh2)) | 0;\\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\\n    lo = (lo + Math.imul(al7, bl3)) | 0;\\n    mid = (mid + Math.imul(al7, bh3)) | 0;\\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\\n    lo = (lo + Math.imul(al6, bl4)) | 0;\\n    mid = (mid + Math.imul(al6, bh4)) | 0;\\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\\n    lo = (lo + Math.imul(al5, bl5)) | 0;\\n    mid = (mid + Math.imul(al5, bh5)) | 0;\\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\\n    lo = (lo + Math.imul(al4, bl6)) | 0;\\n    mid = (mid + Math.imul(al4, bh6)) | 0;\\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\\n    lo = (lo + Math.imul(al3, bl7)) | 0;\\n    mid = (mid + Math.imul(al3, bh7)) | 0;\\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\\n    lo = (lo + Math.imul(al2, bl8)) | 0;\\n    mid = (mid + Math.imul(al2, bh8)) | 0;\\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\\n    lo = (lo + Math.imul(al1, bl9)) | 0;\\n    mid = (mid + Math.imul(al1, bh9)) | 0;\\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\\n    w10 &= 0x3ffffff;\\n    /* k = 11 */\\n    lo = Math.imul(al9, bl2);\\n    mid = Math.imul(al9, bh2);\\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\\n    hi = Math.imul(ah9, bh2);\\n    lo = (lo + Math.imul(al8, bl3)) | 0;\\n    mid = (mid + Math.imul(al8, bh3)) | 0;\\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\\n    lo = (lo + Math.imul(al7, bl4)) | 0;\\n    mid = (mid + Math.imul(al7, bh4)) | 0;\\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\\n    lo = (lo + Math.imul(al6, bl5)) | 0;\\n    mid = (mid + Math.imul(al6, bh5)) | 0;\\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\\n    lo = (lo + Math.imul(al5, bl6)) | 0;\\n    mid = (mid + Math.imul(al5, bh6)) | 0;\\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\\n    lo = (lo + Math.imul(al4, bl7)) | 0;\\n    mid = (mid + Math.imul(al4, bh7)) | 0;\\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\\n    lo = (lo + Math.imul(al3, bl8)) | 0;\\n    mid = (mid + Math.imul(al3, bh8)) | 0;\\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\\n    lo = (lo + Math.imul(al2, bl9)) | 0;\\n    mid = (mid + Math.imul(al2, bh9)) | 0;\\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\\n    w11 &= 0x3ffffff;\\n    /* k = 12 */\\n    lo = Math.imul(al9, bl3);\\n    mid = Math.imul(al9, bh3);\\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\\n    hi = Math.imul(ah9, bh3);\\n    lo = (lo + Math.imul(al8, bl4)) | 0;\\n    mid = (mid + Math.imul(al8, bh4)) | 0;\\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\\n    lo = (lo + Math.imul(al7, bl5)) | 0;\\n    mid = (mid + Math.imul(al7, bh5)) | 0;\\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\\n    lo = (lo + Math.imul(al6, bl6)) | 0;\\n    mid = (mid + Math.imul(al6, bh6)) | 0;\\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\\n    lo = (lo + Math.imul(al5, bl7)) | 0;\\n    mid = (mid + Math.imul(al5, bh7)) | 0;\\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\\n    lo = (lo + Math.imul(al4, bl8)) | 0;\\n    mid = (mid + Math.imul(al4, bh8)) | 0;\\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\\n    lo = (lo + Math.imul(al3, bl9)) | 0;\\n    mid = (mid + Math.imul(al3, bh9)) | 0;\\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\\n    w12 &= 0x3ffffff;\\n    /* k = 13 */\\n    lo = Math.imul(al9, bl4);\\n    mid = Math.imul(al9, bh4);\\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\\n    hi = Math.imul(ah9, bh4);\\n    lo = (lo + Math.imul(al8, bl5)) | 0;\\n    mid = (mid + Math.imul(al8, bh5)) | 0;\\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\\n    lo = (lo + Math.imul(al7, bl6)) | 0;\\n    mid = (mid + Math.imul(al7, bh6)) | 0;\\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\\n    lo = (lo + Math.imul(al6, bl7)) | 0;\\n    mid = (mid + Math.imul(al6, bh7)) | 0;\\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\\n    lo = (lo + Math.imul(al5, bl8)) | 0;\\n    mid = (mid + Math.imul(al5, bh8)) | 0;\\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\\n    lo = (lo + Math.imul(al4, bl9)) | 0;\\n    mid = (mid + Math.imul(al4, bh9)) | 0;\\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\\n    w13 &= 0x3ffffff;\\n    /* k = 14 */\\n    lo = Math.imul(al9, bl5);\\n    mid = Math.imul(al9, bh5);\\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\\n    hi = Math.imul(ah9, bh5);\\n    lo = (lo + Math.imul(al8, bl6)) | 0;\\n    mid = (mid + Math.imul(al8, bh6)) | 0;\\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\\n    lo = (lo + Math.imul(al7, bl7)) | 0;\\n    mid = (mid + Math.imul(al7, bh7)) | 0;\\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\\n    lo = (lo + Math.imul(al6, bl8)) | 0;\\n    mid = (mid + Math.imul(al6, bh8)) | 0;\\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\\n    lo = (lo + Math.imul(al5, bl9)) | 0;\\n    mid = (mid + Math.imul(al5, bh9)) | 0;\\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\\n    w14 &= 0x3ffffff;\\n    /* k = 15 */\\n    lo = Math.imul(al9, bl6);\\n    mid = Math.imul(al9, bh6);\\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\\n    hi = Math.imul(ah9, bh6);\\n    lo = (lo + Math.imul(al8, bl7)) | 0;\\n    mid = (mid + Math.imul(al8, bh7)) | 0;\\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\\n    lo = (lo + Math.imul(al7, bl8)) | 0;\\n    mid = (mid + Math.imul(al7, bh8)) | 0;\\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\\n    lo = (lo + Math.imul(al6, bl9)) | 0;\\n    mid = (mid + Math.imul(al6, bh9)) | 0;\\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\\n    w15 &= 0x3ffffff;\\n    /* k = 16 */\\n    lo = Math.imul(al9, bl7);\\n    mid = Math.imul(al9, bh7);\\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\\n    hi = Math.imul(ah9, bh7);\\n    lo = (lo + Math.imul(al8, bl8)) | 0;\\n    mid = (mid + Math.imul(al8, bh8)) | 0;\\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\\n    lo = (lo + Math.imul(al7, bl9)) | 0;\\n    mid = (mid + Math.imul(al7, bh9)) | 0;\\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\\n    w16 &= 0x3ffffff;\\n    /* k = 17 */\\n    lo = Math.imul(al9, bl8);\\n    mid = Math.imul(al9, bh8);\\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\\n    hi = Math.imul(ah9, bh8);\\n    lo = (lo + Math.imul(al8, bl9)) | 0;\\n    mid = (mid + Math.imul(al8, bh9)) | 0;\\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\\n    w17 &= 0x3ffffff;\\n    /* k = 18 */\\n    lo = Math.imul(al9, bl9);\\n    mid = Math.imul(al9, bh9);\\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\\n    hi = Math.imul(ah9, bh9);\\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\\n    w18 &= 0x3ffffff;\\n    o[0] = w0;\\n    o[1] = w1;\\n    o[2] = w2;\\n    o[3] = w3;\\n    o[4] = w4;\\n    o[5] = w5;\\n    o[6] = w6;\\n    o[7] = w7;\\n    o[8] = w8;\\n    o[9] = w9;\\n    o[10] = w10;\\n    o[11] = w11;\\n    o[12] = w12;\\n    o[13] = w13;\\n    o[14] = w14;\\n    o[15] = w15;\\n    o[16] = w16;\\n    o[17] = w17;\\n    o[18] = w18;\\n    if (c !== 0) {\\n      o[19] = c;\\n      out.length++;\\n    }\\n    return out;\\n  };\\n\\n  // Polyfill comb\\n  if (!Math.imul) {\\n    comb10MulTo = smallMulTo;\\n  }\\n\\n  function bigMulTo (self, num, out) {\\n    out.negative = num.negative ^ self.negative;\\n    out.length = self.length + num.length;\\n\\n    var carry = 0;\\n    var hncarry = 0;\\n    for (var k = 0; k < out.length - 1; k++) {\\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\\n      // note that ncarry could be >= 0x3ffffff\\n      var ncarry = hncarry;\\n      hncarry = 0;\\n      var rword = carry & 0x3ffffff;\\n      var maxJ = Math.min(k, num.length - 1);\\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\\n        var i = k - j;\\n        var a = self.words[i] | 0;\\n        var b = num.words[j] | 0;\\n        var r = a * b;\\n\\n        var lo = r & 0x3ffffff;\\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\\n        lo = (lo + rword) | 0;\\n        rword = lo & 0x3ffffff;\\n        ncarry = (ncarry + (lo >>> 26)) | 0;\\n\\n        hncarry += ncarry >>> 26;\\n        ncarry &= 0x3ffffff;\\n      }\\n      out.words[k] = rword;\\n      carry = ncarry;\\n      ncarry = hncarry;\\n    }\\n    if (carry !== 0) {\\n      out.words[k] = carry;\\n    } else {\\n      out.length--;\\n    }\\n\\n    return out.strip();\\n  }\\n\\n  function jumboMulTo (self, num, out) {\\n    var fftm = new FFTM();\\n    return fftm.mulp(self, num, out);\\n  }\\n\\n  BN.prototype.mulTo = function mulTo (num, out) {\\n    var res;\\n    var len = this.length + num.length;\\n    if (this.length === 10 && num.length === 10) {\\n      res = comb10MulTo(this, num, out);\\n    } else if (len < 63) {\\n      res = smallMulTo(this, num, out);\\n    } else if (len < 1024) {\\n      res = bigMulTo(this, num, out);\\n    } else {\\n      res = jumboMulTo(this, num, out);\\n    }\\n\\n    return res;\\n  };\\n\\n  // Cooley-Tukey algorithm for FFT\\n  // slightly revisited to rely on looping instead of recursion\\n\\n  function FFTM (x, y) {\\n    this.x = x;\\n    this.y = y;\\n  }\\n\\n  FFTM.prototype.makeRBT = function makeRBT (N) {\\n    var t = new Array(N);\\n    var l = BN.prototype._countBits(N) - 1;\\n    for (var i = 0; i < N; i++) {\\n      t[i] = this.revBin(i, l, N);\\n    }\\n\\n    return t;\\n  };\\n\\n  // Returns binary-reversed representation of `x`\\n  FFTM.prototype.revBin = function revBin (x, l, N) {\\n    if (x === 0 || x === N - 1) return x;\\n\\n    var rb = 0;\\n    for (var i = 0; i < l; i++) {\\n      rb |= (x & 1) << (l - i - 1);\\n      x >>= 1;\\n    }\\n\\n    return rb;\\n  };\\n\\n  // Performs \\\"tweedling\\\" phase, therefore 'emulating'\\n  // behaviour of the recursive algorithm\\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\\n    for (var i = 0; i < N; i++) {\\n      rtws[i] = rws[rbt[i]];\\n      itws[i] = iws[rbt[i]];\\n    }\\n  };\\n\\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\\n    this.permute(rbt, rws, iws, rtws, itws, N);\\n\\n    for (var s = 1; s < N; s <<= 1) {\\n      var l = s << 1;\\n\\n      var rtwdf = Math.cos(2 * Math.PI / l);\\n      var itwdf = Math.sin(2 * Math.PI / l);\\n\\n      for (var p = 0; p < N; p += l) {\\n        var rtwdf_ = rtwdf;\\n        var itwdf_ = itwdf;\\n\\n        for (var j = 0; j < s; j++) {\\n          var re = rtws[p + j];\\n          var ie = itws[p + j];\\n\\n          var ro = rtws[p + j + s];\\n          var io = itws[p + j + s];\\n\\n          var rx = rtwdf_ * ro - itwdf_ * io;\\n\\n          io = rtwdf_ * io + itwdf_ * ro;\\n          ro = rx;\\n\\n          rtws[p + j] = re + ro;\\n          itws[p + j] = ie + io;\\n\\n          rtws[p + j + s] = re - ro;\\n          itws[p + j + s] = ie - io;\\n\\n          /* jshint maxdepth : false */\\n          if (j !== l) {\\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\\n\\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\\n            rtwdf_ = rx;\\n          }\\n        }\\n      }\\n    }\\n  };\\n\\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\\n    var N = Math.max(m, n) | 1;\\n    var odd = N & 1;\\n    var i = 0;\\n    for (N = N / 2 | 0; N; N = N >>> 1) {\\n      i++;\\n    }\\n\\n    return 1 << i + 1 + odd;\\n  };\\n\\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\\n    if (N <= 1) return;\\n\\n    for (var i = 0; i < N / 2; i++) {\\n      var t = rws[i];\\n\\n      rws[i] = rws[N - i - 1];\\n      rws[N - i - 1] = t;\\n\\n      t = iws[i];\\n\\n      iws[i] = -iws[N - i - 1];\\n      iws[N - i - 1] = -t;\\n    }\\n  };\\n\\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\\n    var carry = 0;\\n    for (var i = 0; i < N / 2; i++) {\\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\\n        Math.round(ws[2 * i] / N) +\\n        carry;\\n\\n      ws[i] = w & 0x3ffffff;\\n\\n      if (w < 0x4000000) {\\n        carry = 0;\\n      } else {\\n        carry = w / 0x4000000 | 0;\\n      }\\n    }\\n\\n    return ws;\\n  };\\n\\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\\n    var carry = 0;\\n    for (var i = 0; i < len; i++) {\\n      carry = carry + (ws[i] | 0);\\n\\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\\n    }\\n\\n    // Pad with zeroes\\n    for (i = 2 * len; i < N; ++i) {\\n      rws[i] = 0;\\n    }\\n\\n    assert(carry === 0);\\n    assert((carry & ~0x1fff) === 0);\\n  };\\n\\n  FFTM.prototype.stub = function stub (N) {\\n    var ph = new Array(N);\\n    for (var i = 0; i < N; i++) {\\n      ph[i] = 0;\\n    }\\n\\n    return ph;\\n  };\\n\\n  FFTM.prototype.mulp = function mulp (x, y, out) {\\n    var N = 2 * this.guessLen13b(x.length, y.length);\\n\\n    var rbt = this.makeRBT(N);\\n\\n    var _ = this.stub(N);\\n\\n    var rws = new Array(N);\\n    var rwst = new Array(N);\\n    var iwst = new Array(N);\\n\\n    var nrws = new Array(N);\\n    var nrwst = new Array(N);\\n    var niwst = new Array(N);\\n\\n    var rmws = out.words;\\n    rmws.length = N;\\n\\n    this.convert13b(x.words, x.length, rws, N);\\n    this.convert13b(y.words, y.length, nrws, N);\\n\\n    this.transform(rws, _, rwst, iwst, N, rbt);\\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\\n\\n    for (var i = 0; i < N; i++) {\\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\\n      rwst[i] = rx;\\n    }\\n\\n    this.conjugate(rwst, iwst, N);\\n    this.transform(rwst, iwst, rmws, _, N, rbt);\\n    this.conjugate(rmws, _, N);\\n    this.normalize13b(rmws, N);\\n\\n    out.negative = x.negative ^ y.negative;\\n    out.length = x.length + y.length;\\n    return out.strip();\\n  };\\n\\n  // Multiply `this` by `num`\\n  BN.prototype.mul = function mul (num) {\\n    var out = new BN(null);\\n    out.words = new Array(this.length + num.length);\\n    return this.mulTo(num, out);\\n  };\\n\\n  // Multiply employing FFT\\n  BN.prototype.mulf = function mulf (num) {\\n    var out = new BN(null);\\n    out.words = new Array(this.length + num.length);\\n    return jumboMulTo(this, num, out);\\n  };\\n\\n  // In-place Multiplication\\n  BN.prototype.imul = function imul (num) {\\n    return this.clone().mulTo(num, this);\\n  };\\n\\n  BN.prototype.imuln = function imuln (num) {\\n    assert(typeof num === 'number');\\n    assert(num < 0x4000000);\\n\\n    // Carry\\n    var carry = 0;\\n    for (var i = 0; i < this.length; i++) {\\n      var w = (this.words[i] | 0) * num;\\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\\n      carry >>= 26;\\n      carry += (w / 0x4000000) | 0;\\n      // NOTE: lo is 27bit maximum\\n      carry += lo >>> 26;\\n      this.words[i] = lo & 0x3ffffff;\\n    }\\n\\n    if (carry !== 0) {\\n      this.words[i] = carry;\\n      this.length++;\\n    }\\n\\n    return this;\\n  };\\n\\n  BN.prototype.muln = function muln (num) {\\n    return this.clone().imuln(num);\\n  };\\n\\n  // `this` * `this`\\n  BN.prototype.sqr = function sqr () {\\n    return this.mul(this);\\n  };\\n\\n  // `this` * `this` in-place\\n  BN.prototype.isqr = function isqr () {\\n    return this.imul(this.clone());\\n  };\\n\\n  // Math.pow(`this`, `num`)\\n  BN.prototype.pow = function pow (num) {\\n    var w = toBitArray(num);\\n    if (w.length === 0) return new BN(1);\\n\\n    // Skip leading zeroes\\n    var res = this;\\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\\n      if (w[i] !== 0) break;\\n    }\\n\\n    if (++i < w.length) {\\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\\n        if (w[i] === 0) continue;\\n\\n        res = res.mul(q);\\n      }\\n    }\\n\\n    return res;\\n  };\\n\\n  // Shift-left in-place\\n  BN.prototype.iushln = function iushln (bits) {\\n    assert(typeof bits === 'number' && bits >= 0);\\n    var r = bits % 26;\\n    var s = (bits - r) / 26;\\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\\n    var i;\\n\\n    if (r !== 0) {\\n      var carry = 0;\\n\\n      for (i = 0; i < this.length; i++) {\\n        var newCarry = this.words[i] & carryMask;\\n        var c = ((this.words[i] | 0) - newCarry) << r;\\n        this.words[i] = c | carry;\\n        carry = newCarry >>> (26 - r);\\n      }\\n\\n      if (carry) {\\n        this.words[i] = carry;\\n        this.length++;\\n      }\\n    }\\n\\n    if (s !== 0) {\\n      for (i = this.length - 1; i >= 0; i--) {\\n        this.words[i + s] = this.words[i];\\n      }\\n\\n      for (i = 0; i < s; i++) {\\n        this.words[i] = 0;\\n      }\\n\\n      this.length += s;\\n    }\\n\\n    return this.strip();\\n  };\\n\\n  BN.prototype.ishln = function ishln (bits) {\\n    // TODO(indutny): implement me\\n    assert(this.negative === 0);\\n    return this.iushln(bits);\\n  };\\n\\n  // Shift-right in-place\\n  // NOTE: `hint` is a lowest bit before trailing zeroes\\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\\n    assert(typeof bits === 'number' && bits >= 0);\\n    var h;\\n    if (hint) {\\n      h = (hint - (hint % 26)) / 26;\\n    } else {\\n      h = 0;\\n    }\\n\\n    var r = bits % 26;\\n    var s = Math.min((bits - r) / 26, this.length);\\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\\n    var maskedWords = extended;\\n\\n    h -= s;\\n    h = Math.max(0, h);\\n\\n    // Extended mode, copy masked part\\n    if (maskedWords) {\\n      for (var i = 0; i < s; i++) {\\n        maskedWords.words[i] = this.words[i];\\n      }\\n      maskedWords.length = s;\\n    }\\n\\n    if (s === 0) {\\n      // No-op, we should not move anything at all\\n    } else if (this.length > s) {\\n      this.length -= s;\\n      for (i = 0; i < this.length; i++) {\\n        this.words[i] = this.words[i + s];\\n      }\\n    } else {\\n      this.words[0] = 0;\\n      this.length = 1;\\n    }\\n\\n    var carry = 0;\\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\\n      var word = this.words[i] | 0;\\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\\n      carry = word & mask;\\n    }\\n\\n    // Push carried bits as a mask\\n    if (maskedWords && carry !== 0) {\\n      maskedWords.words[maskedWords.length++] = carry;\\n    }\\n\\n    if (this.length === 0) {\\n      this.words[0] = 0;\\n      this.length = 1;\\n    }\\n\\n    return this.strip();\\n  };\\n\\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\\n    // TODO(indutny): implement me\\n    assert(this.negative === 0);\\n    return this.iushrn(bits, hint, extended);\\n  };\\n\\n  // Shift-left\\n  BN.prototype.shln = function shln (bits) {\\n    return this.clone().ishln(bits);\\n  };\\n\\n  BN.prototype.ushln = function ushln (bits) {\\n    return this.clone().iushln(bits);\\n  };\\n\\n  // Shift-right\\n  BN.prototype.shrn = function shrn (bits) {\\n    return this.clone().ishrn(bits);\\n  };\\n\\n  BN.prototype.ushrn = function ushrn (bits) {\\n    return this.clone().iushrn(bits);\\n  };\\n\\n  // Test if n bit is set\\n  BN.prototype.testn = function testn (bit) {\\n    assert(typeof bit === 'number' && bit >= 0);\\n    var r = bit % 26;\\n    var s = (bit - r) / 26;\\n    var q = 1 << r;\\n\\n    // Fast case: bit is much higher than all existing words\\n    if (this.length <= s) return false;\\n\\n    // Check bit and return\\n    var w = this.words[s];\\n\\n    return !!(w & q);\\n  };\\n\\n  // Return only lowers bits of number (in-place)\\n  BN.prototype.imaskn = function imaskn (bits) {\\n    assert(typeof bits === 'number' && bits >= 0);\\n    var r = bits % 26;\\n    var s = (bits - r) / 26;\\n\\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\\n\\n    if (this.length <= s) {\\n      return this;\\n    }\\n\\n    if (r !== 0) {\\n      s++;\\n    }\\n    this.length = Math.min(s, this.length);\\n\\n    if (r !== 0) {\\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\\n      this.words[this.length - 1] &= mask;\\n    }\\n\\n    return this.strip();\\n  };\\n\\n  // Return only lowers bits of number\\n  BN.prototype.maskn = function maskn (bits) {\\n    return this.clone().imaskn(bits);\\n  };\\n\\n  // Add plain number `num` to `this`\\n  BN.prototype.iaddn = function iaddn (num) {\\n    assert(typeof num === 'number');\\n    assert(num < 0x4000000);\\n    if (num < 0) return this.isubn(-num);\\n\\n    // Possible sign change\\n    if (this.negative !== 0) {\\n      if (this.length === 1 && (this.words[0] | 0) < num) {\\n        this.words[0] = num - (this.words[0] | 0);\\n        this.negative = 0;\\n        return this;\\n      }\\n\\n      this.negative = 0;\\n      this.isubn(num);\\n      this.negative = 1;\\n      return this;\\n    }\\n\\n    // Add without checks\\n    return this._iaddn(num);\\n  };\\n\\n  BN.prototype._iaddn = function _iaddn (num) {\\n    this.words[0] += num;\\n\\n    // Carry\\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\\n      this.words[i] -= 0x4000000;\\n      if (i === this.length - 1) {\\n        this.words[i + 1] = 1;\\n      } else {\\n        this.words[i + 1]++;\\n      }\\n    }\\n    this.length = Math.max(this.length, i + 1);\\n\\n    return this;\\n  };\\n\\n  // Subtract plain number `num` from `this`\\n  BN.prototype.isubn = function isubn (num) {\\n    assert(typeof num === 'number');\\n    assert(num < 0x4000000);\\n    if (num < 0) return this.iaddn(-num);\\n\\n    if (this.negative !== 0) {\\n      this.negative = 0;\\n      this.iaddn(num);\\n      this.negative = 1;\\n      return this;\\n    }\\n\\n    this.words[0] -= num;\\n\\n    if (this.length === 1 && this.words[0] < 0) {\\n      this.words[0] = -this.words[0];\\n      this.negative = 1;\\n    } else {\\n      // Carry\\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\\n        this.words[i] += 0x4000000;\\n        this.words[i + 1] -= 1;\\n      }\\n    }\\n\\n    return this.strip();\\n  };\\n\\n  BN.prototype.addn = function addn (num) {\\n    return this.clone().iaddn(num);\\n  };\\n\\n  BN.prototype.subn = function subn (num) {\\n    return this.clone().isubn(num);\\n  };\\n\\n  BN.prototype.iabs = function iabs () {\\n    this.negative = 0;\\n\\n    return this;\\n  };\\n\\n  BN.prototype.abs = function abs () {\\n    return this.clone().iabs();\\n  };\\n\\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\\n    var len = num.length + shift;\\n    var i;\\n\\n    this._expand(len);\\n\\n    var w;\\n    var carry = 0;\\n    for (i = 0; i < num.length; i++) {\\n      w = (this.words[i + shift] | 0) + carry;\\n      var right = (num.words[i] | 0) * mul;\\n      w -= right & 0x3ffffff;\\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\\n      this.words[i + shift] = w & 0x3ffffff;\\n    }\\n    for (; i < this.length - shift; i++) {\\n      w = (this.words[i + shift] | 0) + carry;\\n      carry = w >> 26;\\n      this.words[i + shift] = w & 0x3ffffff;\\n    }\\n\\n    if (carry === 0) return this.strip();\\n\\n    // Subtraction overflow\\n    assert(carry === -1);\\n    carry = 0;\\n    for (i = 0; i < this.length; i++) {\\n      w = -(this.words[i] | 0) + carry;\\n      carry = w >> 26;\\n      this.words[i] = w & 0x3ffffff;\\n    }\\n    this.negative = 1;\\n\\n    return this.strip();\\n  };\\n\\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\\n    var shift = this.length - num.length;\\n\\n    var a = this.clone();\\n    var b = num;\\n\\n    // Normalize\\n    var bhi = b.words[b.length - 1] | 0;\\n    var bhiBits = this._countBits(bhi);\\n    shift = 26 - bhiBits;\\n    if (shift !== 0) {\\n      b = b.ushln(shift);\\n      a.iushln(shift);\\n      bhi = b.words[b.length - 1] | 0;\\n    }\\n\\n    // Initialize quotient\\n    var m = a.length - b.length;\\n    var q;\\n\\n    if (mode !== 'mod') {\\n      q = new BN(null);\\n      q.length = m + 1;\\n      q.words = new Array(q.length);\\n      for (var i = 0; i < q.length; i++) {\\n        q.words[i] = 0;\\n      }\\n    }\\n\\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\\n    if (diff.negative === 0) {\\n      a = diff;\\n      if (q) {\\n        q.words[m] = 1;\\n      }\\n    }\\n\\n    for (var j = m - 1; j >= 0; j--) {\\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\\n        (a.words[b.length + j - 1] | 0);\\n\\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\\n      // (0x7ffffff)\\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\\n\\n      a._ishlnsubmul(b, qj, j);\\n      while (a.negative !== 0) {\\n        qj--;\\n        a.negative = 0;\\n        a._ishlnsubmul(b, 1, j);\\n        if (!a.isZero()) {\\n          a.negative ^= 1;\\n        }\\n      }\\n      if (q) {\\n        q.words[j] = qj;\\n      }\\n    }\\n    if (q) {\\n      q.strip();\\n    }\\n    a.strip();\\n\\n    // Denormalize\\n    if (mode !== 'div' && shift !== 0) {\\n      a.iushrn(shift);\\n    }\\n\\n    return {\\n      div: q || null,\\n      mod: a\\n    };\\n  };\\n\\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\\n  //       to `div` to request div only, or be absent to\\n  //       request both div & mod\\n  //       2) `positive` is true if unsigned mod is requested\\n  BN.prototype.divmod = function divmod (num, mode, positive) {\\n    assert(!num.isZero());\\n\\n    if (this.isZero()) {\\n      return {\\n        div: new BN(0),\\n        mod: new BN(0)\\n      };\\n    }\\n\\n    var div, mod, res;\\n    if (this.negative !== 0 && num.negative === 0) {\\n      res = this.neg().divmod(num, mode);\\n\\n      if (mode !== 'mod') {\\n        div = res.div.neg();\\n      }\\n\\n      if (mode !== 'div') {\\n        mod = res.mod.neg();\\n        if (positive && mod.negative !== 0) {\\n          mod.iadd(num);\\n        }\\n      }\\n\\n      return {\\n        div: div,\\n        mod: mod\\n      };\\n    }\\n\\n    if (this.negative === 0 && num.negative !== 0) {\\n      res = this.divmod(num.neg(), mode);\\n\\n      if (mode !== 'mod') {\\n        div = res.div.neg();\\n      }\\n\\n      return {\\n        div: div,\\n        mod: res.mod\\n      };\\n    }\\n\\n    if ((this.negative & num.negative) !== 0) {\\n      res = this.neg().divmod(num.neg(), mode);\\n\\n      if (mode !== 'div') {\\n        mod = res.mod.neg();\\n        if (positive && mod.negative !== 0) {\\n          mod.isub(num);\\n        }\\n      }\\n\\n      return {\\n        div: res.div,\\n        mod: mod\\n      };\\n    }\\n\\n    // Both numbers are positive at this point\\n\\n    // Strip both numbers to approximate shift value\\n    if (num.length > this.length || this.cmp(num) < 0) {\\n      return {\\n        div: new BN(0),\\n        mod: this\\n      };\\n    }\\n\\n    // Very short reduction\\n    if (num.length === 1) {\\n      if (mode === 'div') {\\n        return {\\n          div: this.divn(num.words[0]),\\n          mod: null\\n        };\\n      }\\n\\n      if (mode === 'mod') {\\n        return {\\n          div: null,\\n          mod: new BN(this.modn(num.words[0]))\\n        };\\n      }\\n\\n      return {\\n        div: this.divn(num.words[0]),\\n        mod: new BN(this.modn(num.words[0]))\\n      };\\n    }\\n\\n    return this._wordDiv(num, mode);\\n  };\\n\\n  // Find `this` / `num`\\n  BN.prototype.div = function div (num) {\\n    return this.divmod(num, 'div', false).div;\\n  };\\n\\n  // Find `this` % `num`\\n  BN.prototype.mod = function mod (num) {\\n    return this.divmod(num, 'mod', false).mod;\\n  };\\n\\n  BN.prototype.umod = function umod (num) {\\n    return this.divmod(num, 'mod', true).mod;\\n  };\\n\\n  // Find Round(`this` / `num`)\\n  BN.prototype.divRound = function divRound (num) {\\n    var dm = this.divmod(num);\\n\\n    // Fast case - exact division\\n    if (dm.mod.isZero()) return dm.div;\\n\\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\\n\\n    var half = num.ushrn(1);\\n    var r2 = num.andln(1);\\n    var cmp = mod.cmp(half);\\n\\n    // Round down\\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\\n\\n    // Round up\\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\\n  };\\n\\n  BN.prototype.modn = function modn (num) {\\n    assert(num <= 0x3ffffff);\\n    var p = (1 << 26) % num;\\n\\n    var acc = 0;\\n    for (var i = this.length - 1; i >= 0; i--) {\\n      acc = (p * acc + (this.words[i] | 0)) % num;\\n    }\\n\\n    return acc;\\n  };\\n\\n  // In-place division by number\\n  BN.prototype.idivn = function idivn (num) {\\n    assert(num <= 0x3ffffff);\\n\\n    var carry = 0;\\n    for (var i = this.length - 1; i >= 0; i--) {\\n      var w = (this.words[i] | 0) + carry * 0x4000000;\\n      this.words[i] = (w / num) | 0;\\n      carry = w % num;\\n    }\\n\\n    return this.strip();\\n  };\\n\\n  BN.prototype.divn = function divn (num) {\\n    return this.clone().idivn(num);\\n  };\\n\\n  BN.prototype.egcd = function egcd (p) {\\n    assert(p.negative === 0);\\n    assert(!p.isZero());\\n\\n    var x = this;\\n    var y = p.clone();\\n\\n    if (x.negative !== 0) {\\n      x = x.umod(p);\\n    } else {\\n      x = x.clone();\\n    }\\n\\n    // A * x + B * y = x\\n    var A = new BN(1);\\n    var B = new BN(0);\\n\\n    // C * x + D * y = y\\n    var C = new BN(0);\\n    var D = new BN(1);\\n\\n    var g = 0;\\n\\n    while (x.isEven() && y.isEven()) {\\n      x.iushrn(1);\\n      y.iushrn(1);\\n      ++g;\\n    }\\n\\n    var yp = y.clone();\\n    var xp = x.clone();\\n\\n    while (!x.isZero()) {\\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\\n      if (i > 0) {\\n        x.iushrn(i);\\n        while (i-- > 0) {\\n          if (A.isOdd() || B.isOdd()) {\\n            A.iadd(yp);\\n            B.isub(xp);\\n          }\\n\\n          A.iushrn(1);\\n          B.iushrn(1);\\n        }\\n      }\\n\\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\\n      if (j > 0) {\\n        y.iushrn(j);\\n        while (j-- > 0) {\\n          if (C.isOdd() || D.isOdd()) {\\n            C.iadd(yp);\\n            D.isub(xp);\\n          }\\n\\n          C.iushrn(1);\\n          D.iushrn(1);\\n        }\\n      }\\n\\n      if (x.cmp(y) >= 0) {\\n        x.isub(y);\\n        A.isub(C);\\n        B.isub(D);\\n      } else {\\n        y.isub(x);\\n        C.isub(A);\\n        D.isub(B);\\n      }\\n    }\\n\\n    return {\\n      a: C,\\n      b: D,\\n      gcd: y.iushln(g)\\n    };\\n  };\\n\\n  // This is reduced incarnation of the binary EEA\\n  // above, designated to invert members of the\\n  // _prime_ fields F(p) at a maximal speed\\n  BN.prototype._invmp = function _invmp (p) {\\n    assert(p.negative === 0);\\n    assert(!p.isZero());\\n\\n    var a = this;\\n    var b = p.clone();\\n\\n    if (a.negative !== 0) {\\n      a = a.umod(p);\\n    } else {\\n      a = a.clone();\\n    }\\n\\n    var x1 = new BN(1);\\n    var x2 = new BN(0);\\n\\n    var delta = b.clone();\\n\\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\\n      if (i > 0) {\\n        a.iushrn(i);\\n        while (i-- > 0) {\\n          if (x1.isOdd()) {\\n            x1.iadd(delta);\\n          }\\n\\n          x1.iushrn(1);\\n        }\\n      }\\n\\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\\n      if (j > 0) {\\n        b.iushrn(j);\\n        while (j-- > 0) {\\n          if (x2.isOdd()) {\\n            x2.iadd(delta);\\n          }\\n\\n          x2.iushrn(1);\\n        }\\n      }\\n\\n      if (a.cmp(b) >= 0) {\\n        a.isub(b);\\n        x1.isub(x2);\\n      } else {\\n        b.isub(a);\\n        x2.isub(x1);\\n      }\\n    }\\n\\n    var res;\\n    if (a.cmpn(1) === 0) {\\n      res = x1;\\n    } else {\\n      res = x2;\\n    }\\n\\n    if (res.cmpn(0) < 0) {\\n      res.iadd(p);\\n    }\\n\\n    return res;\\n  };\\n\\n  BN.prototype.gcd = function gcd (num) {\\n    if (this.isZero()) return num.abs();\\n    if (num.isZero()) return this.abs();\\n\\n    var a = this.clone();\\n    var b = num.clone();\\n    a.negative = 0;\\n    b.negative = 0;\\n\\n    // Remove common factor of two\\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\\n      a.iushrn(1);\\n      b.iushrn(1);\\n    }\\n\\n    do {\\n      while (a.isEven()) {\\n        a.iushrn(1);\\n      }\\n      while (b.isEven()) {\\n        b.iushrn(1);\\n      }\\n\\n      var r = a.cmp(b);\\n      if (r < 0) {\\n        // Swap `a` and `b` to make `a` always bigger than `b`\\n        var t = a;\\n        a = b;\\n        b = t;\\n      } else if (r === 0 || b.cmpn(1) === 0) {\\n        break;\\n      }\\n\\n      a.isub(b);\\n    } while (true);\\n\\n    return b.iushln(shift);\\n  };\\n\\n  // Invert number in the field F(num)\\n  BN.prototype.invm = function invm (num) {\\n    return this.egcd(num).a.umod(num);\\n  };\\n\\n  BN.prototype.isEven = function isEven () {\\n    return (this.words[0] & 1) === 0;\\n  };\\n\\n  BN.prototype.isOdd = function isOdd () {\\n    return (this.words[0] & 1) === 1;\\n  };\\n\\n  // And first word and num\\n  BN.prototype.andln = function andln (num) {\\n    return this.words[0] & num;\\n  };\\n\\n  // Increment at the bit position in-line\\n  BN.prototype.bincn = function bincn (bit) {\\n    assert(typeof bit === 'number');\\n    var r = bit % 26;\\n    var s = (bit - r) / 26;\\n    var q = 1 << r;\\n\\n    // Fast case: bit is much higher than all existing words\\n    if (this.length <= s) {\\n      this._expand(s + 1);\\n      this.words[s] |= q;\\n      return this;\\n    }\\n\\n    // Add bit and propagate, if needed\\n    var carry = q;\\n    for (var i = s; carry !== 0 && i < this.length; i++) {\\n      var w = this.words[i] | 0;\\n      w += carry;\\n      carry = w >>> 26;\\n      w &= 0x3ffffff;\\n      this.words[i] = w;\\n    }\\n    if (carry !== 0) {\\n      this.words[i] = carry;\\n      this.length++;\\n    }\\n    return this;\\n  };\\n\\n  BN.prototype.isZero = function isZero () {\\n    return this.length === 1 && this.words[0] === 0;\\n  };\\n\\n  BN.prototype.cmpn = function cmpn (num) {\\n    var negative = num < 0;\\n\\n    if (this.negative !== 0 && !negative) return -1;\\n    if (this.negative === 0 && negative) return 1;\\n\\n    this.strip();\\n\\n    var res;\\n    if (this.length > 1) {\\n      res = 1;\\n    } else {\\n      if (negative) {\\n        num = -num;\\n      }\\n\\n      assert(num <= 0x3ffffff, 'Number is too big');\\n\\n      var w = this.words[0] | 0;\\n      res = w === num ? 0 : w < num ? -1 : 1;\\n    }\\n    if (this.negative !== 0) return -res | 0;\\n    return res;\\n  };\\n\\n  // Compare two numbers and return:\\n  // 1 - if `this` > `num`\\n  // 0 - if `this` == `num`\\n  // -1 - if `this` < `num`\\n  BN.prototype.cmp = function cmp (num) {\\n    if (this.negative !== 0 && num.negative === 0) return -1;\\n    if (this.negative === 0 && num.negative !== 0) return 1;\\n\\n    var res = this.ucmp(num);\\n    if (this.negative !== 0) return -res | 0;\\n    return res;\\n  };\\n\\n  // Unsigned comparison\\n  BN.prototype.ucmp = function ucmp (num) {\\n    // At this point both numbers have the same sign\\n    if (this.length > num.length) return 1;\\n    if (this.length < num.length) return -1;\\n\\n    var res = 0;\\n    for (var i = this.length - 1; i >= 0; i--) {\\n      var a = this.words[i] | 0;\\n      var b = num.words[i] | 0;\\n\\n      if (a === b) continue;\\n      if (a < b) {\\n        res = -1;\\n      } else if (a > b) {\\n        res = 1;\\n      }\\n      break;\\n    }\\n    return res;\\n  };\\n\\n  BN.prototype.gtn = function gtn (num) {\\n    return this.cmpn(num) === 1;\\n  };\\n\\n  BN.prototype.gt = function gt (num) {\\n    return this.cmp(num) === 1;\\n  };\\n\\n  BN.prototype.gten = function gten (num) {\\n    return this.cmpn(num) >= 0;\\n  };\\n\\n  BN.prototype.gte = function gte (num) {\\n    return this.cmp(num) >= 0;\\n  };\\n\\n  BN.prototype.ltn = function ltn (num) {\\n    return this.cmpn(num) === -1;\\n  };\\n\\n  BN.prototype.lt = function lt (num) {\\n    return this.cmp(num) === -1;\\n  };\\n\\n  BN.prototype.lten = function lten (num) {\\n    return this.cmpn(num) <= 0;\\n  };\\n\\n  BN.prototype.lte = function lte (num) {\\n    return this.cmp(num) <= 0;\\n  };\\n\\n  BN.prototype.eqn = function eqn (num) {\\n    return this.cmpn(num) === 0;\\n  };\\n\\n  BN.prototype.eq = function eq (num) {\\n    return this.cmp(num) === 0;\\n  };\\n\\n  //\\n  // A reduce context, could be using montgomery or something better, depending\\n  // on the `m` itself.\\n  //\\n  BN.red = function red (num) {\\n    return new Red(num);\\n  };\\n\\n  BN.prototype.toRed = function toRed (ctx) {\\n    assert(!this.red, 'Already a number in reduction context');\\n    assert(this.negative === 0, 'red works only with positives');\\n    return ctx.convertTo(this)._forceRed(ctx);\\n  };\\n\\n  BN.prototype.fromRed = function fromRed () {\\n    assert(this.red, 'fromRed works only with numbers in reduction context');\\n    return this.red.convertFrom(this);\\n  };\\n\\n  BN.prototype._forceRed = function _forceRed (ctx) {\\n    this.red = ctx;\\n    return this;\\n  };\\n\\n  BN.prototype.forceRed = function forceRed (ctx) {\\n    assert(!this.red, 'Already a number in reduction context');\\n    return this._forceRed(ctx);\\n  };\\n\\n  BN.prototype.redAdd = function redAdd (num) {\\n    assert(this.red, 'redAdd works only with red numbers');\\n    return this.red.add(this, num);\\n  };\\n\\n  BN.prototype.redIAdd = function redIAdd (num) {\\n    assert(this.red, 'redIAdd works only with red numbers');\\n    return this.red.iadd(this, num);\\n  };\\n\\n  BN.prototype.redSub = function redSub (num) {\\n    assert(this.red, 'redSub works only with red numbers');\\n    return this.red.sub(this, num);\\n  };\\n\\n  BN.prototype.redISub = function redISub (num) {\\n    assert(this.red, 'redISub works only with red numbers');\\n    return this.red.isub(this, num);\\n  };\\n\\n  BN.prototype.redShl = function redShl (num) {\\n    assert(this.red, 'redShl works only with red numbers');\\n    return this.red.shl(this, num);\\n  };\\n\\n  BN.prototype.redMul = function redMul (num) {\\n    assert(this.red, 'redMul works only with red numbers');\\n    this.red._verify2(this, num);\\n    return this.red.mul(this, num);\\n  };\\n\\n  BN.prototype.redIMul = function redIMul (num) {\\n    assert(this.red, 'redMul works only with red numbers');\\n    this.red._verify2(this, num);\\n    return this.red.imul(this, num);\\n  };\\n\\n  BN.prototype.redSqr = function redSqr () {\\n    assert(this.red, 'redSqr works only with red numbers');\\n    this.red._verify1(this);\\n    return this.red.sqr(this);\\n  };\\n\\n  BN.prototype.redISqr = function redISqr () {\\n    assert(this.red, 'redISqr works only with red numbers');\\n    this.red._verify1(this);\\n    return this.red.isqr(this);\\n  };\\n\\n  // Square root over p\\n  BN.prototype.redSqrt = function redSqrt () {\\n    assert(this.red, 'redSqrt works only with red numbers');\\n    this.red._verify1(this);\\n    return this.red.sqrt(this);\\n  };\\n\\n  BN.prototype.redInvm = function redInvm () {\\n    assert(this.red, 'redInvm works only with red numbers');\\n    this.red._verify1(this);\\n    return this.red.invm(this);\\n  };\\n\\n  // Return negative clone of `this` % `red modulo`\\n  BN.prototype.redNeg = function redNeg () {\\n    assert(this.red, 'redNeg works only with red numbers');\\n    this.red._verify1(this);\\n    return this.red.neg(this);\\n  };\\n\\n  BN.prototype.redPow = function redPow (num) {\\n    assert(this.red && !num.red, 'redPow(normalNum)');\\n    this.red._verify1(this);\\n    return this.red.pow(this, num);\\n  };\\n\\n  // Prime numbers with efficient reduction\\n  var primes = {\\n    k256: null,\\n    p224: null,\\n    p192: null,\\n    p25519: null\\n  };\\n\\n  // Pseudo-Mersenne prime\\n  function MPrime (name, p) {\\n    // P = 2 ^ N - K\\n    this.name = name;\\n    this.p = new BN(p, 16);\\n    this.n = this.p.bitLength();\\n    this.k = new BN(1).iushln(this.n).isub(this.p);\\n\\n    this.tmp = this._tmp();\\n  }\\n\\n  MPrime.prototype._tmp = function _tmp () {\\n    var tmp = new BN(null);\\n    tmp.words = new Array(Math.ceil(this.n / 13));\\n    return tmp;\\n  };\\n\\n  MPrime.prototype.ireduce = function ireduce (num) {\\n    // Assumes that `num` is less than `P^2`\\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\\n    var r = num;\\n    var rlen;\\n\\n    do {\\n      this.split(r, this.tmp);\\n      r = this.imulK(r);\\n      r = r.iadd(this.tmp);\\n      rlen = r.bitLength();\\n    } while (rlen > this.n);\\n\\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\\n    if (cmp === 0) {\\n      r.words[0] = 0;\\n      r.length = 1;\\n    } else if (cmp > 0) {\\n      r.isub(this.p);\\n    } else {\\n      r.strip();\\n    }\\n\\n    return r;\\n  };\\n\\n  MPrime.prototype.split = function split (input, out) {\\n    input.iushrn(this.n, 0, out);\\n  };\\n\\n  MPrime.prototype.imulK = function imulK (num) {\\n    return num.imul(this.k);\\n  };\\n\\n  function K256 () {\\n    MPrime.call(\\n      this,\\n      'k256',\\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\\n  }\\n  inherits(K256, MPrime);\\n\\n  K256.prototype.split = function split (input, output) {\\n    // 256 = 9 * 26 + 22\\n    var mask = 0x3fffff;\\n\\n    var outLen = Math.min(input.length, 9);\\n    for (var i = 0; i < outLen; i++) {\\n      output.words[i] = input.words[i];\\n    }\\n    output.length = outLen;\\n\\n    if (input.length <= 9) {\\n      input.words[0] = 0;\\n      input.length = 1;\\n      return;\\n    }\\n\\n    // Shift by 9 limbs\\n    var prev = input.words[9];\\n    output.words[output.length++] = prev & mask;\\n\\n    for (i = 10; i < input.length; i++) {\\n      var next = input.words[i] | 0;\\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\\n      prev = next;\\n    }\\n    prev >>>= 22;\\n    input.words[i - 10] = prev;\\n    if (prev === 0 && input.length > 10) {\\n      input.length -= 10;\\n    } else {\\n      input.length -= 9;\\n    }\\n  };\\n\\n  K256.prototype.imulK = function imulK (num) {\\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\\n    num.words[num.length] = 0;\\n    num.words[num.length + 1] = 0;\\n    num.length += 2;\\n\\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\\n    var lo = 0;\\n    for (var i = 0; i < num.length; i++) {\\n      var w = num.words[i] | 0;\\n      lo += w * 0x3d1;\\n      num.words[i] = lo & 0x3ffffff;\\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\\n    }\\n\\n    // Fast length reduction\\n    if (num.words[num.length - 1] === 0) {\\n      num.length--;\\n      if (num.words[num.length - 1] === 0) {\\n        num.length--;\\n      }\\n    }\\n    return num;\\n  };\\n\\n  function P224 () {\\n    MPrime.call(\\n      this,\\n      'p224',\\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\\n  }\\n  inherits(P224, MPrime);\\n\\n  function P192 () {\\n    MPrime.call(\\n      this,\\n      'p192',\\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\\n  }\\n  inherits(P192, MPrime);\\n\\n  function P25519 () {\\n    // 2 ^ 255 - 19\\n    MPrime.call(\\n      this,\\n      '25519',\\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\\n  }\\n  inherits(P25519, MPrime);\\n\\n  P25519.prototype.imulK = function imulK (num) {\\n    // K = 0x13\\n    var carry = 0;\\n    for (var i = 0; i < num.length; i++) {\\n      var hi = (num.words[i] | 0) * 0x13 + carry;\\n      var lo = hi & 0x3ffffff;\\n      hi >>>= 26;\\n\\n      num.words[i] = lo;\\n      carry = hi;\\n    }\\n    if (carry !== 0) {\\n      num.words[num.length++] = carry;\\n    }\\n    return num;\\n  };\\n\\n  // Exported mostly for testing purposes, use plain name instead\\n  BN._prime = function prime (name) {\\n    // Cached version of prime\\n    if (primes[name]) return primes[name];\\n\\n    var prime;\\n    if (name === 'k256') {\\n      prime = new K256();\\n    } else if (name === 'p224') {\\n      prime = new P224();\\n    } else if (name === 'p192') {\\n      prime = new P192();\\n    } else if (name === 'p25519') {\\n      prime = new P25519();\\n    } else {\\n      throw new Error('Unknown prime ' + name);\\n    }\\n    primes[name] = prime;\\n\\n    return prime;\\n  };\\n\\n  //\\n  // Base reduction engine\\n  //\\n  function Red (m) {\\n    if (typeof m === 'string') {\\n      var prime = BN._prime(m);\\n      this.m = prime.p;\\n      this.prime = prime;\\n    } else {\\n      assert(m.gtn(1), 'modulus must be greater than 1');\\n      this.m = m;\\n      this.prime = null;\\n    }\\n  }\\n\\n  Red.prototype._verify1 = function _verify1 (a) {\\n    assert(a.negative === 0, 'red works only with positives');\\n    assert(a.red, 'red works only with red numbers');\\n  };\\n\\n  Red.prototype._verify2 = function _verify2 (a, b) {\\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\\n    assert(a.red && a.red === b.red,\\n      'red works only with red numbers');\\n  };\\n\\n  Red.prototype.imod = function imod (a) {\\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\\n    return a.umod(this.m)._forceRed(this);\\n  };\\n\\n  Red.prototype.neg = function neg (a) {\\n    if (a.isZero()) {\\n      return a.clone();\\n    }\\n\\n    return this.m.sub(a)._forceRed(this);\\n  };\\n\\n  Red.prototype.add = function add (a, b) {\\n    this._verify2(a, b);\\n\\n    var res = a.add(b);\\n    if (res.cmp(this.m) >= 0) {\\n      res.isub(this.m);\\n    }\\n    return res._forceRed(this);\\n  };\\n\\n  Red.prototype.iadd = function iadd (a, b) {\\n    this._verify2(a, b);\\n\\n    var res = a.iadd(b);\\n    if (res.cmp(this.m) >= 0) {\\n      res.isub(this.m);\\n    }\\n    return res;\\n  };\\n\\n  Red.prototype.sub = function sub (a, b) {\\n    this._verify2(a, b);\\n\\n    var res = a.sub(b);\\n    if (res.cmpn(0) < 0) {\\n      res.iadd(this.m);\\n    }\\n    return res._forceRed(this);\\n  };\\n\\n  Red.prototype.isub = function isub (a, b) {\\n    this._verify2(a, b);\\n\\n    var res = a.isub(b);\\n    if (res.cmpn(0) < 0) {\\n      res.iadd(this.m);\\n    }\\n    return res;\\n  };\\n\\n  Red.prototype.shl = function shl (a, num) {\\n    this._verify1(a);\\n    return this.imod(a.ushln(num));\\n  };\\n\\n  Red.prototype.imul = function imul (a, b) {\\n    this._verify2(a, b);\\n    return this.imod(a.imul(b));\\n  };\\n\\n  Red.prototype.mul = function mul (a, b) {\\n    this._verify2(a, b);\\n    return this.imod(a.mul(b));\\n  };\\n\\n  Red.prototype.isqr = function isqr (a) {\\n    return this.imul(a, a.clone());\\n  };\\n\\n  Red.prototype.sqr = function sqr (a) {\\n    return this.mul(a, a);\\n  };\\n\\n  Red.prototype.sqrt = function sqrt (a) {\\n    if (a.isZero()) return a.clone();\\n\\n    var mod3 = this.m.andln(3);\\n    assert(mod3 % 2 === 1);\\n\\n    // Fast case\\n    if (mod3 === 3) {\\n      var pow = this.m.add(new BN(1)).iushrn(2);\\n      return this.pow(a, pow);\\n    }\\n\\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\\n    //\\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\\n    var q = this.m.subn(1);\\n    var s = 0;\\n    while (!q.isZero() && q.andln(1) === 0) {\\n      s++;\\n      q.iushrn(1);\\n    }\\n    assert(!q.isZero());\\n\\n    var one = new BN(1).toRed(this);\\n    var nOne = one.redNeg();\\n\\n    // Find quadratic non-residue\\n    // NOTE: Max is such because of generalized Riemann hypothesis.\\n    var lpow = this.m.subn(1).iushrn(1);\\n    var z = this.m.bitLength();\\n    z = new BN(2 * z * z).toRed(this);\\n\\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\\n      z.redIAdd(nOne);\\n    }\\n\\n    var c = this.pow(z, q);\\n    var r = this.pow(a, q.addn(1).iushrn(1));\\n    var t = this.pow(a, q);\\n    var m = s;\\n    while (t.cmp(one) !== 0) {\\n      var tmp = t;\\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\\n        tmp = tmp.redSqr();\\n      }\\n      assert(i < m);\\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\\n\\n      r = r.redMul(b);\\n      c = b.redSqr();\\n      t = t.redMul(c);\\n      m = i;\\n    }\\n\\n    return r;\\n  };\\n\\n  Red.prototype.invm = function invm (a) {\\n    var inv = a._invmp(this.m);\\n    if (inv.negative !== 0) {\\n      inv.negative = 0;\\n      return this.imod(inv).redNeg();\\n    } else {\\n      return this.imod(inv);\\n    }\\n  };\\n\\n  Red.prototype.pow = function pow (a, num) {\\n    if (num.isZero()) return new BN(1).toRed(this);\\n    if (num.cmpn(1) === 0) return a.clone();\\n\\n    var windowSize = 4;\\n    var wnd = new Array(1 << windowSize);\\n    wnd[0] = new BN(1).toRed(this);\\n    wnd[1] = a;\\n    for (var i = 2; i < wnd.length; i++) {\\n      wnd[i] = this.mul(wnd[i - 1], a);\\n    }\\n\\n    var res = wnd[0];\\n    var current = 0;\\n    var currentLen = 0;\\n    var start = num.bitLength() % 26;\\n    if (start === 0) {\\n      start = 26;\\n    }\\n\\n    for (i = num.length - 1; i >= 0; i--) {\\n      var word = num.words[i];\\n      for (var j = start - 1; j >= 0; j--) {\\n        var bit = (word >> j) & 1;\\n        if (res !== wnd[0]) {\\n          res = this.sqr(res);\\n        }\\n\\n        if (bit === 0 && current === 0) {\\n          currentLen = 0;\\n          continue;\\n        }\\n\\n        current <<= 1;\\n        current |= bit;\\n        currentLen++;\\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\\n\\n        res = this.mul(res, wnd[current]);\\n        currentLen = 0;\\n        current = 0;\\n      }\\n      start = 26;\\n    }\\n\\n    return res;\\n  };\\n\\n  Red.prototype.convertTo = function convertTo (num) {\\n    var r = num.umod(this.m);\\n\\n    return r === num ? r.clone() : r;\\n  };\\n\\n  Red.prototype.convertFrom = function convertFrom (num) {\\n    var res = num.clone();\\n    res.red = null;\\n    return res;\\n  };\\n\\n  //\\n  // Montgomery method engine\\n  //\\n\\n  BN.mont = function mont (num) {\\n    return new Mont(num);\\n  };\\n\\n  function Mont (m) {\\n    Red.call(this, m);\\n\\n    this.shift = this.m.bitLength();\\n    if (this.shift % 26 !== 0) {\\n      this.shift += 26 - (this.shift % 26);\\n    }\\n\\n    this.r = new BN(1).iushln(this.shift);\\n    this.r2 = this.imod(this.r.sqr());\\n    this.rinv = this.r._invmp(this.m);\\n\\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\\n    this.minv = this.minv.umod(this.r);\\n    this.minv = this.r.sub(this.minv);\\n  }\\n  inherits(Mont, Red);\\n\\n  Mont.prototype.convertTo = function convertTo (num) {\\n    return this.imod(num.ushln(this.shift));\\n  };\\n\\n  Mont.prototype.convertFrom = function convertFrom (num) {\\n    var r = this.imod(num.mul(this.rinv));\\n    r.red = null;\\n    return r;\\n  };\\n\\n  Mont.prototype.imul = function imul (a, b) {\\n    if (a.isZero() || b.isZero()) {\\n      a.words[0] = 0;\\n      a.length = 1;\\n      return a;\\n    }\\n\\n    var t = a.imul(b);\\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\\n    var u = t.isub(c).iushrn(this.shift);\\n    var res = u;\\n\\n    if (u.cmp(this.m) >= 0) {\\n      res = u.isub(this.m);\\n    } else if (u.cmpn(0) < 0) {\\n      res = u.iadd(this.m);\\n    }\\n\\n    return res._forceRed(this);\\n  };\\n\\n  Mont.prototype.mul = function mul (a, b) {\\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\\n\\n    var t = a.mul(b);\\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\\n    var u = t.isub(c).iushrn(this.shift);\\n    var res = u;\\n    if (u.cmp(this.m) >= 0) {\\n      res = u.isub(this.m);\\n    } else if (u.cmpn(0) < 0) {\\n      res = u.iadd(this.m);\\n    }\\n\\n    return res._forceRed(this);\\n  };\\n\\n  Mont.prototype.invm = function invm (a) {\\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\\n    return res._forceRed(this);\\n  };\\n})(typeof module === 'undefined' || module, this);\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{\"OZ/i\":function(t,i,r){(function(t){!function(t,i){\"use strict\";function h(t,i){if(!t)throw new Error(i||\"Assertion failed\")}function n(t,i){t.super_=i;var r=function(){};r.prototype=i.prototype,t.prototype=new r,t.prototype.constructor=t}function e(t,i,r){if(e.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&(\"le\"!==i&&\"be\"!==i||(r=i,i=10),this._init(t||0,i||10,r||\"be\"))}var o;\"object\"==typeof t?t.exports=e:i.BN=e,e.BN=e,e.wordSize=26;try{o=r(2).Buffer}catch(t){}function s(t,i,r){for(var h=0,n=Math.min(t.length,r),e=i;e<n;e++){var o=t.charCodeAt(e)-48;h<<=4,h|=o>=49&&o<=54?o-49+10:o>=17&&o<=22?o-17+10:15&o}return h}function u(t,i,r,h){for(var n=0,e=Math.min(t.length,r),o=i;o<e;o++){var s=t.charCodeAt(o)-48;n*=h,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}e.isBN=function(t){return t instanceof e||null!==t&&\"object\"==typeof t&&t.constructor.wordSize===e.wordSize&&Array.isArray(t.words)},e.max=function(t,i){return t.cmp(i)>0?t:i},e.min=function(t,i){return t.cmp(i)<0?t:i},e.prototype._init=function(t,i,r){if(\"number\"==typeof t)return this._initNumber(t,i,r);if(\"object\"==typeof t)return this._initArray(t,i,r);\"hex\"===i&&(i=16),h(i===(0|i)&&i>=2&&i<=36);var n=0;\"-\"===(t=t.toString().replace(/\\s+/g,\"\"))[0]&&n++,16===i?this._parseHex(t,n):this._parseBase(t,i,n),\"-\"===t[0]&&(this.negative=1),this.strip(),\"le\"===r&&this._initArray(this.toArray(),i,r)},e.prototype._initNumber=function(t,i,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(h(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),\"le\"===r&&this._initArray(this.toArray(),i,r)},e.prototype._initArray=function(t,i,r){if(h(\"number\"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var e,o,s=0;if(\"be\"===r)for(n=t.length-1,e=0;n>=0;n-=3)o=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[e]|=o<<s&67108863,this.words[e+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,e++);else if(\"le\"===r)for(n=0,e=0;n<t.length;n+=3)o=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[e]|=o<<s&67108863,this.words[e+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,e++);return this.strip()},e.prototype._parseHex=function(t,i){this.length=Math.ceil((t.length-i)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var h,n,e=0;for(r=t.length-6,h=0;r>=i;r-=6)n=s(t,r,r+6),this.words[h]|=n<<e&67108863,this.words[h+1]|=n>>>26-e&4194303,(e+=24)>=26&&(e-=26,h++);r+6!==i&&(n=s(t,i,r+6),this.words[h]|=n<<e&67108863,this.words[h+1]|=n>>>26-e&4194303),this.strip()},e.prototype._parseBase=function(t,i,r){this.words=[0],this.length=1;for(var h=0,n=1;n<=67108863;n*=i)h++;h--,n=n/i|0;for(var e=t.length-r,o=e%h,s=Math.min(e,e-o)+r,a=0,l=r;l<s;l+=h)a=u(t,l,l+h,i),this.imuln(n),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a);if(0!==o){var m=1;for(a=u(t,l,t.length,i),l=0;l<o;l++)m*=i;this.imuln(m),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a)}},e.prototype.copy=function(t){t.words=new Array(this.length);for(var i=0;i<this.length;i++)t.words[i]=this.words[i];t.length=this.length,t.negative=this.negative,t.red=this.red},e.prototype.clone=function(){var t=new e(null);return this.copy(t),t},e.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},e.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},e.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},e.prototype.inspect=function(){return(this.red?\"<BN-R: \":\"<BN: \")+this.toString(16)+\">\"};var a=[\"\",\"0\",\"00\",\"000\",\"0000\",\"00000\",\"000000\",\"0000000\",\"00000000\",\"000000000\",\"0000000000\",\"00000000000\",\"000000000000\",\"0000000000000\",\"00000000000000\",\"000000000000000\",\"0000000000000000\",\"00000000000000000\",\"000000000000000000\",\"0000000000000000000\",\"00000000000000000000\",\"000000000000000000000\",\"0000000000000000000000\",\"00000000000000000000000\",\"000000000000000000000000\",\"0000000000000000000000000\"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],m=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function f(t,i,r){r.negative=i.negative^t.negative;var h=t.length+i.length|0;r.length=h,h=h-1|0;var n=0|t.words[0],e=0|i.words[0],o=n*e,s=67108863&o,u=o/67108864|0;r.words[0]=s;for(var a=1;a<h;a++){for(var l=u>>>26,m=67108863&u,f=Math.min(a,i.length-1),d=Math.max(0,a-t.length+1);d<=f;d++){var p=a-d|0;l+=(o=(n=0|t.words[p])*(e=0|i.words[d])+m)/67108864|0,m=67108863&o}r.words[a]=0|m,u=0|l}return 0!==u?r.words[a]=0|u:r.length--,r.strip()}e.prototype.toString=function(t,i){var r;if(i=0|i||1,16===(t=t||10)||\"hex\"===t){r=\"\";for(var n=0,e=0,o=0;o<this.length;o++){var s=this.words[o],u=(16777215&(s<<n|e)).toString(16);r=0!==(e=s>>>24-n&16777215)||o!==this.length-1?a[6-u.length]+u+r:u+r,(n+=2)>=26&&(n-=26,o--)}for(0!==e&&(r=e.toString(16)+r);r.length%i!=0;)r=\"0\"+r;return 0!==this.negative&&(r=\"-\"+r),r}if(t===(0|t)&&t>=2&&t<=36){var f=l[t],d=m[t];r=\"\";var p=this.clone();for(p.negative=0;!p.isZero();){var M=p.modn(d).toString(t);r=(p=p.idivn(d)).isZero()?M+r:a[f-M.length]+M+r}for(this.isZero()&&(r=\"0\"+r);r.length%i!=0;)r=\"0\"+r;return 0!==this.negative&&(r=\"-\"+r),r}h(!1,\"Base should be between 2 and 36\")},e.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&h(!1,\"Number can only safely store up to 53 bits\"),0!==this.negative?-t:t},e.prototype.toJSON=function(){return this.toString(16)},e.prototype.toBuffer=function(t,i){return h(void 0!==o),this.toArrayLike(o,t,i)},e.prototype.toArray=function(t,i){return this.toArrayLike(Array,t,i)},e.prototype.toArrayLike=function(t,i,r){var n=this.byteLength(),e=r||Math.max(1,n);h(n<=e,\"byte array longer than desired length\"),h(e>0,\"Requested array length <= 0\"),this.strip();var o,s,u=\"le\"===i,a=new t(e),l=this.clone();if(u){for(s=0;!l.isZero();s++)o=l.andln(255),l.iushrn(8),a[s]=o;for(;s<e;s++)a[s]=0}else{for(s=0;s<e-n;s++)a[s]=0;for(s=0;!l.isZero();s++)o=l.andln(255),l.iushrn(8),a[e-s-1]=o}return a},Math.clz32?e.prototype._countBits=function(t){return 32-Math.clz32(t)}:e.prototype._countBits=function(t){var i=t,r=0;return i>=4096&&(r+=13,i>>>=13),i>=64&&(r+=7,i>>>=7),i>=8&&(r+=4,i>>>=4),i>=2&&(r+=2,i>>>=2),r+i},e.prototype._zeroBits=function(t){if(0===t)return 26;var i=t,r=0;return 0==(8191&i)&&(r+=13,i>>>=13),0==(127&i)&&(r+=7,i>>>=7),0==(15&i)&&(r+=4,i>>>=4),0==(3&i)&&(r+=2,i>>>=2),0==(1&i)&&r++,r},e.prototype.bitLength=function(){var t=this.words[this.length-1],i=this._countBits(t);return 26*(this.length-1)+i},e.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,i=0;i<this.length;i++){var r=this._zeroBits(this.words[i]);if(t+=r,26!==r)break}return t},e.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},e.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},e.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},e.prototype.isNeg=function(){return 0!==this.negative},e.prototype.neg=function(){return this.clone().ineg()},e.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},e.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var i=0;i<t.length;i++)this.words[i]=this.words[i]|t.words[i];return this.strip()},e.prototype.ior=function(t){return h(0==(this.negative|t.negative)),this.iuor(t)},e.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},e.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},e.prototype.iuand=function(t){var i;i=this.length>t.length?t:this;for(var r=0;r<i.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=i.length,this.strip()},e.prototype.iand=function(t){return h(0==(this.negative|t.negative)),this.iuand(t)},e.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},e.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},e.prototype.iuxor=function(t){var i,r;this.length>t.length?(i=this,r=t):(i=t,r=this);for(var h=0;h<r.length;h++)this.words[h]=i.words[h]^r.words[h];if(this!==i)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=i.length,this.strip()},e.prototype.ixor=function(t){return h(0==(this.negative|t.negative)),this.iuxor(t)},e.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},e.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},e.prototype.inotn=function(t){h(\"number\"==typeof t&&t>=0);var i=0|Math.ceil(t/26),r=t%26;this._expand(i),r>0&&i--;for(var n=0;n<i;n++)this.words[n]=67108863&~this.words[n];return r>0&&(this.words[n]=~this.words[n]&67108863>>26-r),this.strip()},e.prototype.notn=function(t){return this.clone().inotn(t)},e.prototype.setn=function(t,i){h(\"number\"==typeof t&&t>=0);var r=t/26|0,n=t%26;return this._expand(r+1),this.words[r]=i?this.words[r]|1<<n:this.words[r]&~(1<<n),this.strip()},e.prototype.iadd=function(t){var i,r,h;if(0!==this.negative&&0===t.negative)return this.negative=0,i=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,i=this.isub(t),t.negative=1,i._normSign();this.length>t.length?(r=this,h=t):(r=t,h=this);for(var n=0,e=0;e<h.length;e++)i=(0|r.words[e])+(0|h.words[e])+n,this.words[e]=67108863&i,n=i>>>26;for(;0!==n&&e<r.length;e++)i=(0|r.words[e])+n,this.words[e]=67108863&i,n=i>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;e<r.length;e++)this.words[e]=r.words[e];return this},e.prototype.add=function(t){var i;return 0!==t.negative&&0===this.negative?(t.negative=0,i=this.sub(t),t.negative^=1,i):0===t.negative&&0!==this.negative?(this.negative=0,i=t.sub(this),this.negative=1,i):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},e.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var i=this.iadd(t);return t.negative=1,i._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,h,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,h=t):(r=t,h=this);for(var e=0,o=0;o<h.length;o++)e=(i=(0|r.words[o])-(0|h.words[o])+e)>>26,this.words[o]=67108863&i;for(;0!==e&&o<r.length;o++)e=(i=(0|r.words[o])+e)>>26,this.words[o]=67108863&i;if(0===e&&o<r.length&&r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this.length=Math.max(this.length,o),r!==this&&(this.negative=1),this.strip()},e.prototype.sub=function(t){return this.clone().isub(t)};var d=function(t,i,r){var h,n,e,o=t.words,s=i.words,u=r.words,a=0,l=0|o[0],m=8191&l,f=l>>>13,d=0|o[1],p=8191&d,M=d>>>13,v=0|o[2],g=8191&v,c=v>>>13,w=0|o[3],y=8191&w,b=w>>>13,_=0|o[4],k=8191&_,A=_>>>13,x=0|o[5],S=8191&x,Z=x>>>13,R=0|o[6],q=8191&R,B=R>>>13,N=0|o[7],L=8191&N,I=N>>>13,T=0|o[8],z=8191&T,E=T>>>13,O=0|o[9],j=8191&O,K=O>>>13,P=0|s[0],F=8191&P,J=P>>>13,C=0|s[1],D=8191&C,H=C>>>13,U=0|s[2],Y=8191&U,G=U>>>13,Q=0|s[3],V=8191&Q,W=Q>>>13,X=0|s[4],$=8191&X,tt=X>>>13,it=0|s[5],rt=8191&it,ht=it>>>13,nt=0|s[6],et=8191&nt,ot=nt>>>13,st=0|s[7],ut=8191&st,at=st>>>13,lt=0|s[8],mt=8191&lt,ft=lt>>>13,dt=0|s[9],pt=8191&dt,Mt=dt>>>13;r.negative=t.negative^i.negative,r.length=19;var vt=(a+(h=Math.imul(m,F))|0)+((8191&(n=(n=Math.imul(m,J))+Math.imul(f,F)|0))<<13)|0;a=((e=Math.imul(f,J))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,h=Math.imul(p,F),n=(n=Math.imul(p,J))+Math.imul(M,F)|0,e=Math.imul(M,J);var gt=(a+(h=h+Math.imul(m,D)|0)|0)+((8191&(n=(n=n+Math.imul(m,H)|0)+Math.imul(f,D)|0))<<13)|0;a=((e=e+Math.imul(f,H)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,h=Math.imul(g,F),n=(n=Math.imul(g,J))+Math.imul(c,F)|0,e=Math.imul(c,J),h=h+Math.imul(p,D)|0,n=(n=n+Math.imul(p,H)|0)+Math.imul(M,D)|0,e=e+Math.imul(M,H)|0;var ct=(a+(h=h+Math.imul(m,Y)|0)|0)+((8191&(n=(n=n+Math.imul(m,G)|0)+Math.imul(f,Y)|0))<<13)|0;a=((e=e+Math.imul(f,G)|0)+(n>>>13)|0)+(ct>>>26)|0,ct&=67108863,h=Math.imul(y,F),n=(n=Math.imul(y,J))+Math.imul(b,F)|0,e=Math.imul(b,J),h=h+Math.imul(g,D)|0,n=(n=n+Math.imul(g,H)|0)+Math.imul(c,D)|0,e=e+Math.imul(c,H)|0,h=h+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,G)|0)+Math.imul(M,Y)|0,e=e+Math.imul(M,G)|0;var wt=(a+(h=h+Math.imul(m,V)|0)|0)+((8191&(n=(n=n+Math.imul(m,W)|0)+Math.imul(f,V)|0))<<13)|0;a=((e=e+Math.imul(f,W)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,h=Math.imul(k,F),n=(n=Math.imul(k,J))+Math.imul(A,F)|0,e=Math.imul(A,J),h=h+Math.imul(y,D)|0,n=(n=n+Math.imul(y,H)|0)+Math.imul(b,D)|0,e=e+Math.imul(b,H)|0,h=h+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,G)|0)+Math.imul(c,Y)|0,e=e+Math.imul(c,G)|0,h=h+Math.imul(p,V)|0,n=(n=n+Math.imul(p,W)|0)+Math.imul(M,V)|0,e=e+Math.imul(M,W)|0;var yt=(a+(h=h+Math.imul(m,$)|0)|0)+((8191&(n=(n=n+Math.imul(m,tt)|0)+Math.imul(f,$)|0))<<13)|0;a=((e=e+Math.imul(f,tt)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,h=Math.imul(S,F),n=(n=Math.imul(S,J))+Math.imul(Z,F)|0,e=Math.imul(Z,J),h=h+Math.imul(k,D)|0,n=(n=n+Math.imul(k,H)|0)+Math.imul(A,D)|0,e=e+Math.imul(A,H)|0,h=h+Math.imul(y,Y)|0,n=(n=n+Math.imul(y,G)|0)+Math.imul(b,Y)|0,e=e+Math.imul(b,G)|0,h=h+Math.imul(g,V)|0,n=(n=n+Math.imul(g,W)|0)+Math.imul(c,V)|0,e=e+Math.imul(c,W)|0,h=h+Math.imul(p,$)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(M,$)|0,e=e+Math.imul(M,tt)|0;var bt=(a+(h=h+Math.imul(m,rt)|0)|0)+((8191&(n=(n=n+Math.imul(m,ht)|0)+Math.imul(f,rt)|0))<<13)|0;a=((e=e+Math.imul(f,ht)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,h=Math.imul(q,F),n=(n=Math.imul(q,J))+Math.imul(B,F)|0,e=Math.imul(B,J),h=h+Math.imul(S,D)|0,n=(n=n+Math.imul(S,H)|0)+Math.imul(Z,D)|0,e=e+Math.imul(Z,H)|0,h=h+Math.imul(k,Y)|0,n=(n=n+Math.imul(k,G)|0)+Math.imul(A,Y)|0,e=e+Math.imul(A,G)|0,h=h+Math.imul(y,V)|0,n=(n=n+Math.imul(y,W)|0)+Math.imul(b,V)|0,e=e+Math.imul(b,W)|0,h=h+Math.imul(g,$)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(c,$)|0,e=e+Math.imul(c,tt)|0,h=h+Math.imul(p,rt)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(M,rt)|0,e=e+Math.imul(M,ht)|0;var _t=(a+(h=h+Math.imul(m,et)|0)|0)+((8191&(n=(n=n+Math.imul(m,ot)|0)+Math.imul(f,et)|0))<<13)|0;a=((e=e+Math.imul(f,ot)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,h=Math.imul(L,F),n=(n=Math.imul(L,J))+Math.imul(I,F)|0,e=Math.imul(I,J),h=h+Math.imul(q,D)|0,n=(n=n+Math.imul(q,H)|0)+Math.imul(B,D)|0,e=e+Math.imul(B,H)|0,h=h+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,G)|0)+Math.imul(Z,Y)|0,e=e+Math.imul(Z,G)|0,h=h+Math.imul(k,V)|0,n=(n=n+Math.imul(k,W)|0)+Math.imul(A,V)|0,e=e+Math.imul(A,W)|0,h=h+Math.imul(y,$)|0,n=(n=n+Math.imul(y,tt)|0)+Math.imul(b,$)|0,e=e+Math.imul(b,tt)|0,h=h+Math.imul(g,rt)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(c,rt)|0,e=e+Math.imul(c,ht)|0,h=h+Math.imul(p,et)|0,n=(n=n+Math.imul(p,ot)|0)+Math.imul(M,et)|0,e=e+Math.imul(M,ot)|0;var kt=(a+(h=h+Math.imul(m,ut)|0)|0)+((8191&(n=(n=n+Math.imul(m,at)|0)+Math.imul(f,ut)|0))<<13)|0;a=((e=e+Math.imul(f,at)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,h=Math.imul(z,F),n=(n=Math.imul(z,J))+Math.imul(E,F)|0,e=Math.imul(E,J),h=h+Math.imul(L,D)|0,n=(n=n+Math.imul(L,H)|0)+Math.imul(I,D)|0,e=e+Math.imul(I,H)|0,h=h+Math.imul(q,Y)|0,n=(n=n+Math.imul(q,G)|0)+Math.imul(B,Y)|0,e=e+Math.imul(B,G)|0,h=h+Math.imul(S,V)|0,n=(n=n+Math.imul(S,W)|0)+Math.imul(Z,V)|0,e=e+Math.imul(Z,W)|0,h=h+Math.imul(k,$)|0,n=(n=n+Math.imul(k,tt)|0)+Math.imul(A,$)|0,e=e+Math.imul(A,tt)|0,h=h+Math.imul(y,rt)|0,n=(n=n+Math.imul(y,ht)|0)+Math.imul(b,rt)|0,e=e+Math.imul(b,ht)|0,h=h+Math.imul(g,et)|0,n=(n=n+Math.imul(g,ot)|0)+Math.imul(c,et)|0,e=e+Math.imul(c,ot)|0,h=h+Math.imul(p,ut)|0,n=(n=n+Math.imul(p,at)|0)+Math.imul(M,ut)|0,e=e+Math.imul(M,at)|0;var At=(a+(h=h+Math.imul(m,mt)|0)|0)+((8191&(n=(n=n+Math.imul(m,ft)|0)+Math.imul(f,mt)|0))<<13)|0;a=((e=e+Math.imul(f,ft)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,h=Math.imul(j,F),n=(n=Math.imul(j,J))+Math.imul(K,F)|0,e=Math.imul(K,J),h=h+Math.imul(z,D)|0,n=(n=n+Math.imul(z,H)|0)+Math.imul(E,D)|0,e=e+Math.imul(E,H)|0,h=h+Math.imul(L,Y)|0,n=(n=n+Math.imul(L,G)|0)+Math.imul(I,Y)|0,e=e+Math.imul(I,G)|0,h=h+Math.imul(q,V)|0,n=(n=n+Math.imul(q,W)|0)+Math.imul(B,V)|0,e=e+Math.imul(B,W)|0,h=h+Math.imul(S,$)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(Z,$)|0,e=e+Math.imul(Z,tt)|0,h=h+Math.imul(k,rt)|0,n=(n=n+Math.imul(k,ht)|0)+Math.imul(A,rt)|0,e=e+Math.imul(A,ht)|0,h=h+Math.imul(y,et)|0,n=(n=n+Math.imul(y,ot)|0)+Math.imul(b,et)|0,e=e+Math.imul(b,ot)|0,h=h+Math.imul(g,ut)|0,n=(n=n+Math.imul(g,at)|0)+Math.imul(c,ut)|0,e=e+Math.imul(c,at)|0,h=h+Math.imul(p,mt)|0,n=(n=n+Math.imul(p,ft)|0)+Math.imul(M,mt)|0,e=e+Math.imul(M,ft)|0;var xt=(a+(h=h+Math.imul(m,pt)|0)|0)+((8191&(n=(n=n+Math.imul(m,Mt)|0)+Math.imul(f,pt)|0))<<13)|0;a=((e=e+Math.imul(f,Mt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,h=Math.imul(j,D),n=(n=Math.imul(j,H))+Math.imul(K,D)|0,e=Math.imul(K,H),h=h+Math.imul(z,Y)|0,n=(n=n+Math.imul(z,G)|0)+Math.imul(E,Y)|0,e=e+Math.imul(E,G)|0,h=h+Math.imul(L,V)|0,n=(n=n+Math.imul(L,W)|0)+Math.imul(I,V)|0,e=e+Math.imul(I,W)|0,h=h+Math.imul(q,$)|0,n=(n=n+Math.imul(q,tt)|0)+Math.imul(B,$)|0,e=e+Math.imul(B,tt)|0,h=h+Math.imul(S,rt)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(Z,rt)|0,e=e+Math.imul(Z,ht)|0,h=h+Math.imul(k,et)|0,n=(n=n+Math.imul(k,ot)|0)+Math.imul(A,et)|0,e=e+Math.imul(A,ot)|0,h=h+Math.imul(y,ut)|0,n=(n=n+Math.imul(y,at)|0)+Math.imul(b,ut)|0,e=e+Math.imul(b,at)|0,h=h+Math.imul(g,mt)|0,n=(n=n+Math.imul(g,ft)|0)+Math.imul(c,mt)|0,e=e+Math.imul(c,ft)|0;var St=(a+(h=h+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,Mt)|0)+Math.imul(M,pt)|0))<<13)|0;a=((e=e+Math.imul(M,Mt)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,h=Math.imul(j,Y),n=(n=Math.imul(j,G))+Math.imul(K,Y)|0,e=Math.imul(K,G),h=h+Math.imul(z,V)|0,n=(n=n+Math.imul(z,W)|0)+Math.imul(E,V)|0,e=e+Math.imul(E,W)|0,h=h+Math.imul(L,$)|0,n=(n=n+Math.imul(L,tt)|0)+Math.imul(I,$)|0,e=e+Math.imul(I,tt)|0,h=h+Math.imul(q,rt)|0,n=(n=n+Math.imul(q,ht)|0)+Math.imul(B,rt)|0,e=e+Math.imul(B,ht)|0,h=h+Math.imul(S,et)|0,n=(n=n+Math.imul(S,ot)|0)+Math.imul(Z,et)|0,e=e+Math.imul(Z,ot)|0,h=h+Math.imul(k,ut)|0,n=(n=n+Math.imul(k,at)|0)+Math.imul(A,ut)|0,e=e+Math.imul(A,at)|0,h=h+Math.imul(y,mt)|0,n=(n=n+Math.imul(y,ft)|0)+Math.imul(b,mt)|0,e=e+Math.imul(b,ft)|0;var Zt=(a+(h=h+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,Mt)|0)+Math.imul(c,pt)|0))<<13)|0;a=((e=e+Math.imul(c,Mt)|0)+(n>>>13)|0)+(Zt>>>26)|0,Zt&=67108863,h=Math.imul(j,V),n=(n=Math.imul(j,W))+Math.imul(K,V)|0,e=Math.imul(K,W),h=h+Math.imul(z,$)|0,n=(n=n+Math.imul(z,tt)|0)+Math.imul(E,$)|0,e=e+Math.imul(E,tt)|0,h=h+Math.imul(L,rt)|0,n=(n=n+Math.imul(L,ht)|0)+Math.imul(I,rt)|0,e=e+Math.imul(I,ht)|0,h=h+Math.imul(q,et)|0,n=(n=n+Math.imul(q,ot)|0)+Math.imul(B,et)|0,e=e+Math.imul(B,ot)|0,h=h+Math.imul(S,ut)|0,n=(n=n+Math.imul(S,at)|0)+Math.imul(Z,ut)|0,e=e+Math.imul(Z,at)|0,h=h+Math.imul(k,mt)|0,n=(n=n+Math.imul(k,ft)|0)+Math.imul(A,mt)|0,e=e+Math.imul(A,ft)|0;var Rt=(a+(h=h+Math.imul(y,pt)|0)|0)+((8191&(n=(n=n+Math.imul(y,Mt)|0)+Math.imul(b,pt)|0))<<13)|0;a=((e=e+Math.imul(b,Mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,h=Math.imul(j,$),n=(n=Math.imul(j,tt))+Math.imul(K,$)|0,e=Math.imul(K,tt),h=h+Math.imul(z,rt)|0,n=(n=n+Math.imul(z,ht)|0)+Math.imul(E,rt)|0,e=e+Math.imul(E,ht)|0,h=h+Math.imul(L,et)|0,n=(n=n+Math.imul(L,ot)|0)+Math.imul(I,et)|0,e=e+Math.imul(I,ot)|0,h=h+Math.imul(q,ut)|0,n=(n=n+Math.imul(q,at)|0)+Math.imul(B,ut)|0,e=e+Math.imul(B,at)|0,h=h+Math.imul(S,mt)|0,n=(n=n+Math.imul(S,ft)|0)+Math.imul(Z,mt)|0,e=e+Math.imul(Z,ft)|0;var qt=(a+(h=h+Math.imul(k,pt)|0)|0)+((8191&(n=(n=n+Math.imul(k,Mt)|0)+Math.imul(A,pt)|0))<<13)|0;a=((e=e+Math.imul(A,Mt)|0)+(n>>>13)|0)+(qt>>>26)|0,qt&=67108863,h=Math.imul(j,rt),n=(n=Math.imul(j,ht))+Math.imul(K,rt)|0,e=Math.imul(K,ht),h=h+Math.imul(z,et)|0,n=(n=n+Math.imul(z,ot)|0)+Math.imul(E,et)|0,e=e+Math.imul(E,ot)|0,h=h+Math.imul(L,ut)|0,n=(n=n+Math.imul(L,at)|0)+Math.imul(I,ut)|0,e=e+Math.imul(I,at)|0,h=h+Math.imul(q,mt)|0,n=(n=n+Math.imul(q,ft)|0)+Math.imul(B,mt)|0,e=e+Math.imul(B,ft)|0;var Bt=(a+(h=h+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,Mt)|0)+Math.imul(Z,pt)|0))<<13)|0;a=((e=e+Math.imul(Z,Mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,h=Math.imul(j,et),n=(n=Math.imul(j,ot))+Math.imul(K,et)|0,e=Math.imul(K,ot),h=h+Math.imul(z,ut)|0,n=(n=n+Math.imul(z,at)|0)+Math.imul(E,ut)|0,e=e+Math.imul(E,at)|0,h=h+Math.imul(L,mt)|0,n=(n=n+Math.imul(L,ft)|0)+Math.imul(I,mt)|0,e=e+Math.imul(I,ft)|0;var Nt=(a+(h=h+Math.imul(q,pt)|0)|0)+((8191&(n=(n=n+Math.imul(q,Mt)|0)+Math.imul(B,pt)|0))<<13)|0;a=((e=e+Math.imul(B,Mt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,h=Math.imul(j,ut),n=(n=Math.imul(j,at))+Math.imul(K,ut)|0,e=Math.imul(K,at),h=h+Math.imul(z,mt)|0,n=(n=n+Math.imul(z,ft)|0)+Math.imul(E,mt)|0,e=e+Math.imul(E,ft)|0;var Lt=(a+(h=h+Math.imul(L,pt)|0)|0)+((8191&(n=(n=n+Math.imul(L,Mt)|0)+Math.imul(I,pt)|0))<<13)|0;a=((e=e+Math.imul(I,Mt)|0)+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,h=Math.imul(j,mt),n=(n=Math.imul(j,ft))+Math.imul(K,mt)|0,e=Math.imul(K,ft);var It=(a+(h=h+Math.imul(z,pt)|0)|0)+((8191&(n=(n=n+Math.imul(z,Mt)|0)+Math.imul(E,pt)|0))<<13)|0;a=((e=e+Math.imul(E,Mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863;var Tt=(a+(h=Math.imul(j,pt))|0)+((8191&(n=(n=Math.imul(j,Mt))+Math.imul(K,pt)|0))<<13)|0;return a=((e=Math.imul(K,Mt))+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,u[0]=vt,u[1]=gt,u[2]=ct,u[3]=wt,u[4]=yt,u[5]=bt,u[6]=_t,u[7]=kt,u[8]=At,u[9]=xt,u[10]=St,u[11]=Zt,u[12]=Rt,u[13]=qt,u[14]=Bt,u[15]=Nt,u[16]=Lt,u[17]=It,u[18]=Tt,0!==a&&(u[19]=a,r.length++),r};function p(t,i,r){return(new M).mulp(t,i,r)}function M(t,i){this.x=t,this.y=i}Math.imul||(d=f),e.prototype.mulTo=function(t,i){var r=this.length+t.length;return 10===this.length&&10===t.length?d(this,t,i):r<63?f(this,t,i):r<1024?function(t,i,r){r.negative=i.negative^t.negative,r.length=t.length+i.length;for(var h=0,n=0,e=0;e<r.length-1;e++){var o=n;n=0;for(var s=67108863&h,u=Math.min(e,i.length-1),a=Math.max(0,e-t.length+1);a<=u;a++){var l=e-a,m=(0|t.words[l])*(0|i.words[a]),f=67108863&m;s=67108863&(f=f+s|0),n+=(o=(o=o+(m/67108864|0)|0)+(f>>>26)|0)>>>26,o&=67108863}r.words[e]=s,h=o,o=n}return 0!==h?r.words[e]=h:r.length--,r.strip()}(this,t,i):p(this,t,i)},M.prototype.makeRBT=function(t){for(var i=new Array(t),r=e.prototype._countBits(t)-1,h=0;h<t;h++)i[h]=this.revBin(h,r,t);return i},M.prototype.revBin=function(t,i,r){if(0===t||t===r-1)return t;for(var h=0,n=0;n<i;n++)h|=(1&t)<<i-n-1,t>>=1;return h},M.prototype.permute=function(t,i,r,h,n,e){for(var o=0;o<e;o++)h[o]=i[t[o]],n[o]=r[t[o]]},M.prototype.transform=function(t,i,r,h,n,e){this.permute(e,t,i,r,h,n);for(var o=1;o<n;o<<=1)for(var s=o<<1,u=Math.cos(2*Math.PI/s),a=Math.sin(2*Math.PI/s),l=0;l<n;l+=s)for(var m=u,f=a,d=0;d<o;d++){var p=r[l+d],M=h[l+d],v=r[l+d+o],g=h[l+d+o],c=m*v-f*g;g=m*g+f*v,v=c,r[l+d]=p+v,h[l+d]=M+g,r[l+d+o]=p-v,h[l+d+o]=M-g,d!==s&&(c=u*m-a*f,f=u*f+a*m,m=c)}},M.prototype.guessLen13b=function(t,i){var r=1|Math.max(i,t),h=1&r,n=0;for(r=r/2|0;r;r>>>=1)n++;return 1<<n+1+h},M.prototype.conjugate=function(t,i,r){if(!(r<=1))for(var h=0;h<r/2;h++){var n=t[h];t[h]=t[r-h-1],t[r-h-1]=n,n=i[h],i[h]=-i[r-h-1],i[r-h-1]=-n}},M.prototype.normalize13b=function(t,i){for(var r=0,h=0;h<i/2;h++){var n=8192*Math.round(t[2*h+1]/i)+Math.round(t[2*h]/i)+r;t[h]=67108863&n,r=n<67108864?0:n/67108864|0}return t},M.prototype.convert13b=function(t,i,r,n){for(var e=0,o=0;o<i;o++)e+=0|t[o],r[2*o]=8191&e,e>>>=13,r[2*o+1]=8191&e,e>>>=13;for(o=2*i;o<n;++o)r[o]=0;h(0===e),h(0==(-8192&e))},M.prototype.stub=function(t){for(var i=new Array(t),r=0;r<t;r++)i[r]=0;return i},M.prototype.mulp=function(t,i,r){var h=2*this.guessLen13b(t.length,i.length),n=this.makeRBT(h),e=this.stub(h),o=new Array(h),s=new Array(h),u=new Array(h),a=new Array(h),l=new Array(h),m=new Array(h),f=r.words;f.length=h,this.convert13b(t.words,t.length,o,h),this.convert13b(i.words,i.length,a,h),this.transform(o,e,s,u,h,n),this.transform(a,e,l,m,h,n);for(var d=0;d<h;d++){var p=s[d]*l[d]-u[d]*m[d];u[d]=s[d]*m[d]+u[d]*l[d],s[d]=p}return this.conjugate(s,u,h),this.transform(s,u,f,e,h,n),this.conjugate(f,e,h),this.normalize13b(f,h),r.negative=t.negative^i.negative,r.length=t.length+i.length,r.strip()},e.prototype.mul=function(t){var i=new e(null);return i.words=new Array(this.length+t.length),this.mulTo(t,i)},e.prototype.mulf=function(t){var i=new e(null);return i.words=new Array(this.length+t.length),p(this,t,i)},e.prototype.imul=function(t){return this.clone().mulTo(t,this)},e.prototype.imuln=function(t){h(\"number\"==typeof t),h(t<67108864);for(var i=0,r=0;r<this.length;r++){var n=(0|this.words[r])*t,e=(67108863&n)+(67108863&i);i>>=26,i+=n/67108864|0,i+=e>>>26,this.words[r]=67108863&e}return 0!==i&&(this.words[r]=i,this.length++),this},e.prototype.muln=function(t){return this.clone().imuln(t)},e.prototype.sqr=function(){return this.mul(this)},e.prototype.isqr=function(){return this.imul(this.clone())},e.prototype.pow=function(t){var i=function(t){for(var i=new Array(t.bitLength()),r=0;r<i.length;r++){var h=r/26|0,n=r%26;i[r]=(t.words[h]&1<<n)>>>n}return i}(t);if(0===i.length)return new e(1);for(var r=this,h=0;h<i.length&&0===i[h];h++,r=r.sqr());if(++h<i.length)for(var n=r.sqr();h<i.length;h++,n=n.sqr())0!==i[h]&&(r=r.mul(n));return r},e.prototype.iushln=function(t){h(\"number\"==typeof t&&t>=0);var i,r=t%26,n=(t-r)/26,e=67108863>>>26-r<<26-r;if(0!==r){var o=0;for(i=0;i<this.length;i++){var s=this.words[i]&e,u=(0|this.words[i])-s<<r;this.words[i]=u|o,o=s>>>26-r}o&&(this.words[i]=o,this.length++)}if(0!==n){for(i=this.length-1;i>=0;i--)this.words[i+n]=this.words[i];for(i=0;i<n;i++)this.words[i]=0;this.length+=n}return this.strip()},e.prototype.ishln=function(t){return h(0===this.negative),this.iushln(t)},e.prototype.iushrn=function(t,i,r){var n;h(\"number\"==typeof t&&t>=0),n=i?(i-i%26)/26:0;var e=t%26,o=Math.min((t-e)/26,this.length),s=67108863^67108863>>>e<<e,u=r;if(n-=o,n=Math.max(0,n),u){for(var a=0;a<o;a++)u.words[a]=this.words[a];u.length=o}if(0===o);else if(this.length>o)for(this.length-=o,a=0;a<this.length;a++)this.words[a]=this.words[a+o];else this.words[0]=0,this.length=1;var l=0;for(a=this.length-1;a>=0&&(0!==l||a>=n);a--){var m=0|this.words[a];this.words[a]=l<<26-e|m>>>e,l=m&s}return u&&0!==l&&(u.words[u.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},e.prototype.ishrn=function(t,i,r){return h(0===this.negative),this.iushrn(t,i,r)},e.prototype.shln=function(t){return this.clone().ishln(t)},e.prototype.ushln=function(t){return this.clone().iushln(t)},e.prototype.shrn=function(t){return this.clone().ishrn(t)},e.prototype.ushrn=function(t){return this.clone().iushrn(t)},e.prototype.testn=function(t){h(\"number\"==typeof t&&t>=0);var i=t%26,r=(t-i)/26,n=1<<i;return!(this.length<=r)&&!!(this.words[r]&n)},e.prototype.imaskn=function(t){h(\"number\"==typeof t&&t>=0);var i=t%26,r=(t-i)/26;if(h(0===this.negative,\"imaskn works only with positive numbers\"),this.length<=r)return this;if(0!==i&&r++,this.length=Math.min(r,this.length),0!==i){var n=67108863^67108863>>>i<<i;this.words[this.length-1]&=n}return this.strip()},e.prototype.maskn=function(t){return this.clone().imaskn(t)},e.prototype.iaddn=function(t){return h(\"number\"==typeof t),h(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},e.prototype._iaddn=function(t){this.words[0]+=t;for(var i=0;i<this.length&&this.words[i]>=67108864;i++)this.words[i]-=67108864,i===this.length-1?this.words[i+1]=1:this.words[i+1]++;return this.length=Math.max(this.length,i+1),this},e.prototype.isubn=function(t){if(h(\"number\"==typeof t),h(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var i=0;i<this.length&&this.words[i]<0;i++)this.words[i]+=67108864,this.words[i+1]-=1;return this.strip()},e.prototype.addn=function(t){return this.clone().iaddn(t)},e.prototype.subn=function(t){return this.clone().isubn(t)},e.prototype.iabs=function(){return this.negative=0,this},e.prototype.abs=function(){return this.clone().iabs()},e.prototype._ishlnsubmul=function(t,i,r){var n,e,o=t.length+r;this._expand(o);var s=0;for(n=0;n<t.length;n++){e=(0|this.words[n+r])+s;var u=(0|t.words[n])*i;s=((e-=67108863&u)>>26)-(u/67108864|0),this.words[n+r]=67108863&e}for(;n<this.length-r;n++)s=(e=(0|this.words[n+r])+s)>>26,this.words[n+r]=67108863&e;if(0===s)return this.strip();for(h(-1===s),s=0,n=0;n<this.length;n++)s=(e=-(0|this.words[n])+s)>>26,this.words[n]=67108863&e;return this.negative=1,this.strip()},e.prototype._wordDiv=function(t,i){var r=(this.length,t.length),h=this.clone(),n=t,o=0|n.words[n.length-1];0!==(r=26-this._countBits(o))&&(n=n.ushln(r),h.iushln(r),o=0|n.words[n.length-1]);var s,u=h.length-n.length;if(\"mod\"!==i){(s=new e(null)).length=u+1,s.words=new Array(s.length);for(var a=0;a<s.length;a++)s.words[a]=0}var l=h.clone()._ishlnsubmul(n,1,u);0===l.negative&&(h=l,s&&(s.words[u]=1));for(var m=u-1;m>=0;m--){var f=67108864*(0|h.words[n.length+m])+(0|h.words[n.length+m-1]);for(f=Math.min(f/o|0,67108863),h._ishlnsubmul(n,f,m);0!==h.negative;)f--,h.negative=0,h._ishlnsubmul(n,1,m),h.isZero()||(h.negative^=1);s&&(s.words[m]=f)}return s&&s.strip(),h.strip(),\"div\"!==i&&0!==r&&h.iushrn(r),{div:s||null,mod:h}},e.prototype.divmod=function(t,i,r){return h(!t.isZero()),this.isZero()?{div:new e(0),mod:new e(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,i),\"mod\"!==i&&(n=s.div.neg()),\"div\"!==i&&(o=s.mod.neg(),r&&0!==o.negative&&o.iadd(t)),{div:n,mod:o}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),i),\"mod\"!==i&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),i),\"div\"!==i&&(o=s.mod.neg(),r&&0!==o.negative&&o.isub(t)),{div:s.div,mod:o}):t.length>this.length||this.cmp(t)<0?{div:new e(0),mod:this}:1===t.length?\"div\"===i?{div:this.divn(t.words[0]),mod:null}:\"mod\"===i?{div:null,mod:new e(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new e(this.modn(t.words[0]))}:this._wordDiv(t,i);var n,o,s},e.prototype.div=function(t){return this.divmod(t,\"div\",!1).div},e.prototype.mod=function(t){return this.divmod(t,\"mod\",!1).mod},e.prototype.umod=function(t){return this.divmod(t,\"mod\",!0).mod},e.prototype.divRound=function(t){var i=this.divmod(t);if(i.mod.isZero())return i.div;var r=0!==i.div.negative?i.mod.isub(t):i.mod,h=t.ushrn(1),n=t.andln(1),e=r.cmp(h);return e<0||1===n&&0===e?i.div:0!==i.div.negative?i.div.isubn(1):i.div.iaddn(1)},e.prototype.modn=function(t){h(t<=67108863);for(var i=(1<<26)%t,r=0,n=this.length-1;n>=0;n--)r=(i*r+(0|this.words[n]))%t;return r},e.prototype.idivn=function(t){h(t<=67108863);for(var i=0,r=this.length-1;r>=0;r--){var n=(0|this.words[r])+67108864*i;this.words[r]=n/t|0,i=n%t}return this.strip()},e.prototype.divn=function(t){return this.clone().idivn(t)},e.prototype.egcd=function(t){h(0===t.negative),h(!t.isZero());var i=this,r=t.clone();i=0!==i.negative?i.umod(t):i.clone();for(var n=new e(1),o=new e(0),s=new e(0),u=new e(1),a=0;i.isEven()&&r.isEven();)i.iushrn(1),r.iushrn(1),++a;for(var l=r.clone(),m=i.clone();!i.isZero();){for(var f=0,d=1;0==(i.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(i.iushrn(f);f-- >0;)(n.isOdd()||o.isOdd())&&(n.iadd(l),o.isub(m)),n.iushrn(1),o.iushrn(1);for(var p=0,M=1;0==(r.words[0]&M)&&p<26;++p,M<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(s.isOdd()||u.isOdd())&&(s.iadd(l),u.isub(m)),s.iushrn(1),u.iushrn(1);i.cmp(r)>=0?(i.isub(r),n.isub(s),o.isub(u)):(r.isub(i),s.isub(n),u.isub(o))}return{a:s,b:u,gcd:r.iushln(a)}},e.prototype._invmp=function(t){h(0===t.negative),h(!t.isZero());var i=this,r=t.clone();i=0!==i.negative?i.umod(t):i.clone();for(var n,o=new e(1),s=new e(0),u=r.clone();i.cmpn(1)>0&&r.cmpn(1)>0;){for(var a=0,l=1;0==(i.words[0]&l)&&a<26;++a,l<<=1);if(a>0)for(i.iushrn(a);a-- >0;)o.isOdd()&&o.iadd(u),o.iushrn(1);for(var m=0,f=1;0==(r.words[0]&f)&&m<26;++m,f<<=1);if(m>0)for(r.iushrn(m);m-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);i.cmp(r)>=0?(i.isub(r),o.isub(s)):(r.isub(i),s.isub(o))}return(n=0===i.cmpn(1)?o:s).cmpn(0)<0&&n.iadd(t),n},e.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var i=this.clone(),r=t.clone();i.negative=0,r.negative=0;for(var h=0;i.isEven()&&r.isEven();h++)i.iushrn(1),r.iushrn(1);for(;;){for(;i.isEven();)i.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=i.cmp(r);if(n<0){var e=i;i=r,r=e}else if(0===n||0===r.cmpn(1))break;i.isub(r)}return r.iushln(h)},e.prototype.invm=function(t){return this.egcd(t).a.umod(t)},e.prototype.isEven=function(){return 0==(1&this.words[0])},e.prototype.isOdd=function(){return 1==(1&this.words[0])},e.prototype.andln=function(t){return this.words[0]&t},e.prototype.bincn=function(t){h(\"number\"==typeof t);var i=t%26,r=(t-i)/26,n=1<<i;if(this.length<=r)return this._expand(r+1),this.words[r]|=n,this;for(var e=n,o=r;0!==e&&o<this.length;o++){var s=0|this.words[o];e=(s+=e)>>>26,s&=67108863,this.words[o]=s}return 0!==e&&(this.words[o]=e,this.length++),this},e.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},e.prototype.cmpn=function(t){var i,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)i=1;else{r&&(t=-t),h(t<=67108863,\"Number is too big\");var n=0|this.words[0];i=n===t?0:n<t?-1:1}return 0!==this.negative?0|-i:i},e.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var i=this.ucmp(t);return 0!==this.negative?0|-i:i},e.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var i=0,r=this.length-1;r>=0;r--){var h=0|this.words[r],n=0|t.words[r];if(h!==n){h<n?i=-1:h>n&&(i=1);break}}return i},e.prototype.gtn=function(t){return 1===this.cmpn(t)},e.prototype.gt=function(t){return 1===this.cmp(t)},e.prototype.gten=function(t){return this.cmpn(t)>=0},e.prototype.gte=function(t){return this.cmp(t)>=0},e.prototype.ltn=function(t){return-1===this.cmpn(t)},e.prototype.lt=function(t){return-1===this.cmp(t)},e.prototype.lten=function(t){return this.cmpn(t)<=0},e.prototype.lte=function(t){return this.cmp(t)<=0},e.prototype.eqn=function(t){return 0===this.cmpn(t)},e.prototype.eq=function(t){return 0===this.cmp(t)},e.red=function(t){return new _(t)},e.prototype.toRed=function(t){return h(!this.red,\"Already a number in reduction context\"),h(0===this.negative,\"red works only with positives\"),t.convertTo(this)._forceRed(t)},e.prototype.fromRed=function(){return h(this.red,\"fromRed works only with numbers in reduction context\"),this.red.convertFrom(this)},e.prototype._forceRed=function(t){return this.red=t,this},e.prototype.forceRed=function(t){return h(!this.red,\"Already a number in reduction context\"),this._forceRed(t)},e.prototype.redAdd=function(t){return h(this.red,\"redAdd works only with red numbers\"),this.red.add(this,t)},e.prototype.redIAdd=function(t){return h(this.red,\"redIAdd works only with red numbers\"),this.red.iadd(this,t)},e.prototype.redSub=function(t){return h(this.red,\"redSub works only with red numbers\"),this.red.sub(this,t)},e.prototype.redISub=function(t){return h(this.red,\"redISub works only with red numbers\"),this.red.isub(this,t)},e.prototype.redShl=function(t){return h(this.red,\"redShl works only with red numbers\"),this.red.shl(this,t)},e.prototype.redMul=function(t){return h(this.red,\"redMul works only with red numbers\"),this.red._verify2(this,t),this.red.mul(this,t)},e.prototype.redIMul=function(t){return h(this.red,\"redMul works only with red numbers\"),this.red._verify2(this,t),this.red.imul(this,t)},e.prototype.redSqr=function(){return h(this.red,\"redSqr works only with red numbers\"),this.red._verify1(this),this.red.sqr(this)},e.prototype.redISqr=function(){return h(this.red,\"redISqr works only with red numbers\"),this.red._verify1(this),this.red.isqr(this)},e.prototype.redSqrt=function(){return h(this.red,\"redSqrt works only with red numbers\"),this.red._verify1(this),this.red.sqrt(this)},e.prototype.redInvm=function(){return h(this.red,\"redInvm works only with red numbers\"),this.red._verify1(this),this.red.invm(this)},e.prototype.redNeg=function(){return h(this.red,\"redNeg works only with red numbers\"),this.red._verify1(this),this.red.neg(this)},e.prototype.redPow=function(t){return h(this.red&&!t.red,\"redPow(normalNum)\"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,i){this.name=t,this.p=new e(i,16),this.n=this.p.bitLength(),this.k=new e(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function c(){g.call(this,\"k256\",\"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\")}function w(){g.call(this,\"p224\",\"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\")}function y(){g.call(this,\"p192\",\"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\")}function b(){g.call(this,\"25519\",\"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\")}function _(t){if(\"string\"==typeof t){var i=e._prime(t);this.m=i.p,this.prime=i}else h(t.gtn(1),\"modulus must be greater than 1\"),this.m=t,this.prime=null}function k(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new e(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new e(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var i,r=t;do{this.split(r,this.tmp),i=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(i>this.n);var h=i<this.n?-1:r.ucmp(this.p);return 0===h?(r.words[0]=0,r.length=1):h>0?r.isub(this.p):r.strip(),r},g.prototype.split=function(t,i){t.iushrn(this.n,0,i)},g.prototype.imulK=function(t){return t.imul(this.k)},n(c,g),c.prototype.split=function(t,i){for(var r=Math.min(t.length,9),h=0;h<r;h++)i.words[h]=t.words[h];if(i.length=r,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(i.words[i.length++]=4194303&n,h=10;h<t.length;h++){var e=0|t.words[h];t.words[h-10]=(4194303&e)<<4|n>>>22,n=e}n>>>=22,t.words[h-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},c.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var i=0,r=0;r<t.length;r++){var h=0|t.words[r];i+=977*h,t.words[r]=67108863&i,i=64*h+(i/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(w,g),n(y,g),n(b,g),b.prototype.imulK=function(t){for(var i=0,r=0;r<t.length;r++){var h=19*(0|t.words[r])+i,n=67108863&h;h>>>=26,t.words[r]=n,i=h}return 0!==i&&(t.words[t.length++]=i),t},e._prime=function(t){if(v[t])return v[t];var i;if(\"k256\"===t)i=new c;else if(\"p224\"===t)i=new w;else if(\"p192\"===t)i=new y;else{if(\"p25519\"!==t)throw new Error(\"Unknown prime \"+t);i=new b}return v[t]=i,i},_.prototype._verify1=function(t){h(0===t.negative,\"red works only with positives\"),h(t.red,\"red works only with red numbers\")},_.prototype._verify2=function(t,i){h(0==(t.negative|i.negative),\"red works only with positives\"),h(t.red&&t.red===i.red,\"red works only with red numbers\")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,i){this._verify2(t,i);var r=t.add(i);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},_.prototype.iadd=function(t,i){this._verify2(t,i);var r=t.iadd(i);return r.cmp(this.m)>=0&&r.isub(this.m),r},_.prototype.sub=function(t,i){this._verify2(t,i);var r=t.sub(i);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},_.prototype.isub=function(t,i){this._verify2(t,i);var r=t.isub(i);return r.cmpn(0)<0&&r.iadd(this.m),r},_.prototype.shl=function(t,i){return this._verify1(t),this.imod(t.ushln(i))},_.prototype.imul=function(t,i){return this._verify2(t,i),this.imod(t.imul(i))},_.prototype.mul=function(t,i){return this._verify2(t,i),this.imod(t.mul(i))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var i=this.m.andln(3);if(h(i%2==1),3===i){var r=this.m.add(new e(1)).iushrn(2);return this.pow(t,r)}for(var n=this.m.subn(1),o=0;!n.isZero()&&0===n.andln(1);)o++,n.iushrn(1);h(!n.isZero());var s=new e(1).toRed(this),u=s.redNeg(),a=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new e(2*l*l).toRed(this);0!==this.pow(l,a).cmp(u);)l.redIAdd(u);for(var m=this.pow(l,n),f=this.pow(t,n.addn(1).iushrn(1)),d=this.pow(t,n),p=o;0!==d.cmp(s);){for(var M=d,v=0;0!==M.cmp(s);v++)M=M.redSqr();h(v<p);var g=this.pow(m,new e(1).iushln(p-v-1));f=f.redMul(g),m=g.redSqr(),d=d.redMul(m),p=v}return f},_.prototype.invm=function(t){var i=t._invmp(this.m);return 0!==i.negative?(i.negative=0,this.imod(i).redNeg()):this.imod(i)},_.prototype.pow=function(t,i){if(i.isZero())return new e(1).toRed(this);if(0===i.cmpn(1))return t.clone();var r=new Array(16);r[0]=new e(1).toRed(this),r[1]=t;for(var h=2;h<r.length;h++)r[h]=this.mul(r[h-1],t);var n=r[0],o=0,s=0,u=i.bitLength()%26;for(0===u&&(u=26),h=i.length-1;h>=0;h--){for(var a=i.words[h],l=u-1;l>=0;l--){var m=a>>l&1;n!==r[0]&&(n=this.sqr(n)),0!==m||0!==o?(o<<=1,o|=m,(4===++s||0===h&&0===l)&&(n=this.mul(n,r[o]),s=0,o=0)):s=0}u=26}return n},_.prototype.convertTo=function(t){var i=t.umod(this.m);return i===t?i.clone():i},_.prototype.convertFrom=function(t){var i=t.clone();return i.red=null,i},e.mont=function(t){return new k(t)},n(k,_),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var i=this.imod(t.mul(this.rinv));return i.red=null,i},k.prototype.imul=function(t,i){if(t.isZero()||i.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(i),h=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(h).iushrn(this.shift),e=n;return n.cmp(this.m)>=0?e=n.isub(this.m):n.cmpn(0)<0&&(e=n.iadd(this.m)),e._forceRed(this)},k.prototype.mul=function(t,i){if(t.isZero()||i.isZero())return new e(0)._forceRed(this);var r=t.mul(i),h=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(h).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,r(\"YuTi\")(t))}}]);","extractedComments":[]}