{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\garrick\\\\source\\\\repos\\\\snapform\\\\node_modules\\\\randomfill\\\\browser.js\"],\"names\":[\"global\",\"process\",\"oldBrowser\",\"Error\",\"safeBuffer\",\"__webpack_require__\",\"randombytes\",\"Buffer\",\"kBufferMaxLength\",\"kMaxLength\",\"crypto\",\"msCrypto\",\"kMaxUint32\",\"Math\",\"pow\",\"assertOffset\",\"offset\",\"length\",\"TypeError\",\"RangeError\",\"assertSize\",\"size\",\"actualFill\",\"buf\",\"cb\",\"browser\",\"ourBuf\",\"buffer\",\"uint\",\"Uint8Array\",\"getRandomValues\",\"nextTick\",\"copy\",\"err\",\"bytes\",\"exports\",\"randomFill\",\"isBuffer\",\"randomFillSync\",\"undefined\"],\"mappings\":\"6FAAA,SAAAA,EAAAC,GAEA,SAAAC,IACA,MAAA,IAAAC,MAAA,8GAEA,IAAAC,EAAiBC,EAAQ,QACzBC,EAAkBD,EAAQ,QAC1BE,EAAAH,EAAAG,OACAC,EAAAJ,EAAAK,WACAC,EAAAV,EAAAU,QAAAV,EAAAW,SACAC,EAAAC,KAAAC,IAAA,EAAA,IAAA,EACA,SAAAC,EAAAC,EAAAC,GACA,GAAA,iBAAAD,GAAAA,GAAAA,EACA,MAAA,IAAAE,UAAA,2BAGA,GAAAF,EAAAJ,GAAAI,EAAA,EACA,MAAA,IAAAE,UAAA,2BAGA,GAAAF,EAAAR,GAAAQ,EAAAC,EACA,MAAA,IAAAE,WAAA,uBAIA,SAAAC,EAAAC,EAAAL,EAAAC,GACA,GAAA,iBAAAI,GAAAA,GAAAA,EACA,MAAA,IAAAH,UAAA,yBAGA,GAAAG,EAAAT,GAAAS,EAAA,EACA,MAAA,IAAAH,UAAA,yBAGA,GAAAG,EAAAL,EAAAC,GAAAI,EAAAb,EACA,MAAA,IAAAW,WAAA,oBA8BA,SAAAG,EAAAC,EAAAP,EAAAK,EAAAG,GACA,GAAAvB,EAAAwB,QAAA,CACA,IAAAC,EAAAH,EAAAI,OACAC,EAAA,IAAAC,WAAAH,EAAAV,EAAAK,GAEA,OADAX,EAAAoB,gBAAAF,GACAJ,OACAvB,EAAA8B,SAAA,WACAP,EAAA,KAAAD,KAIAA,EAEA,IAAAC,EAYA,OAFAlB,EAAAe,GACAW,KAAAT,EAAAP,GACAO,EAXAjB,EAAAe,EAAA,SAAAY,EAAAC,GACA,GAAAD,EACA,OAAAT,EAAAS,GAEAC,EAAAF,KAAAT,EAAAP,GACAQ,EAAA,KAAAD,KA9CAb,GAAAA,EAAAoB,kBAAA7B,EAAAwB,SACAU,EAAAC,WAMA,SAAAb,EAAAP,EAAAK,EAAAG,GACA,KAAAjB,EAAA8B,SAAAd,IAAAA,aAAAvB,EAAA6B,YACA,MAAA,IAAAX,UAAA,iDAGA,GAAA,mBAAAF,EACAQ,EAAAR,EACAA,EAAA,EACAK,EAAAE,EAAAN,YACG,GAAA,mBAAAI,EACHG,EAAAH,EACAA,EAAAE,EAAAN,OAAAD,OACG,GAAA,mBAAAQ,EACH,MAAA,IAAAN,UAAA,oCAIA,OAFAH,EAAAC,EAAAO,EAAAN,QACAG,EAAAC,EAAAL,EAAAO,EAAAN,QACAK,EAAAC,EAAAP,EAAAK,EAAAG,IAtBAW,EAAAG,eAoDA,SAAAf,EAAAP,EAAAK,QACA,IAAAL,IACAA,EAAA,GAEA,KAAAT,EAAA8B,SAAAd,IAAAA,aAAAvB,EAAA6B,YACA,MAAA,IAAAX,UAAA,iDAGAH,EAAAC,EAAAO,EAAAN,aAEAsB,IAAAlB,IAAAA,EAAAE,EAAAN,OAAAD,GAIA,OAFAI,EAAAC,EAAAL,EAAAO,EAAAN,QAEAK,EAAAC,EAAAP,EAAAK,MAhEAc,EAAAC,WAAAlC,EACAiC,EAAAG,eAAApC\",\"sourcesContent\":[\"'use strict'\\n\\nfunction oldBrowser () {\\n  throw new Error('secure random number generation not supported by this browser\\\\nuse chrome, FireFox or Internet Explorer 11')\\n}\\nvar safeBuffer = require('safe-buffer')\\nvar randombytes = require('randombytes')\\nvar Buffer = safeBuffer.Buffer\\nvar kBufferMaxLength = safeBuffer.kMaxLength\\nvar crypto = global.crypto || global.msCrypto\\nvar kMaxUint32 = Math.pow(2, 32) - 1\\nfunction assertOffset (offset, length) {\\n  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare\\n    throw new TypeError('offset must be a number')\\n  }\\n\\n  if (offset > kMaxUint32 || offset < 0) {\\n    throw new TypeError('offset must be a uint32')\\n  }\\n\\n  if (offset > kBufferMaxLength || offset > length) {\\n    throw new RangeError('offset out of range')\\n  }\\n}\\n\\nfunction assertSize (size, offset, length) {\\n  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare\\n    throw new TypeError('size must be a number')\\n  }\\n\\n  if (size > kMaxUint32 || size < 0) {\\n    throw new TypeError('size must be a uint32')\\n  }\\n\\n  if (size + offset > length || size > kBufferMaxLength) {\\n    throw new RangeError('buffer too small')\\n  }\\n}\\nif ((crypto && crypto.getRandomValues) || !process.browser) {\\n  exports.randomFill = randomFill\\n  exports.randomFillSync = randomFillSync\\n} else {\\n  exports.randomFill = oldBrowser\\n  exports.randomFillSync = oldBrowser\\n}\\nfunction randomFill (buf, offset, size, cb) {\\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\\n    throw new TypeError('\\\"buf\\\" argument must be a Buffer or Uint8Array')\\n  }\\n\\n  if (typeof offset === 'function') {\\n    cb = offset\\n    offset = 0\\n    size = buf.length\\n  } else if (typeof size === 'function') {\\n    cb = size\\n    size = buf.length - offset\\n  } else if (typeof cb !== 'function') {\\n    throw new TypeError('\\\"cb\\\" argument must be a function')\\n  }\\n  assertOffset(offset, buf.length)\\n  assertSize(size, offset, buf.length)\\n  return actualFill(buf, offset, size, cb)\\n}\\n\\nfunction actualFill (buf, offset, size, cb) {\\n  if (process.browser) {\\n    var ourBuf = buf.buffer\\n    var uint = new Uint8Array(ourBuf, offset, size)\\n    crypto.getRandomValues(uint)\\n    if (cb) {\\n      process.nextTick(function () {\\n        cb(null, buf)\\n      })\\n      return\\n    }\\n    return buf\\n  }\\n  if (cb) {\\n    randombytes(size, function (err, bytes) {\\n      if (err) {\\n        return cb(err)\\n      }\\n      bytes.copy(buf, offset)\\n      cb(null, buf)\\n    })\\n    return\\n  }\\n  var bytes = randombytes(size)\\n  bytes.copy(buf, offset)\\n  return buf\\n}\\nfunction randomFillSync (buf, offset, size) {\\n  if (typeof offset === 'undefined') {\\n    offset = 0\\n  }\\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\\n    throw new TypeError('\\\"buf\\\" argument must be a Buffer or Uint8Array')\\n  }\\n\\n  assertOffset(offset, buf.length)\\n\\n  if (size === undefined) size = buf.length - offset\\n\\n  assertSize(size, offset, buf.length)\\n\\n  return actualFill(buf, offset, size)\\n}\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{dcwN:function(r,n,e){\"use strict\";(function(r,t){function o(){throw new Error(\"secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11\")}var f=e(\"hwdV\"),i=e(\"Edxu\"),u=f.Buffer,a=f.kMaxLength,s=r.crypto||r.msCrypto,w=Math.pow(2,32)-1;function c(r,n){if(\"number\"!=typeof r||r!=r)throw new TypeError(\"offset must be a number\");if(r>w||r<0)throw new TypeError(\"offset must be a uint32\");if(r>a||r>n)throw new RangeError(\"offset out of range\")}function l(r,n,e){if(\"number\"!=typeof r||r!=r)throw new TypeError(\"size must be a number\");if(r>w||r<0)throw new TypeError(\"size must be a uint32\");if(r+n>e||r>a)throw new RangeError(\"buffer too small\")}function p(r,n,e,o){if(t.browser){var f=r.buffer,u=new Uint8Array(f,n,e);return s.getRandomValues(u),o?void t.nextTick(function(){o(null,r)}):r}if(!o)return i(e).copy(r,n),r;i(e,function(e,t){if(e)return o(e);t.copy(r,n),o(null,r)})}s&&s.getRandomValues||!t.browser?(n.randomFill=function(n,e,t,o){if(!(u.isBuffer(n)||n instanceof r.Uint8Array))throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');if(\"function\"==typeof e)o=e,e=0,t=n.length;else if(\"function\"==typeof t)o=t,t=n.length-e;else if(\"function\"!=typeof o)throw new TypeError('\"cb\" argument must be a function');return c(e,n.length),l(t,e,n.length),p(n,e,t,o)},n.randomFillSync=function(n,e,t){void 0===e&&(e=0);if(!(u.isBuffer(n)||n instanceof r.Uint8Array))throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');c(e,n.length),void 0===t&&(t=n.length-e);return l(t,e,n.length),p(n,e,t)}):(n.randomFill=o,n.randomFillSync=o)}).call(this,e(\"yLpj\"),e(\"8oxB\"))}}]);","extractedComments":[]}